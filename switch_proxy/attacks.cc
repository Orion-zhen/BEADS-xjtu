extern "C" {
#include <loci/loci.h>
#include <loci/of_object.h>
#include <loci/loci_obj_dump.h>
}
#include <vector>
class OpenFlow {
void do_of_aggregate_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_aggregate_stats_reply_xid_set( (of_aggregate_stats_reply_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_aggregate_stats_reply_xid_get( (of_aggregate_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_aggregate_stats_reply_flags_set( (of_aggregate_stats_reply_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_aggregate_stats_reply_flags_get( (of_aggregate_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_reply_packet_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_aggregate_stats_reply_packet_count_set( (of_aggregate_stats_reply_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_reply_packet_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_aggregate_stats_reply_packet_count_get( (of_aggregate_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_reply_byte_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_aggregate_stats_reply_byte_count_set( (of_aggregate_stats_reply_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_reply_byte_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_aggregate_stats_reply_byte_count_get( (of_aggregate_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_reply_flow_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_aggregate_stats_reply_flow_count_set( (of_aggregate_stats_reply_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_reply_flow_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_aggregate_stats_reply_flow_count_get( (of_aggregate_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_aggregate_stats_request_xid_set( (of_aggregate_stats_request_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_aggregate_stats_request_xid_get( (of_aggregate_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_aggregate_stats_request_flags_set( (of_aggregate_stats_request_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_aggregate_stats_request_flags_get( (of_aggregate_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_request_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_aggregate_stats_request_table_id_set( (of_aggregate_stats_request_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_request_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_aggregate_stats_request_table_id_get( (of_aggregate_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_request_out_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_aggregate_stats_request_out_port_set( (of_aggregate_stats_request_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_request_out_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_aggregate_stats_request_out_port_get( (of_aggregate_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_request_out_group_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_aggregate_stats_request_out_group_set( (of_aggregate_stats_request_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_request_out_group_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_aggregate_stats_request_out_group_get( (of_aggregate_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_request_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_aggregate_stats_request_cookie_set( (of_aggregate_stats_request_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_request_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_aggregate_stats_request_cookie_get( (of_aggregate_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_request_cookie_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_aggregate_stats_request_cookie_mask_set( (of_aggregate_stats_request_t *) o, tmp);
	return;
}

void do_of_aggregate_stats_request_cookie_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_aggregate_stats_request_cookie_mask_get( (of_aggregate_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_aggregate_stats_request_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_aggregate_stats_request_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_async_config_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_failed_error_msg_xid_set( (of_async_config_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_async_config_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_failed_error_msg_xid_get( (of_async_config_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_async_config_failed_error_msg_code_set( (of_async_config_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_async_config_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_async_config_failed_error_msg_code_get( (of_async_config_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_reply_xid_set( (of_async_get_reply_t *) o, tmp);
	return;
}

void do_of_async_get_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_reply_xid_get( (of_async_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_reply_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_async_config_prop_t *tmp;
	tmp = of_async_get_reply_properties_get( (of_async_get_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_async_get_reply_properties_set( (of_async_get_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_async_get_reply_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_async_config_prop_t *tmp;
	tmp = of_async_get_reply_properties_get( (of_async_get_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_async_get_reply_packet_in_mask_equal_master_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_reply_packet_in_mask_equal_master_set( (of_async_get_reply_t *) o, tmp);
	return;
}

void do_of_async_get_reply_packet_in_mask_equal_master_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_reply_packet_in_mask_equal_master_get( (of_async_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_reply_packet_in_mask_slave_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_reply_packet_in_mask_slave_set( (of_async_get_reply_t *) o, tmp);
	return;
}

void do_of_async_get_reply_packet_in_mask_slave_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_reply_packet_in_mask_slave_get( (of_async_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_reply_port_status_mask_equal_master_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_reply_port_status_mask_equal_master_set( (of_async_get_reply_t *) o, tmp);
	return;
}

void do_of_async_get_reply_port_status_mask_equal_master_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_reply_port_status_mask_equal_master_get( (of_async_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_reply_port_status_mask_slave_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_reply_port_status_mask_slave_set( (of_async_get_reply_t *) o, tmp);
	return;
}

void do_of_async_get_reply_port_status_mask_slave_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_reply_port_status_mask_slave_get( (of_async_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_reply_flow_removed_mask_equal_master_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_reply_flow_removed_mask_equal_master_set( (of_async_get_reply_t *) o, tmp);
	return;
}

void do_of_async_get_reply_flow_removed_mask_equal_master_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_reply_flow_removed_mask_equal_master_get( (of_async_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_reply_flow_removed_mask_slave_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_reply_flow_removed_mask_slave_set( (of_async_get_reply_t *) o, tmp);
	return;
}

void do_of_async_get_reply_flow_removed_mask_slave_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_reply_flow_removed_mask_slave_get( (of_async_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_request_xid_set( (of_async_get_request_t *) o, tmp);
	return;
}

void do_of_async_get_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_request_xid_get( (of_async_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_request_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_async_config_prop_t *tmp;
	tmp = of_async_get_request_properties_get( (of_async_get_request_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_async_get_request_properties_set( (of_async_get_request_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_async_get_request_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_async_config_prop_t *tmp;
	tmp = of_async_get_request_properties_get( (of_async_get_request_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_async_get_request_packet_in_mask_equal_master_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_request_packet_in_mask_equal_master_set( (of_async_get_request_t *) o, tmp);
	return;
}

void do_of_async_get_request_packet_in_mask_equal_master_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_request_packet_in_mask_equal_master_get( (of_async_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_request_packet_in_mask_slave_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_request_packet_in_mask_slave_set( (of_async_get_request_t *) o, tmp);
	return;
}

void do_of_async_get_request_packet_in_mask_slave_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_request_packet_in_mask_slave_get( (of_async_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_request_port_status_mask_equal_master_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_request_port_status_mask_equal_master_set( (of_async_get_request_t *) o, tmp);
	return;
}

void do_of_async_get_request_port_status_mask_equal_master_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_request_port_status_mask_equal_master_get( (of_async_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_request_port_status_mask_slave_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_request_port_status_mask_slave_set( (of_async_get_request_t *) o, tmp);
	return;
}

void do_of_async_get_request_port_status_mask_slave_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_request_port_status_mask_slave_get( (of_async_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_request_flow_removed_mask_equal_master_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_request_flow_removed_mask_equal_master_set( (of_async_get_request_t *) o, tmp);
	return;
}

void do_of_async_get_request_flow_removed_mask_equal_master_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_request_flow_removed_mask_equal_master_get( (of_async_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_get_request_flow_removed_mask_slave_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_get_request_flow_removed_mask_slave_set( (of_async_get_request_t *) o, tmp);
	return;
}

void do_of_async_get_request_flow_removed_mask_slave_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_get_request_flow_removed_mask_slave_get( (of_async_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_set_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_set_xid_set( (of_async_set_t *) o, tmp);
	return;
}

void do_of_async_set_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_set_xid_get( (of_async_set_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_set_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_async_config_prop_t *tmp;
	tmp = of_async_set_properties_get( (of_async_set_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_async_set_properties_set( (of_async_set_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_async_set_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_async_config_prop_t *tmp;
	tmp = of_async_set_properties_get( (of_async_set_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_async_set_packet_in_mask_equal_master_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_set_packet_in_mask_equal_master_set( (of_async_set_t *) o, tmp);
	return;
}

void do_of_async_set_packet_in_mask_equal_master_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_set_packet_in_mask_equal_master_get( (of_async_set_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_set_packet_in_mask_slave_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_set_packet_in_mask_slave_set( (of_async_set_t *) o, tmp);
	return;
}

void do_of_async_set_packet_in_mask_slave_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_set_packet_in_mask_slave_get( (of_async_set_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_set_port_status_mask_equal_master_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_set_port_status_mask_equal_master_set( (of_async_set_t *) o, tmp);
	return;
}

void do_of_async_set_port_status_mask_equal_master_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_set_port_status_mask_equal_master_get( (of_async_set_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_set_port_status_mask_slave_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_set_port_status_mask_slave_set( (of_async_set_t *) o, tmp);
	return;
}

void do_of_async_set_port_status_mask_slave_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_set_port_status_mask_slave_get( (of_async_set_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_set_flow_removed_mask_equal_master_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_set_flow_removed_mask_equal_master_set( (of_async_set_t *) o, tmp);
	return;
}

void do_of_async_set_flow_removed_mask_equal_master_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_set_flow_removed_mask_equal_master_get( (of_async_set_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_set_flow_removed_mask_slave_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_set_flow_removed_mask_slave_set( (of_async_set_t *) o, tmp);
	return;
}

void do_of_async_set_flow_removed_mask_slave_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_set_flow_removed_mask_slave_get( (of_async_set_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_action_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bad_action_error_msg_xid_set( (of_bad_action_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_action_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bad_action_error_msg_xid_get( (of_bad_action_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_action_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bad_action_error_msg_code_set( (of_bad_action_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_action_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bad_action_error_msg_code_get( (of_bad_action_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_instruction_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bad_instruction_error_msg_xid_set( (of_bad_instruction_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_instruction_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bad_instruction_error_msg_xid_get( (of_bad_instruction_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_instruction_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bad_instruction_error_msg_code_set( (of_bad_instruction_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_instruction_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bad_instruction_error_msg_code_get( (of_bad_instruction_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_match_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bad_match_error_msg_xid_set( (of_bad_match_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_match_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bad_match_error_msg_xid_get( (of_bad_match_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_match_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bad_match_error_msg_code_set( (of_bad_match_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_match_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bad_match_error_msg_code_get( (of_bad_match_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_property_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bad_property_error_msg_xid_set( (of_bad_property_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_property_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bad_property_error_msg_xid_get( (of_bad_property_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_property_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bad_property_error_msg_code_set( (of_bad_property_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_property_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bad_property_error_msg_code_get( (of_bad_property_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_request_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bad_request_error_msg_xid_set( (of_bad_request_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_request_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bad_request_error_msg_xid_get( (of_bad_request_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bad_request_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bad_request_error_msg_code_set( (of_bad_request_error_msg_t *) o, tmp);
	return;
}

void do_of_bad_request_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bad_request_error_msg_code_get( (of_bad_request_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_barrier_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_barrier_reply_xid_set( (of_barrier_reply_t *) o, tmp);
	return;
}

void do_of_barrier_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_barrier_reply_xid_get( (of_barrier_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_barrier_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_barrier_request_xid_set( (of_barrier_request_t *) o, tmp);
	return;
}

void do_of_barrier_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_barrier_request_xid_get( (of_barrier_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_arp_idle_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_arp_idle_xid_set( (of_bsn_arp_idle_t *) o, tmp);
	return;
}

void do_of_bsn_arp_idle_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_arp_idle_xid_get( (of_bsn_arp_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_arp_idle_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_arp_idle_experimenter_set( (of_bsn_arp_idle_t *) o, tmp);
	return;
}

void do_of_bsn_arp_idle_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_arp_idle_experimenter_get( (of_bsn_arp_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_arp_idle_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_arp_idle_subtype_set( (of_bsn_arp_idle_t *) o, tmp);
	return;
}

void do_of_bsn_arp_idle_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_arp_idle_subtype_get( (of_bsn_arp_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_arp_idle_vlan_vid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_arp_idle_vlan_vid_set( (of_bsn_arp_idle_t *) o, tmp);
	return;
}

void do_of_bsn_arp_idle_vlan_vid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_arp_idle_vlan_vid_get( (of_bsn_arp_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_arp_idle_ipv4_addr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_arp_idle_ipv4_addr_set( (of_bsn_arp_idle_t *) o, tmp);
	return;
}

void do_of_bsn_arp_idle_ipv4_addr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_arp_idle_ipv4_addr_get( (of_bsn_arp_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_clear_data_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_clear_data_reply_xid_set( (of_bsn_bw_clear_data_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_clear_data_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_clear_data_reply_xid_get( (of_bsn_bw_clear_data_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_clear_data_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_clear_data_reply_experimenter_set( (of_bsn_bw_clear_data_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_clear_data_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_clear_data_reply_experimenter_get( (of_bsn_bw_clear_data_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_clear_data_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_clear_data_reply_subtype_set( (of_bsn_bw_clear_data_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_clear_data_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_clear_data_reply_subtype_get( (of_bsn_bw_clear_data_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_clear_data_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_clear_data_reply_status_set( (of_bsn_bw_clear_data_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_clear_data_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_clear_data_reply_status_get( (of_bsn_bw_clear_data_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_clear_data_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_clear_data_request_xid_set( (of_bsn_bw_clear_data_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_clear_data_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_clear_data_request_xid_get( (of_bsn_bw_clear_data_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_clear_data_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_clear_data_request_experimenter_set( (of_bsn_bw_clear_data_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_clear_data_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_clear_data_request_experimenter_get( (of_bsn_bw_clear_data_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_clear_data_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_clear_data_request_subtype_set( (of_bsn_bw_clear_data_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_clear_data_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_clear_data_request_subtype_get( (of_bsn_bw_clear_data_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_get_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_get_reply_xid_set( (of_bsn_bw_enable_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_get_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_get_reply_xid_get( (of_bsn_bw_enable_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_get_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_get_reply_experimenter_set( (of_bsn_bw_enable_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_get_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_get_reply_experimenter_get( (of_bsn_bw_enable_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_get_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_get_reply_subtype_set( (of_bsn_bw_enable_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_get_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_get_reply_subtype_get( (of_bsn_bw_enable_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_get_reply_enabled_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_get_reply_enabled_set( (of_bsn_bw_enable_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_get_reply_enabled_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_get_reply_enabled_get( (of_bsn_bw_enable_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_get_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_get_request_xid_set( (of_bsn_bw_enable_get_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_get_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_get_request_xid_get( (of_bsn_bw_enable_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_get_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_get_request_experimenter_set( (of_bsn_bw_enable_get_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_get_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_get_request_experimenter_get( (of_bsn_bw_enable_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_get_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_get_request_subtype_set( (of_bsn_bw_enable_get_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_get_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_get_request_subtype_get( (of_bsn_bw_enable_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_set_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_set_reply_xid_set( (of_bsn_bw_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_set_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_set_reply_xid_get( (of_bsn_bw_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_set_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_set_reply_experimenter_set( (of_bsn_bw_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_set_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_set_reply_experimenter_get( (of_bsn_bw_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_set_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_set_reply_subtype_set( (of_bsn_bw_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_set_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_set_reply_subtype_get( (of_bsn_bw_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_set_reply_enable_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_set_reply_enable_set( (of_bsn_bw_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_set_reply_enable_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_set_reply_enable_get( (of_bsn_bw_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_set_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_set_reply_status_set( (of_bsn_bw_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_set_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_set_reply_status_get( (of_bsn_bw_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_set_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_set_request_xid_set( (of_bsn_bw_enable_set_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_set_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_set_request_xid_get( (of_bsn_bw_enable_set_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_set_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_set_request_experimenter_set( (of_bsn_bw_enable_set_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_set_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_set_request_experimenter_get( (of_bsn_bw_enable_set_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_set_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_set_request_subtype_set( (of_bsn_bw_enable_set_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_set_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_set_request_subtype_get( (of_bsn_bw_enable_set_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_bw_enable_set_request_enable_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_bw_enable_set_request_enable_set( (of_bsn_bw_enable_set_request_t *) o, tmp);
	return;
}

void do_of_bsn_bw_enable_set_request_enable_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_bw_enable_set_request_enable_get( (of_bsn_bw_enable_set_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_controller_connections_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_controller_connections_reply_xid_set( (of_bsn_controller_connections_reply_t *) o, tmp);
	return;
}

void do_of_bsn_controller_connections_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_controller_connections_reply_xid_get( (of_bsn_controller_connections_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_controller_connections_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_controller_connections_reply_experimenter_set( (of_bsn_controller_connections_reply_t *) o, tmp);
	return;
}

void do_of_bsn_controller_connections_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_controller_connections_reply_experimenter_get( (of_bsn_controller_connections_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_controller_connections_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_controller_connections_reply_subtype_set( (of_bsn_controller_connections_reply_t *) o, tmp);
	return;
}

void do_of_bsn_controller_connections_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_controller_connections_reply_subtype_get( (of_bsn_controller_connections_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_controller_connections_reply_connections_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_controller_connection_t *tmp;
	tmp = of_bsn_controller_connections_reply_connections_get( (of_bsn_controller_connections_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_controller_connections_reply_connections_set( (of_bsn_controller_connections_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_controller_connections_reply_connections_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_controller_connection_t *tmp;
	tmp = of_bsn_controller_connections_reply_connections_get( (of_bsn_controller_connections_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_controller_connections_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_controller_connections_request_xid_set( (of_bsn_controller_connections_request_t *) o, tmp);
	return;
}

void do_of_bsn_controller_connections_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_controller_connections_request_xid_get( (of_bsn_controller_connections_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_controller_connections_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_controller_connections_request_experimenter_set( (of_bsn_controller_connections_request_t *) o, tmp);
	return;
}

void do_of_bsn_controller_connections_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_controller_connections_request_experimenter_get( (of_bsn_controller_connections_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_controller_connections_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_controller_connections_request_subtype_set( (of_bsn_controller_connections_request_t *) o, tmp);
	return;
}

void do_of_bsn_controller_connections_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_controller_connections_request_subtype_get( (of_bsn_controller_connections_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_desc_stats_reply_xid_set( (of_bsn_debug_counter_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_desc_stats_reply_xid_get( (of_bsn_debug_counter_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_debug_counter_desc_stats_reply_flags_set( (of_bsn_debug_counter_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_debug_counter_desc_stats_reply_flags_get( (of_bsn_debug_counter_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_desc_stats_reply_experimenter_set( (of_bsn_debug_counter_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_desc_stats_reply_experimenter_get( (of_bsn_debug_counter_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_desc_stats_reply_subtype_set( (of_bsn_debug_counter_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_desc_stats_reply_subtype_get( (of_bsn_debug_counter_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_debug_counter_desc_stats_entry_t *tmp;
	tmp = of_bsn_debug_counter_desc_stats_reply_entries_get( (of_bsn_debug_counter_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_debug_counter_desc_stats_reply_entries_set( (of_bsn_debug_counter_desc_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_debug_counter_desc_stats_entry_t *tmp;
	tmp = of_bsn_debug_counter_desc_stats_reply_entries_get( (of_bsn_debug_counter_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_desc_stats_request_xid_set( (of_bsn_debug_counter_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_desc_stats_request_xid_get( (of_bsn_debug_counter_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_desc_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_debug_counter_desc_stats_request_flags_set( (of_bsn_debug_counter_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_debug_counter_desc_stats_request_flags_get( (of_bsn_debug_counter_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_desc_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_desc_stats_request_experimenter_set( (of_bsn_debug_counter_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_desc_stats_request_experimenter_get( (of_bsn_debug_counter_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_desc_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_desc_stats_request_subtype_set( (of_bsn_debug_counter_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_desc_stats_request_subtype_get( (of_bsn_debug_counter_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_reply_xid_set( (of_bsn_debug_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_stats_reply_xid_get( (of_bsn_debug_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_reply_flags_set( (of_bsn_debug_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_debug_counter_stats_reply_flags_get( (of_bsn_debug_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_reply_experimenter_set( (of_bsn_debug_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_stats_reply_experimenter_get( (of_bsn_debug_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_reply_subtype_set( (of_bsn_debug_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_stats_reply_subtype_get( (of_bsn_debug_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_debug_counter_stats_entry_t *tmp;
	tmp = of_bsn_debug_counter_stats_reply_entries_get( (of_bsn_debug_counter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_debug_counter_stats_reply_entries_set( (of_bsn_debug_counter_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_debug_counter_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_debug_counter_stats_entry_t *tmp;
	tmp = of_bsn_debug_counter_stats_reply_entries_get( (of_bsn_debug_counter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_debug_counter_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_request_xid_set( (of_bsn_debug_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_stats_request_xid_get( (of_bsn_debug_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_request_flags_set( (of_bsn_debug_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_debug_counter_stats_request_flags_get( (of_bsn_debug_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_request_experimenter_set( (of_bsn_debug_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_stats_request_experimenter_get( (of_bsn_debug_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_request_subtype_set( (of_bsn_debug_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_debug_counter_stats_request_subtype_get( (of_bsn_debug_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_reply_xid_set( (of_bsn_flow_checksum_bucket_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_checksum_bucket_stats_reply_xid_get( (of_bsn_flow_checksum_bucket_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_reply_flags_set( (of_bsn_flow_checksum_bucket_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_flow_checksum_bucket_stats_reply_flags_get( (of_bsn_flow_checksum_bucket_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_reply_experimenter_set( (of_bsn_flow_checksum_bucket_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_checksum_bucket_stats_reply_experimenter_get( (of_bsn_flow_checksum_bucket_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_reply_subtype_set( (of_bsn_flow_checksum_bucket_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_checksum_bucket_stats_reply_subtype_get( (of_bsn_flow_checksum_bucket_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_flow_checksum_bucket_stats_entry_t *tmp;
	tmp = of_bsn_flow_checksum_bucket_stats_reply_entries_get( (of_bsn_flow_checksum_bucket_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_flow_checksum_bucket_stats_reply_entries_set( (of_bsn_flow_checksum_bucket_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_flow_checksum_bucket_stats_entry_t *tmp;
	tmp = of_bsn_flow_checksum_bucket_stats_reply_entries_get( (of_bsn_flow_checksum_bucket_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_request_xid_set( (of_bsn_flow_checksum_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_checksum_bucket_stats_request_xid_get( (of_bsn_flow_checksum_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_request_flags_set( (of_bsn_flow_checksum_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_flow_checksum_bucket_stats_request_flags_get( (of_bsn_flow_checksum_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_request_experimenter_set( (of_bsn_flow_checksum_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_checksum_bucket_stats_request_experimenter_get( (of_bsn_flow_checksum_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_request_subtype_set( (of_bsn_flow_checksum_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_checksum_bucket_stats_request_subtype_get( (of_bsn_flow_checksum_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_request_table_id_set( (of_bsn_flow_checksum_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_request_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_flow_checksum_bucket_stats_request_table_id_get( (of_bsn_flow_checksum_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_xid_set( (of_bsn_flow_idle_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_xid_get( (of_bsn_flow_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_experimenter_set( (of_bsn_flow_idle_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_experimenter_get( (of_bsn_flow_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_subtype_set( (of_bsn_flow_idle_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_subtype_get( (of_bsn_flow_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_flow_idle_cookie_set( (of_bsn_flow_idle_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_flow_idle_cookie_get( (of_bsn_flow_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_flow_idle_priority_set( (of_bsn_flow_idle_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_flow_idle_priority_get( (of_bsn_flow_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_flow_idle_table_id_set( (of_bsn_flow_idle_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_flow_idle_table_id_get( (of_bsn_flow_idle_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_bsn_flow_idle_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_bsn_flow_idle_enable_get_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_get_reply_xid_set( (of_bsn_flow_idle_enable_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_get_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_get_reply_xid_get( (of_bsn_flow_idle_enable_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_get_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_get_reply_experimenter_set( (of_bsn_flow_idle_enable_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_get_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_get_reply_experimenter_get( (of_bsn_flow_idle_enable_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_get_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_get_reply_subtype_set( (of_bsn_flow_idle_enable_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_get_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_get_reply_subtype_get( (of_bsn_flow_idle_enable_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_get_reply_enabled_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_get_reply_enabled_set( (of_bsn_flow_idle_enable_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_get_reply_enabled_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_get_reply_enabled_get( (of_bsn_flow_idle_enable_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_get_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_get_request_xid_set( (of_bsn_flow_idle_enable_get_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_get_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_get_request_xid_get( (of_bsn_flow_idle_enable_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_get_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_get_request_experimenter_set( (of_bsn_flow_idle_enable_get_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_get_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_get_request_experimenter_get( (of_bsn_flow_idle_enable_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_get_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_get_request_subtype_set( (of_bsn_flow_idle_enable_get_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_get_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_get_request_subtype_get( (of_bsn_flow_idle_enable_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_set_reply_xid_set( (of_bsn_flow_idle_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_set_reply_xid_get( (of_bsn_flow_idle_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_set_reply_experimenter_set( (of_bsn_flow_idle_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_set_reply_experimenter_get( (of_bsn_flow_idle_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_set_reply_subtype_set( (of_bsn_flow_idle_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_set_reply_subtype_get( (of_bsn_flow_idle_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_enable_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_set_reply_enable_set( (of_bsn_flow_idle_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_enable_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_set_reply_enable_get( (of_bsn_flow_idle_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_set_reply_status_set( (of_bsn_flow_idle_enable_set_reply_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_set_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_set_reply_status_get( (of_bsn_flow_idle_enable_set_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_set_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_set_request_xid_set( (of_bsn_flow_idle_enable_set_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_set_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_set_request_xid_get( (of_bsn_flow_idle_enable_set_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_set_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_set_request_experimenter_set( (of_bsn_flow_idle_enable_set_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_set_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_set_request_experimenter_get( (of_bsn_flow_idle_enable_set_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_set_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_set_request_subtype_set( (of_bsn_flow_idle_enable_set_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_set_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_set_request_subtype_get( (of_bsn_flow_idle_enable_set_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_idle_enable_set_request_enable_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_flow_idle_enable_set_request_enable_set( (of_bsn_flow_idle_enable_set_request_t *) o, tmp);
	return;
}

void do_of_bsn_flow_idle_enable_set_request_enable_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_flow_idle_enable_set_request_enable_get( (of_bsn_flow_idle_enable_set_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_generic_stats_reply_xid_set( (of_bsn_generic_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_generic_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_generic_stats_reply_xid_get( (of_bsn_generic_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_generic_stats_reply_flags_set( (of_bsn_generic_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_generic_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_generic_stats_reply_flags_get( (of_bsn_generic_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_generic_stats_reply_experimenter_set( (of_bsn_generic_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_generic_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_generic_stats_reply_experimenter_get( (of_bsn_generic_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_generic_stats_reply_subtype_set( (of_bsn_generic_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_generic_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_generic_stats_reply_subtype_get( (of_bsn_generic_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_generic_stats_entry_t *tmp;
	tmp = of_bsn_generic_stats_reply_entries_get( (of_bsn_generic_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_generic_stats_reply_entries_set( (of_bsn_generic_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_generic_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_generic_stats_entry_t *tmp;
	tmp = of_bsn_generic_stats_reply_entries_get( (of_bsn_generic_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_generic_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_generic_stats_request_xid_set( (of_bsn_generic_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_generic_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_generic_stats_request_xid_get( (of_bsn_generic_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_generic_stats_request_flags_set( (of_bsn_generic_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_generic_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_generic_stats_request_flags_get( (of_bsn_generic_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_generic_stats_request_experimenter_set( (of_bsn_generic_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_generic_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_generic_stats_request_experimenter_get( (of_bsn_generic_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_generic_stats_request_subtype_set( (of_bsn_generic_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_generic_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_generic_stats_request_subtype_get( (of_bsn_generic_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_request_tlvs_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_generic_stats_request_tlvs_get( (of_bsn_generic_stats_request_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_generic_stats_request_tlvs_set( (of_bsn_generic_stats_request_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_generic_stats_request_tlvs_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_generic_stats_request_tlvs_get( (of_bsn_generic_stats_request_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_bucket_stats_reply_xid_set( (of_bsn_gentable_bucket_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_bucket_stats_reply_xid_get( (of_bsn_gentable_bucket_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_bucket_stats_reply_flags_set( (of_bsn_gentable_bucket_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_bucket_stats_reply_flags_get( (of_bsn_gentable_bucket_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_bucket_stats_reply_experimenter_set( (of_bsn_gentable_bucket_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_bucket_stats_reply_experimenter_get( (of_bsn_gentable_bucket_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_bucket_stats_reply_subtype_set( (of_bsn_gentable_bucket_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_bucket_stats_reply_subtype_get( (of_bsn_gentable_bucket_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_gentable_bucket_stats_entry_t *tmp;
	tmp = of_bsn_gentable_bucket_stats_reply_entries_get( (of_bsn_gentable_bucket_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_bucket_stats_reply_entries_set( (of_bsn_gentable_bucket_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_gentable_bucket_stats_entry_t *tmp;
	tmp = of_bsn_gentable_bucket_stats_reply_entries_get( (of_bsn_gentable_bucket_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_bucket_stats_request_xid_set( (of_bsn_gentable_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_bucket_stats_request_xid_get( (of_bsn_gentable_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_bucket_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_bucket_stats_request_flags_set( (of_bsn_gentable_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_bucket_stats_request_flags_get( (of_bsn_gentable_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_bucket_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_bucket_stats_request_experimenter_set( (of_bsn_gentable_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_bucket_stats_request_experimenter_get( (of_bsn_gentable_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_bucket_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_bucket_stats_request_subtype_set( (of_bsn_gentable_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_bucket_stats_request_subtype_get( (of_bsn_gentable_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_bucket_stats_request_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_bucket_stats_request_table_id_set( (of_bsn_gentable_bucket_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_bucket_stats_request_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_bucket_stats_request_table_id_get( (of_bsn_gentable_bucket_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_clear_reply_xid_set( (of_bsn_gentable_clear_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_clear_reply_xid_get( (of_bsn_gentable_clear_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_clear_reply_experimenter_set( (of_bsn_gentable_clear_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_clear_reply_experimenter_get( (of_bsn_gentable_clear_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_clear_reply_subtype_set( (of_bsn_gentable_clear_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_clear_reply_subtype_get( (of_bsn_gentable_clear_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_reply_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_clear_reply_table_id_set( (of_bsn_gentable_clear_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_reply_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_clear_reply_table_id_get( (of_bsn_gentable_clear_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_reply_deleted_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_clear_reply_deleted_count_set( (of_bsn_gentable_clear_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_reply_deleted_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_clear_reply_deleted_count_get( (of_bsn_gentable_clear_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_reply_error_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_clear_reply_error_count_set( (of_bsn_gentable_clear_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_reply_error_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_clear_reply_error_count_get( (of_bsn_gentable_clear_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_clear_request_xid_set( (of_bsn_gentable_clear_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_clear_request_xid_get( (of_bsn_gentable_clear_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_clear_request_experimenter_set( (of_bsn_gentable_clear_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_clear_request_experimenter_get( (of_bsn_gentable_clear_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_clear_request_subtype_set( (of_bsn_gentable_clear_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_clear_request_subtype_get( (of_bsn_gentable_clear_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_clear_request_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_clear_request_table_id_set( (of_bsn_gentable_clear_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_clear_request_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_clear_request_table_id_get( (of_bsn_gentable_clear_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_reply_xid_set( (of_bsn_gentable_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_desc_stats_reply_xid_get( (of_bsn_gentable_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_reply_flags_set( (of_bsn_gentable_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_desc_stats_reply_flags_get( (of_bsn_gentable_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_reply_experimenter_set( (of_bsn_gentable_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_desc_stats_reply_experimenter_get( (of_bsn_gentable_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_reply_subtype_set( (of_bsn_gentable_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_desc_stats_reply_subtype_get( (of_bsn_gentable_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_gentable_desc_stats_entry_t *tmp;
	tmp = of_bsn_gentable_desc_stats_reply_entries_get( (of_bsn_gentable_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_desc_stats_reply_entries_set( (of_bsn_gentable_desc_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_gentable_desc_stats_entry_t *tmp;
	tmp = of_bsn_gentable_desc_stats_reply_entries_get( (of_bsn_gentable_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_request_xid_set( (of_bsn_gentable_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_desc_stats_request_xid_get( (of_bsn_gentable_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_request_flags_set( (of_bsn_gentable_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_desc_stats_request_flags_get( (of_bsn_gentable_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_request_experimenter_set( (of_bsn_gentable_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_desc_stats_request_experimenter_get( (of_bsn_gentable_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_request_subtype_set( (of_bsn_gentable_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_desc_stats_request_subtype_get( (of_bsn_gentable_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_add_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_add_xid_set( (of_bsn_gentable_entry_add_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_add_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_add_xid_get( (of_bsn_gentable_entry_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_add_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_add_experimenter_set( (of_bsn_gentable_entry_add_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_add_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_add_experimenter_get( (of_bsn_gentable_entry_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_add_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_add_subtype_set( (of_bsn_gentable_entry_add_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_add_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_add_subtype_get( (of_bsn_gentable_entry_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_add_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_entry_add_table_id_set( (of_bsn_gentable_entry_add_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_add_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_entry_add_table_id_get( (of_bsn_gentable_entry_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_add_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_add_key_get( (of_bsn_gentable_entry_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_entry_add_key_set( (of_bsn_gentable_entry_add_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_add_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_add_key_get( (of_bsn_gentable_entry_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_add_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_add_value_get( (of_bsn_gentable_entry_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_entry_add_value_set( (of_bsn_gentable_entry_add_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_add_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_add_value_get( (of_bsn_gentable_entry_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_delete_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_delete_xid_set( (of_bsn_gentable_entry_delete_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_delete_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_delete_xid_get( (of_bsn_gentable_entry_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_delete_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_delete_experimenter_set( (of_bsn_gentable_entry_delete_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_delete_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_delete_experimenter_get( (of_bsn_gentable_entry_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_delete_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_delete_subtype_set( (of_bsn_gentable_entry_delete_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_delete_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_delete_subtype_get( (of_bsn_gentable_entry_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_delete_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_entry_delete_table_id_set( (of_bsn_gentable_entry_delete_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_delete_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_entry_delete_table_id_get( (of_bsn_gentable_entry_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_delete_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_delete_key_get( (of_bsn_gentable_entry_delete_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_entry_delete_key_set( (of_bsn_gentable_entry_delete_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_delete_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_delete_key_get( (of_bsn_gentable_entry_delete_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_desc_stats_reply_xid_set( (of_bsn_gentable_entry_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_desc_stats_reply_xid_get( (of_bsn_gentable_entry_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_entry_desc_stats_reply_flags_set( (of_bsn_gentable_entry_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_entry_desc_stats_reply_flags_get( (of_bsn_gentable_entry_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_desc_stats_reply_experimenter_set( (of_bsn_gentable_entry_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_desc_stats_reply_experimenter_get( (of_bsn_gentable_entry_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_desc_stats_reply_subtype_set( (of_bsn_gentable_entry_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_desc_stats_reply_subtype_get( (of_bsn_gentable_entry_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_gentable_entry_desc_stats_entry_t *tmp;
	tmp = of_bsn_gentable_entry_desc_stats_reply_entries_get( (of_bsn_gentable_entry_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_entry_desc_stats_reply_entries_set( (of_bsn_gentable_entry_desc_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_gentable_entry_desc_stats_entry_t *tmp;
	tmp = of_bsn_gentable_entry_desc_stats_reply_entries_get( (of_bsn_gentable_entry_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_desc_stats_request_xid_set( (of_bsn_gentable_entry_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_desc_stats_request_xid_get( (of_bsn_gentable_entry_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_entry_desc_stats_request_flags_set( (of_bsn_gentable_entry_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_entry_desc_stats_request_flags_get( (of_bsn_gentable_entry_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_desc_stats_request_experimenter_set( (of_bsn_gentable_entry_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_desc_stats_request_experimenter_get( (of_bsn_gentable_entry_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_desc_stats_request_subtype_set( (of_bsn_gentable_entry_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_desc_stats_request_subtype_get( (of_bsn_gentable_entry_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_entry_desc_stats_request_table_id_set( (of_bsn_gentable_entry_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_request_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_entry_desc_stats_request_table_id_get( (of_bsn_gentable_entry_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_stats_reply_xid_set( (of_bsn_gentable_entry_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_stats_reply_xid_get( (of_bsn_gentable_entry_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_entry_stats_reply_flags_set( (of_bsn_gentable_entry_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_entry_stats_reply_flags_get( (of_bsn_gentable_entry_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_stats_reply_experimenter_set( (of_bsn_gentable_entry_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_stats_reply_experimenter_get( (of_bsn_gentable_entry_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_stats_reply_subtype_set( (of_bsn_gentable_entry_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_stats_reply_subtype_get( (of_bsn_gentable_entry_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_gentable_entry_stats_entry_t *tmp;
	tmp = of_bsn_gentable_entry_stats_reply_entries_get( (of_bsn_gentable_entry_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_entry_stats_reply_entries_set( (of_bsn_gentable_entry_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_gentable_entry_stats_entry_t *tmp;
	tmp = of_bsn_gentable_entry_stats_reply_entries_get( (of_bsn_gentable_entry_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_stats_request_xid_set( (of_bsn_gentable_entry_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_stats_request_xid_get( (of_bsn_gentable_entry_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_entry_stats_request_flags_set( (of_bsn_gentable_entry_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_entry_stats_request_flags_get( (of_bsn_gentable_entry_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_stats_request_experimenter_set( (of_bsn_gentable_entry_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_stats_request_experimenter_get( (of_bsn_gentable_entry_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_entry_stats_request_subtype_set( (of_bsn_gentable_entry_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_entry_stats_request_subtype_get( (of_bsn_gentable_entry_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_stats_request_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_entry_stats_request_table_id_set( (of_bsn_gentable_entry_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_request_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_entry_stats_request_table_id_get( (of_bsn_gentable_entry_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_set_buckets_size_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_set_buckets_size_xid_set( (of_bsn_gentable_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_set_buckets_size_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_set_buckets_size_xid_get( (of_bsn_gentable_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_set_buckets_size_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_set_buckets_size_experimenter_set( (of_bsn_gentable_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_set_buckets_size_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_set_buckets_size_experimenter_get( (of_bsn_gentable_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_set_buckets_size_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_set_buckets_size_subtype_set( (of_bsn_gentable_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_set_buckets_size_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_set_buckets_size_subtype_get( (of_bsn_gentable_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_set_buckets_size_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_set_buckets_size_table_id_set( (of_bsn_gentable_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_set_buckets_size_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_set_buckets_size_table_id_get( (of_bsn_gentable_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_set_buckets_size_buckets_size_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_set_buckets_size_buckets_size_set( (of_bsn_gentable_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_set_buckets_size_buckets_size_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_set_buckets_size_buckets_size_get( (of_bsn_gentable_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_stats_reply_xid_set( (of_bsn_gentable_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_stats_reply_xid_get( (of_bsn_gentable_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_stats_reply_flags_set( (of_bsn_gentable_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_stats_reply_flags_get( (of_bsn_gentable_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_stats_reply_experimenter_set( (of_bsn_gentable_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_stats_reply_experimenter_get( (of_bsn_gentable_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_stats_reply_subtype_set( (of_bsn_gentable_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_stats_reply_subtype_get( (of_bsn_gentable_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_gentable_stats_entry_t *tmp;
	tmp = of_bsn_gentable_stats_reply_entries_get( (of_bsn_gentable_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_stats_reply_entries_set( (of_bsn_gentable_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_gentable_stats_entry_t *tmp;
	tmp = of_bsn_gentable_stats_reply_entries_get( (of_bsn_gentable_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_stats_request_xid_set( (of_bsn_gentable_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_stats_request_xid_get( (of_bsn_gentable_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_stats_request_flags_set( (of_bsn_gentable_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_stats_request_flags_get( (of_bsn_gentable_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_stats_request_experimenter_set( (of_bsn_gentable_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_stats_request_experimenter_get( (of_bsn_gentable_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_stats_request_subtype_set( (of_bsn_gentable_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_stats_request_subtype_get( (of_bsn_gentable_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_interfaces_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_interfaces_reply_xid_set( (of_bsn_get_interfaces_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_interfaces_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_interfaces_reply_xid_get( (of_bsn_get_interfaces_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_interfaces_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_interfaces_reply_experimenter_set( (of_bsn_get_interfaces_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_interfaces_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_interfaces_reply_experimenter_get( (of_bsn_get_interfaces_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_interfaces_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_interfaces_reply_subtype_set( (of_bsn_get_interfaces_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_interfaces_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_interfaces_reply_subtype_get( (of_bsn_get_interfaces_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_interfaces_reply_interfaces_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_interface_t *tmp;
	tmp = of_bsn_get_interfaces_reply_interfaces_get( (of_bsn_get_interfaces_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_get_interfaces_reply_interfaces_set( (of_bsn_get_interfaces_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_get_interfaces_reply_interfaces_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_interface_t *tmp;
	tmp = of_bsn_get_interfaces_reply_interfaces_get( (of_bsn_get_interfaces_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_get_interfaces_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_interfaces_request_xid_set( (of_bsn_get_interfaces_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_interfaces_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_interfaces_request_xid_get( (of_bsn_get_interfaces_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_interfaces_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_interfaces_request_experimenter_set( (of_bsn_get_interfaces_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_interfaces_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_interfaces_request_experimenter_get( (of_bsn_get_interfaces_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_interfaces_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_interfaces_request_subtype_set( (of_bsn_get_interfaces_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_interfaces_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_interfaces_request_subtype_get( (of_bsn_get_interfaces_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_ip_mask_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_ip_mask_reply_xid_set( (of_bsn_get_ip_mask_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_ip_mask_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_ip_mask_reply_xid_get( (of_bsn_get_ip_mask_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_ip_mask_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_ip_mask_reply_experimenter_set( (of_bsn_get_ip_mask_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_ip_mask_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_ip_mask_reply_experimenter_get( (of_bsn_get_ip_mask_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_ip_mask_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_ip_mask_reply_subtype_set( (of_bsn_get_ip_mask_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_ip_mask_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_ip_mask_reply_subtype_get( (of_bsn_get_ip_mask_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_ip_mask_reply_index_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_get_ip_mask_reply_index_set( (of_bsn_get_ip_mask_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_ip_mask_reply_index_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_get_ip_mask_reply_index_get( (of_bsn_get_ip_mask_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_ip_mask_reply_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_ip_mask_reply_mask_set( (of_bsn_get_ip_mask_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_ip_mask_reply_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_ip_mask_reply_mask_get( (of_bsn_get_ip_mask_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_ip_mask_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_ip_mask_request_xid_set( (of_bsn_get_ip_mask_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_ip_mask_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_ip_mask_request_xid_get( (of_bsn_get_ip_mask_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_ip_mask_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_ip_mask_request_experimenter_set( (of_bsn_get_ip_mask_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_ip_mask_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_ip_mask_request_experimenter_get( (of_bsn_get_ip_mask_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_ip_mask_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_ip_mask_request_subtype_set( (of_bsn_get_ip_mask_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_ip_mask_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_ip_mask_request_subtype_get( (of_bsn_get_ip_mask_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_ip_mask_request_index_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_get_ip_mask_request_index_set( (of_bsn_get_ip_mask_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_ip_mask_request_index_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_get_ip_mask_request_index_get( (of_bsn_get_ip_mask_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_l2_table_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_l2_table_reply_xid_set( (of_bsn_get_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_l2_table_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_l2_table_reply_xid_get( (of_bsn_get_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_l2_table_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_l2_table_reply_experimenter_set( (of_bsn_get_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_l2_table_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_l2_table_reply_experimenter_get( (of_bsn_get_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_l2_table_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_l2_table_reply_subtype_set( (of_bsn_get_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_l2_table_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_l2_table_reply_subtype_get( (of_bsn_get_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_l2_table_reply_l2_table_enable_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_get_l2_table_reply_l2_table_enable_set( (of_bsn_get_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_l2_table_reply_l2_table_enable_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_get_l2_table_reply_l2_table_enable_get( (of_bsn_get_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_l2_table_reply_l2_table_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_get_l2_table_reply_l2_table_priority_set( (of_bsn_get_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_l2_table_reply_l2_table_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_get_l2_table_reply_l2_table_priority_get( (of_bsn_get_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_l2_table_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_l2_table_request_xid_set( (of_bsn_get_l2_table_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_l2_table_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_l2_table_request_xid_get( (of_bsn_get_l2_table_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_l2_table_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_l2_table_request_experimenter_set( (of_bsn_get_l2_table_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_l2_table_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_l2_table_request_experimenter_get( (of_bsn_get_l2_table_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_l2_table_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_l2_table_request_subtype_set( (of_bsn_get_l2_table_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_l2_table_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_l2_table_request_subtype_get( (of_bsn_get_l2_table_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_mirroring_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_mirroring_reply_xid_set( (of_bsn_get_mirroring_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_mirroring_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_mirroring_reply_xid_get( (of_bsn_get_mirroring_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_mirroring_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_mirroring_reply_experimenter_set( (of_bsn_get_mirroring_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_mirroring_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_mirroring_reply_experimenter_get( (of_bsn_get_mirroring_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_mirroring_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_mirroring_reply_subtype_set( (of_bsn_get_mirroring_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_mirroring_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_mirroring_reply_subtype_get( (of_bsn_get_mirroring_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_mirroring_reply_report_mirror_ports_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_get_mirroring_reply_report_mirror_ports_set( (of_bsn_get_mirroring_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_mirroring_reply_report_mirror_ports_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_get_mirroring_reply_report_mirror_ports_get( (of_bsn_get_mirroring_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_mirroring_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_mirroring_request_xid_set( (of_bsn_get_mirroring_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_mirroring_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_mirroring_request_xid_get( (of_bsn_get_mirroring_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_mirroring_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_mirroring_request_experimenter_set( (of_bsn_get_mirroring_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_mirroring_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_mirroring_request_experimenter_get( (of_bsn_get_mirroring_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_mirroring_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_mirroring_request_subtype_set( (of_bsn_get_mirroring_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_mirroring_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_mirroring_request_subtype_get( (of_bsn_get_mirroring_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_mirroring_request_report_mirror_ports_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_get_mirroring_request_report_mirror_ports_set( (of_bsn_get_mirroring_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_mirroring_request_report_mirror_ports_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_get_mirroring_request_report_mirror_ports_get( (of_bsn_get_mirroring_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_switch_pipeline_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_switch_pipeline_reply_xid_set( (of_bsn_get_switch_pipeline_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_switch_pipeline_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_switch_pipeline_reply_xid_get( (of_bsn_get_switch_pipeline_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_switch_pipeline_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_switch_pipeline_reply_experimenter_set( (of_bsn_get_switch_pipeline_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_switch_pipeline_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_switch_pipeline_reply_experimenter_get( (of_bsn_get_switch_pipeline_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_switch_pipeline_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_switch_pipeline_reply_subtype_set( (of_bsn_get_switch_pipeline_reply_t *) o, tmp);
	return;
}

void do_of_bsn_get_switch_pipeline_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_switch_pipeline_reply_subtype_get( (of_bsn_get_switch_pipeline_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_switch_pipeline_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_switch_pipeline_request_xid_set( (of_bsn_get_switch_pipeline_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_switch_pipeline_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_switch_pipeline_request_xid_get( (of_bsn_get_switch_pipeline_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_switch_pipeline_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_switch_pipeline_request_experimenter_set( (of_bsn_get_switch_pipeline_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_switch_pipeline_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_switch_pipeline_request_experimenter_get( (of_bsn_get_switch_pipeline_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_get_switch_pipeline_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_get_switch_pipeline_request_subtype_set( (of_bsn_get_switch_pipeline_request_t *) o, tmp);
	return;
}

void do_of_bsn_get_switch_pipeline_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_get_switch_pipeline_request_subtype_get( (of_bsn_get_switch_pipeline_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_hybrid_get_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_hybrid_get_reply_xid_set( (of_bsn_hybrid_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_hybrid_get_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_hybrid_get_reply_xid_get( (of_bsn_hybrid_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_hybrid_get_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_hybrid_get_reply_experimenter_set( (of_bsn_hybrid_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_hybrid_get_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_hybrid_get_reply_experimenter_get( (of_bsn_hybrid_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_hybrid_get_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_hybrid_get_reply_subtype_set( (of_bsn_hybrid_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_hybrid_get_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_hybrid_get_reply_subtype_get( (of_bsn_hybrid_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_hybrid_get_reply_hybrid_enable_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_hybrid_get_reply_hybrid_enable_set( (of_bsn_hybrid_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_hybrid_get_reply_hybrid_enable_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_hybrid_get_reply_hybrid_enable_get( (of_bsn_hybrid_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_hybrid_get_reply_hybrid_version_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_hybrid_get_reply_hybrid_version_set( (of_bsn_hybrid_get_reply_t *) o, tmp);
	return;
}

void do_of_bsn_hybrid_get_reply_hybrid_version_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_hybrid_get_reply_hybrid_version_get( (of_bsn_hybrid_get_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_hybrid_get_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_hybrid_get_request_xid_set( (of_bsn_hybrid_get_request_t *) o, tmp);
	return;
}

void do_of_bsn_hybrid_get_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_hybrid_get_request_xid_get( (of_bsn_hybrid_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_hybrid_get_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_hybrid_get_request_experimenter_set( (of_bsn_hybrid_get_request_t *) o, tmp);
	return;
}

void do_of_bsn_hybrid_get_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_hybrid_get_request_experimenter_get( (of_bsn_hybrid_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_hybrid_get_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_hybrid_get_request_subtype_set( (of_bsn_hybrid_get_request_t *) o, tmp);
	return;
}

void do_of_bsn_hybrid_get_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_hybrid_get_request_subtype_get( (of_bsn_hybrid_get_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_image_desc_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_image_desc_stats_reply_xid_set( (of_bsn_image_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_image_desc_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_image_desc_stats_reply_xid_get( (of_bsn_image_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_image_desc_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_image_desc_stats_reply_flags_set( (of_bsn_image_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_image_desc_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_image_desc_stats_reply_flags_get( (of_bsn_image_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_image_desc_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_image_desc_stats_reply_experimenter_set( (of_bsn_image_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_image_desc_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_image_desc_stats_reply_experimenter_get( (of_bsn_image_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_image_desc_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_image_desc_stats_reply_subtype_set( (of_bsn_image_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_image_desc_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_image_desc_stats_reply_subtype_get( (of_bsn_image_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_image_desc_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_image_desc_stats_request_xid_set( (of_bsn_image_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_image_desc_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_image_desc_stats_request_xid_get( (of_bsn_image_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_image_desc_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_image_desc_stats_request_flags_set( (of_bsn_image_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_image_desc_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_image_desc_stats_request_flags_get( (of_bsn_image_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_image_desc_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_image_desc_stats_request_experimenter_set( (of_bsn_image_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_image_desc_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_image_desc_stats_request_experimenter_get( (of_bsn_image_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_image_desc_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_image_desc_stats_request_subtype_set( (of_bsn_image_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_image_desc_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_image_desc_stats_request_subtype_get( (of_bsn_image_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_xid_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lacp_convergence_notif_xid_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_experimenter_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lacp_convergence_notif_experimenter_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_subtype_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lacp_convergence_notif_subtype_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_convergence_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_convergence_status_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_convergence_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_lacp_convergence_notif_convergence_status_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_port_no_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_lacp_convergence_notif_port_no_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_actor_sys_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_actor_sys_priority_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_actor_sys_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_convergence_notif_actor_sys_priority_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_actor_port_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_actor_port_priority_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_actor_port_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_convergence_notif_actor_port_priority_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_actor_port_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_actor_port_num_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_actor_port_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_convergence_notif_actor_port_num_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_actor_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_actor_key_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_actor_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_convergence_notif_actor_key_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_partner_sys_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_partner_sys_priority_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_partner_sys_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_convergence_notif_partner_sys_priority_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_partner_port_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_partner_port_priority_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_partner_port_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_convergence_notif_partner_port_priority_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_partner_port_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_partner_port_num_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_partner_port_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_convergence_notif_partner_port_num_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_convergence_notif_partner_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_convergence_notif_partner_key_set( (of_bsn_lacp_convergence_notif_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_convergence_notif_partner_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_convergence_notif_partner_key_get( (of_bsn_lacp_convergence_notif_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lacp_stats_reply_xid_set( (of_bsn_lacp_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lacp_stats_reply_xid_get( (of_bsn_lacp_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_reply_flags_set( (of_bsn_lacp_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_reply_flags_get( (of_bsn_lacp_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lacp_stats_reply_experimenter_set( (of_bsn_lacp_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lacp_stats_reply_experimenter_get( (of_bsn_lacp_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lacp_stats_reply_subtype_set( (of_bsn_lacp_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lacp_stats_reply_subtype_get( (of_bsn_lacp_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_lacp_stats_entry_t *tmp;
	tmp = of_bsn_lacp_stats_reply_entries_get( (of_bsn_lacp_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_lacp_stats_reply_entries_set( (of_bsn_lacp_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_lacp_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_lacp_stats_entry_t *tmp;
	tmp = of_bsn_lacp_stats_reply_entries_get( (of_bsn_lacp_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_lacp_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lacp_stats_request_xid_set( (of_bsn_lacp_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lacp_stats_request_xid_get( (of_bsn_lacp_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_request_flags_set( (of_bsn_lacp_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_request_flags_get( (of_bsn_lacp_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lacp_stats_request_experimenter_set( (of_bsn_lacp_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lacp_stats_request_experimenter_get( (of_bsn_lacp_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lacp_stats_request_subtype_set( (of_bsn_lacp_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lacp_stats_request_subtype_get( (of_bsn_lacp_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_log_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_log_xid_set( (of_bsn_log_t *) o, tmp);
	return;
}

void do_of_bsn_log_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_log_xid_get( (of_bsn_log_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_log_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_log_experimenter_set( (of_bsn_log_t *) o, tmp);
	return;
}

void do_of_bsn_log_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_log_experimenter_get( (of_bsn_log_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_log_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_log_subtype_set( (of_bsn_log_t *) o, tmp);
	return;
}

void do_of_bsn_log_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_log_subtype_get( (of_bsn_log_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_log_loglevel_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_log_loglevel_set( (of_bsn_log_t *) o, tmp);
	return;
}

void do_of_bsn_log_loglevel_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_log_loglevel_get( (of_bsn_log_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_command_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_command_reply_xid_set( (of_bsn_lua_command_reply_t *) o, tmp);
	return;
}

void do_of_bsn_lua_command_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_command_reply_xid_get( (of_bsn_lua_command_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_command_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_command_reply_experimenter_set( (of_bsn_lua_command_reply_t *) o, tmp);
	return;
}

void do_of_bsn_lua_command_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_command_reply_experimenter_get( (of_bsn_lua_command_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_command_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_command_reply_subtype_set( (of_bsn_lua_command_reply_t *) o, tmp);
	return;
}

void do_of_bsn_lua_command_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_command_reply_subtype_get( (of_bsn_lua_command_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_command_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_command_request_xid_set( (of_bsn_lua_command_request_t *) o, tmp);
	return;
}

void do_of_bsn_lua_command_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_command_request_xid_get( (of_bsn_lua_command_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_command_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_command_request_experimenter_set( (of_bsn_lua_command_request_t *) o, tmp);
	return;
}

void do_of_bsn_lua_command_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_command_request_experimenter_get( (of_bsn_lua_command_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_command_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_command_request_subtype_set( (of_bsn_lua_command_request_t *) o, tmp);
	return;
}

void do_of_bsn_lua_command_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_command_request_subtype_get( (of_bsn_lua_command_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_notification_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_notification_xid_set( (of_bsn_lua_notification_t *) o, tmp);
	return;
}

void do_of_bsn_lua_notification_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_notification_xid_get( (of_bsn_lua_notification_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_notification_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_notification_experimenter_set( (of_bsn_lua_notification_t *) o, tmp);
	return;
}

void do_of_bsn_lua_notification_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_notification_experimenter_get( (of_bsn_lua_notification_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_notification_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_notification_subtype_set( (of_bsn_lua_notification_t *) o, tmp);
	return;
}

void do_of_bsn_lua_notification_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_notification_subtype_get( (of_bsn_lua_notification_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_upload_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_upload_xid_set( (of_bsn_lua_upload_t *) o, tmp);
	return;
}

void do_of_bsn_lua_upload_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_upload_xid_get( (of_bsn_lua_upload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_upload_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_upload_experimenter_set( (of_bsn_lua_upload_t *) o, tmp);
	return;
}

void do_of_bsn_lua_upload_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_upload_experimenter_get( (of_bsn_lua_upload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_upload_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_lua_upload_subtype_set( (of_bsn_lua_upload_t *) o, tmp);
	return;
}

void do_of_bsn_lua_upload_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_lua_upload_subtype_get( (of_bsn_lua_upload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lua_upload_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lua_upload_flags_set( (of_bsn_lua_upload_t *) o, tmp);
	return;
}

void do_of_bsn_lua_upload_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lua_upload_flags_get( (of_bsn_lua_upload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_reply_xid_set( (of_bsn_pdu_rx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_reply_xid_get( (of_bsn_pdu_rx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_reply_experimenter_set( (of_bsn_pdu_rx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_reply_experimenter_get( (of_bsn_pdu_rx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_reply_subtype_set( (of_bsn_pdu_rx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_reply_subtype_get( (of_bsn_pdu_rx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_reply_status_set( (of_bsn_pdu_rx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_reply_status_get( (of_bsn_pdu_rx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_reply_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_pdu_rx_reply_port_no_set( (of_bsn_pdu_rx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_reply_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_pdu_rx_reply_port_no_get( (of_bsn_pdu_rx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_reply_slot_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_pdu_rx_reply_slot_num_set( (of_bsn_pdu_rx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_reply_slot_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_pdu_rx_reply_slot_num_get( (of_bsn_pdu_rx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_request_xid_set( (of_bsn_pdu_rx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_request_xid_get( (of_bsn_pdu_rx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_request_experimenter_set( (of_bsn_pdu_rx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_request_experimenter_get( (of_bsn_pdu_rx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_request_subtype_set( (of_bsn_pdu_rx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_request_subtype_get( (of_bsn_pdu_rx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_request_timeout_ms_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_request_timeout_ms_set( (of_bsn_pdu_rx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_request_timeout_ms_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_request_timeout_ms_get( (of_bsn_pdu_rx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_request_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_pdu_rx_request_port_no_set( (of_bsn_pdu_rx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_request_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_pdu_rx_request_port_no_get( (of_bsn_pdu_rx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_request_slot_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_pdu_rx_request_slot_num_set( (of_bsn_pdu_rx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_request_slot_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_pdu_rx_request_slot_num_get( (of_bsn_pdu_rx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_timeout_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_timeout_xid_set( (of_bsn_pdu_rx_timeout_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_timeout_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_timeout_xid_get( (of_bsn_pdu_rx_timeout_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_timeout_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_timeout_experimenter_set( (of_bsn_pdu_rx_timeout_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_timeout_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_timeout_experimenter_get( (of_bsn_pdu_rx_timeout_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_timeout_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_rx_timeout_subtype_set( (of_bsn_pdu_rx_timeout_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_timeout_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_rx_timeout_subtype_get( (of_bsn_pdu_rx_timeout_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_timeout_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_pdu_rx_timeout_port_no_set( (of_bsn_pdu_rx_timeout_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_timeout_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_pdu_rx_timeout_port_no_get( (of_bsn_pdu_rx_timeout_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_rx_timeout_slot_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_pdu_rx_timeout_slot_num_set( (of_bsn_pdu_rx_timeout_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_rx_timeout_slot_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_pdu_rx_timeout_slot_num_get( (of_bsn_pdu_rx_timeout_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_tx_reply_xid_set( (of_bsn_pdu_tx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_tx_reply_xid_get( (of_bsn_pdu_tx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_tx_reply_experimenter_set( (of_bsn_pdu_tx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_tx_reply_experimenter_get( (of_bsn_pdu_tx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_tx_reply_subtype_set( (of_bsn_pdu_tx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_tx_reply_subtype_get( (of_bsn_pdu_tx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_tx_reply_status_set( (of_bsn_pdu_tx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_tx_reply_status_get( (of_bsn_pdu_tx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_reply_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_pdu_tx_reply_port_no_set( (of_bsn_pdu_tx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_reply_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_pdu_tx_reply_port_no_get( (of_bsn_pdu_tx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_reply_slot_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_pdu_tx_reply_slot_num_set( (of_bsn_pdu_tx_reply_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_reply_slot_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_pdu_tx_reply_slot_num_get( (of_bsn_pdu_tx_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_tx_request_xid_set( (of_bsn_pdu_tx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_tx_request_xid_get( (of_bsn_pdu_tx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_tx_request_experimenter_set( (of_bsn_pdu_tx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_tx_request_experimenter_get( (of_bsn_pdu_tx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_tx_request_subtype_set( (of_bsn_pdu_tx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_tx_request_subtype_get( (of_bsn_pdu_tx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_request_tx_interval_ms_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_pdu_tx_request_tx_interval_ms_set( (of_bsn_pdu_tx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_request_tx_interval_ms_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_pdu_tx_request_tx_interval_ms_get( (of_bsn_pdu_tx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_request_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_pdu_tx_request_port_no_set( (of_bsn_pdu_tx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_request_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_pdu_tx_request_port_no_get( (of_bsn_pdu_tx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_pdu_tx_request_slot_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_pdu_tx_request_slot_num_set( (of_bsn_pdu_tx_request_t *) o, tmp);
	return;
}

void do_of_bsn_pdu_tx_request_slot_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_pdu_tx_request_slot_num_get( (of_bsn_pdu_tx_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_reply_xid_set( (of_bsn_port_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_port_counter_stats_reply_xid_get( (of_bsn_port_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_reply_flags_set( (of_bsn_port_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_port_counter_stats_reply_flags_get( (of_bsn_port_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_reply_experimenter_set( (of_bsn_port_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_port_counter_stats_reply_experimenter_get( (of_bsn_port_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_reply_subtype_set( (of_bsn_port_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_port_counter_stats_reply_subtype_get( (of_bsn_port_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_port_counter_stats_entry_t *tmp;
	tmp = of_bsn_port_counter_stats_reply_entries_get( (of_bsn_port_counter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_port_counter_stats_reply_entries_set( (of_bsn_port_counter_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_port_counter_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_port_counter_stats_entry_t *tmp;
	tmp = of_bsn_port_counter_stats_reply_entries_get( (of_bsn_port_counter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_port_counter_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_request_xid_set( (of_bsn_port_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_port_counter_stats_request_xid_get( (of_bsn_port_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_request_flags_set( (of_bsn_port_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_port_counter_stats_request_flags_get( (of_bsn_port_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_request_experimenter_set( (of_bsn_port_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_port_counter_stats_request_experimenter_get( (of_bsn_port_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_request_subtype_set( (of_bsn_port_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_port_counter_stats_request_subtype_get( (of_bsn_port_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_request_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_request_port_no_set( (of_bsn_port_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_request_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_port_counter_stats_request_port_no_get( (of_bsn_port_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_role_status_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_role_status_xid_set( (of_bsn_role_status_t *) o, tmp);
	return;
}

void do_of_bsn_role_status_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_role_status_xid_get( (of_bsn_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_role_status_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_role_status_experimenter_set( (of_bsn_role_status_t *) o, tmp);
	return;
}

void do_of_bsn_role_status_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_role_status_experimenter_get( (of_bsn_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_role_status_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_role_status_subtype_set( (of_bsn_role_status_t *) o, tmp);
	return;
}

void do_of_bsn_role_status_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_role_status_subtype_get( (of_bsn_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_role_status_role_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_role_status_role_set( (of_bsn_role_status_t *) o, tmp);
	return;
}

void do_of_bsn_role_status_role_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_role_status_role_get( (of_bsn_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_role_status_reason_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_role_status_reason_set( (of_bsn_role_status_t *) o, tmp);
	return;
}

void do_of_bsn_role_status_reason_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_role_status_reason_get( (of_bsn_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_role_status_generation_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_role_status_generation_id_set( (of_bsn_role_status_t *) o, tmp);
	return;
}

void do_of_bsn_role_status_generation_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_role_status_generation_id_get( (of_bsn_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_aux_cxns_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_aux_cxns_reply_xid_set( (of_bsn_set_aux_cxns_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_aux_cxns_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_aux_cxns_reply_xid_get( (of_bsn_set_aux_cxns_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_aux_cxns_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_aux_cxns_reply_experimenter_set( (of_bsn_set_aux_cxns_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_aux_cxns_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_aux_cxns_reply_experimenter_get( (of_bsn_set_aux_cxns_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_aux_cxns_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_aux_cxns_reply_subtype_set( (of_bsn_set_aux_cxns_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_aux_cxns_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_aux_cxns_reply_subtype_get( (of_bsn_set_aux_cxns_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_aux_cxns_reply_num_aux_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_aux_cxns_reply_num_aux_set( (of_bsn_set_aux_cxns_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_aux_cxns_reply_num_aux_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_aux_cxns_reply_num_aux_get( (of_bsn_set_aux_cxns_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_aux_cxns_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_aux_cxns_reply_status_set( (of_bsn_set_aux_cxns_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_aux_cxns_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_aux_cxns_reply_status_get( (of_bsn_set_aux_cxns_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_aux_cxns_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_aux_cxns_request_xid_set( (of_bsn_set_aux_cxns_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_aux_cxns_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_aux_cxns_request_xid_get( (of_bsn_set_aux_cxns_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_aux_cxns_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_aux_cxns_request_experimenter_set( (of_bsn_set_aux_cxns_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_aux_cxns_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_aux_cxns_request_experimenter_get( (of_bsn_set_aux_cxns_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_aux_cxns_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_aux_cxns_request_subtype_set( (of_bsn_set_aux_cxns_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_aux_cxns_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_aux_cxns_request_subtype_get( (of_bsn_set_aux_cxns_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_aux_cxns_request_num_aux_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_aux_cxns_request_num_aux_set( (of_bsn_set_aux_cxns_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_aux_cxns_request_num_aux_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_aux_cxns_request_num_aux_get( (of_bsn_set_aux_cxns_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_ip_mask_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_ip_mask_xid_set( (of_bsn_set_ip_mask_t *) o, tmp);
	return;
}

void do_of_bsn_set_ip_mask_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_ip_mask_xid_get( (of_bsn_set_ip_mask_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_ip_mask_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_ip_mask_experimenter_set( (of_bsn_set_ip_mask_t *) o, tmp);
	return;
}

void do_of_bsn_set_ip_mask_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_ip_mask_experimenter_get( (of_bsn_set_ip_mask_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_ip_mask_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_ip_mask_subtype_set( (of_bsn_set_ip_mask_t *) o, tmp);
	return;
}

void do_of_bsn_set_ip_mask_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_ip_mask_subtype_get( (of_bsn_set_ip_mask_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_ip_mask_index_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_set_ip_mask_index_set( (of_bsn_set_ip_mask_t *) o, tmp);
	return;
}

void do_of_bsn_set_ip_mask_index_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_set_ip_mask_index_get( (of_bsn_set_ip_mask_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_ip_mask_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_ip_mask_mask_set( (of_bsn_set_ip_mask_t *) o, tmp);
	return;
}

void do_of_bsn_set_ip_mask_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_ip_mask_mask_get( (of_bsn_set_ip_mask_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_l2_table_reply_xid_set( (of_bsn_set_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_l2_table_reply_xid_get( (of_bsn_set_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_l2_table_reply_experimenter_set( (of_bsn_set_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_l2_table_reply_experimenter_get( (of_bsn_set_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_l2_table_reply_subtype_set( (of_bsn_set_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_l2_table_reply_subtype_get( (of_bsn_set_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_reply_l2_table_enable_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_set_l2_table_reply_l2_table_enable_set( (of_bsn_set_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_reply_l2_table_enable_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_set_l2_table_reply_l2_table_enable_get( (of_bsn_set_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_reply_l2_table_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_set_l2_table_reply_l2_table_priority_set( (of_bsn_set_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_reply_l2_table_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_set_l2_table_reply_l2_table_priority_get( (of_bsn_set_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_l2_table_reply_status_set( (of_bsn_set_l2_table_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_l2_table_reply_status_get( (of_bsn_set_l2_table_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_l2_table_request_xid_set( (of_bsn_set_l2_table_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_l2_table_request_xid_get( (of_bsn_set_l2_table_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_l2_table_request_experimenter_set( (of_bsn_set_l2_table_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_l2_table_request_experimenter_get( (of_bsn_set_l2_table_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_l2_table_request_subtype_set( (of_bsn_set_l2_table_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_l2_table_request_subtype_get( (of_bsn_set_l2_table_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_request_l2_table_enable_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_set_l2_table_request_l2_table_enable_set( (of_bsn_set_l2_table_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_request_l2_table_enable_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_set_l2_table_request_l2_table_enable_get( (of_bsn_set_l2_table_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_l2_table_request_l2_table_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_set_l2_table_request_l2_table_priority_set( (of_bsn_set_l2_table_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_l2_table_request_l2_table_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_set_l2_table_request_l2_table_priority_get( (of_bsn_set_l2_table_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_lacp_reply_xid_set( (of_bsn_set_lacp_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_lacp_reply_xid_get( (of_bsn_set_lacp_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_lacp_reply_experimenter_set( (of_bsn_set_lacp_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_lacp_reply_experimenter_get( (of_bsn_set_lacp_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_lacp_reply_subtype_set( (of_bsn_set_lacp_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_lacp_reply_subtype_get( (of_bsn_set_lacp_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_lacp_reply_status_set( (of_bsn_set_lacp_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_lacp_reply_status_get( (of_bsn_set_lacp_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_reply_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_set_lacp_reply_port_no_set( (of_bsn_set_lacp_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_reply_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_set_lacp_reply_port_no_get( (of_bsn_set_lacp_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_lacp_request_xid_set( (of_bsn_set_lacp_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_lacp_request_xid_get( (of_bsn_set_lacp_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_lacp_request_experimenter_set( (of_bsn_set_lacp_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_lacp_request_experimenter_get( (of_bsn_set_lacp_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_lacp_request_subtype_set( (of_bsn_set_lacp_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_lacp_request_subtype_get( (of_bsn_set_lacp_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_request_enabled_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_set_lacp_request_enabled_set( (of_bsn_set_lacp_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_request_enabled_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_set_lacp_request_enabled_get( (of_bsn_set_lacp_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_request_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_set_lacp_request_port_no_set( (of_bsn_set_lacp_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_request_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_set_lacp_request_port_no_get( (of_bsn_set_lacp_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_request_actor_sys_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_set_lacp_request_actor_sys_priority_set( (of_bsn_set_lacp_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_request_actor_sys_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_set_lacp_request_actor_sys_priority_get( (of_bsn_set_lacp_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_request_actor_port_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_set_lacp_request_actor_port_priority_set( (of_bsn_set_lacp_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_request_actor_port_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_set_lacp_request_actor_port_priority_get( (of_bsn_set_lacp_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_request_actor_port_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_set_lacp_request_actor_port_num_set( (of_bsn_set_lacp_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_request_actor_port_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_set_lacp_request_actor_port_num_get( (of_bsn_set_lacp_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_lacp_request_actor_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_set_lacp_request_actor_key_set( (of_bsn_set_lacp_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_lacp_request_actor_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_set_lacp_request_actor_key_get( (of_bsn_set_lacp_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_mirroring_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_mirroring_xid_set( (of_bsn_set_mirroring_t *) o, tmp);
	return;
}

void do_of_bsn_set_mirroring_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_mirroring_xid_get( (of_bsn_set_mirroring_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_mirroring_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_mirroring_experimenter_set( (of_bsn_set_mirroring_t *) o, tmp);
	return;
}

void do_of_bsn_set_mirroring_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_mirroring_experimenter_get( (of_bsn_set_mirroring_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_mirroring_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_mirroring_subtype_set( (of_bsn_set_mirroring_t *) o, tmp);
	return;
}

void do_of_bsn_set_mirroring_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_mirroring_subtype_get( (of_bsn_set_mirroring_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_mirroring_report_mirror_ports_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_set_mirroring_report_mirror_ports_set( (of_bsn_set_mirroring_t *) o, tmp);
	return;
}

void do_of_bsn_set_mirroring_report_mirror_ports_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_set_mirroring_report_mirror_ports_get( (of_bsn_set_mirroring_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_reply_xid_set( (of_bsn_set_pktin_suppression_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_pktin_suppression_reply_xid_get( (of_bsn_set_pktin_suppression_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_reply_experimenter_set( (of_bsn_set_pktin_suppression_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_pktin_suppression_reply_experimenter_get( (of_bsn_set_pktin_suppression_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_reply_subtype_set( (of_bsn_set_pktin_suppression_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_pktin_suppression_reply_subtype_get( (of_bsn_set_pktin_suppression_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_reply_status_set( (of_bsn_set_pktin_suppression_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_pktin_suppression_reply_status_get( (of_bsn_set_pktin_suppression_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_request_xid_set( (of_bsn_set_pktin_suppression_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_pktin_suppression_request_xid_get( (of_bsn_set_pktin_suppression_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_request_experimenter_set( (of_bsn_set_pktin_suppression_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_pktin_suppression_request_experimenter_get( (of_bsn_set_pktin_suppression_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_request_subtype_set( (of_bsn_set_pktin_suppression_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_pktin_suppression_request_subtype_get( (of_bsn_set_pktin_suppression_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_request_enabled_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_request_enabled_set( (of_bsn_set_pktin_suppression_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_request_enabled_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_set_pktin_suppression_request_enabled_get( (of_bsn_set_pktin_suppression_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_request_idle_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_request_idle_timeout_set( (of_bsn_set_pktin_suppression_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_request_idle_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_set_pktin_suppression_request_idle_timeout_get( (of_bsn_set_pktin_suppression_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_request_hard_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_request_hard_timeout_set( (of_bsn_set_pktin_suppression_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_request_hard_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_set_pktin_suppression_request_hard_timeout_get( (of_bsn_set_pktin_suppression_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_request_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_request_priority_set( (of_bsn_set_pktin_suppression_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_request_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_set_pktin_suppression_request_priority_get( (of_bsn_set_pktin_suppression_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_pktin_suppression_request_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_set_pktin_suppression_request_cookie_set( (of_bsn_set_pktin_suppression_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_pktin_suppression_request_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_set_pktin_suppression_request_cookie_get( (of_bsn_set_pktin_suppression_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_switch_pipeline_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_switch_pipeline_reply_xid_set( (of_bsn_set_switch_pipeline_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_switch_pipeline_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_switch_pipeline_reply_xid_get( (of_bsn_set_switch_pipeline_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_switch_pipeline_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_switch_pipeline_reply_experimenter_set( (of_bsn_set_switch_pipeline_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_switch_pipeline_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_switch_pipeline_reply_experimenter_get( (of_bsn_set_switch_pipeline_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_switch_pipeline_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_switch_pipeline_reply_subtype_set( (of_bsn_set_switch_pipeline_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_switch_pipeline_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_switch_pipeline_reply_subtype_get( (of_bsn_set_switch_pipeline_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_switch_pipeline_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_switch_pipeline_reply_status_set( (of_bsn_set_switch_pipeline_reply_t *) o, tmp);
	return;
}

void do_of_bsn_set_switch_pipeline_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_switch_pipeline_reply_status_get( (of_bsn_set_switch_pipeline_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_switch_pipeline_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_switch_pipeline_request_xid_set( (of_bsn_set_switch_pipeline_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_switch_pipeline_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_switch_pipeline_request_xid_get( (of_bsn_set_switch_pipeline_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_switch_pipeline_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_switch_pipeline_request_experimenter_set( (of_bsn_set_switch_pipeline_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_switch_pipeline_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_switch_pipeline_request_experimenter_get( (of_bsn_set_switch_pipeline_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_set_switch_pipeline_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_set_switch_pipeline_request_subtype_set( (of_bsn_set_switch_pipeline_request_t *) o, tmp);
	return;
}

void do_of_bsn_set_switch_pipeline_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_set_switch_pipeline_request_subtype_get( (of_bsn_set_switch_pipeline_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_command_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_command_xid_set( (of_bsn_shell_command_t *) o, tmp);
	return;
}

void do_of_bsn_shell_command_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_command_xid_get( (of_bsn_shell_command_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_command_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_command_experimenter_set( (of_bsn_shell_command_t *) o, tmp);
	return;
}

void do_of_bsn_shell_command_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_command_experimenter_get( (of_bsn_shell_command_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_command_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_command_subtype_set( (of_bsn_shell_command_t *) o, tmp);
	return;
}

void do_of_bsn_shell_command_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_command_subtype_get( (of_bsn_shell_command_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_command_service_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_command_service_set( (of_bsn_shell_command_t *) o, tmp);
	return;
}

void do_of_bsn_shell_command_service_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_command_service_get( (of_bsn_shell_command_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_output_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_output_xid_set( (of_bsn_shell_output_t *) o, tmp);
	return;
}

void do_of_bsn_shell_output_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_output_xid_get( (of_bsn_shell_output_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_output_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_output_experimenter_set( (of_bsn_shell_output_t *) o, tmp);
	return;
}

void do_of_bsn_shell_output_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_output_experimenter_get( (of_bsn_shell_output_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_output_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_output_subtype_set( (of_bsn_shell_output_t *) o, tmp);
	return;
}

void do_of_bsn_shell_output_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_output_subtype_get( (of_bsn_shell_output_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_status_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_status_xid_set( (of_bsn_shell_status_t *) o, tmp);
	return;
}

void do_of_bsn_shell_status_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_status_xid_get( (of_bsn_shell_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_status_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_status_experimenter_set( (of_bsn_shell_status_t *) o, tmp);
	return;
}

void do_of_bsn_shell_status_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_status_experimenter_get( (of_bsn_shell_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_status_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_status_subtype_set( (of_bsn_shell_status_t *) o, tmp);
	return;
}

void do_of_bsn_shell_status_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_status_subtype_get( (of_bsn_shell_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_shell_status_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_shell_status_status_set( (of_bsn_shell_status_t *) o, tmp);
	return;
}

void do_of_bsn_shell_status_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_shell_status_status_get( (of_bsn_shell_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_switch_pipeline_stats_reply_xid_set( (of_bsn_switch_pipeline_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_switch_pipeline_stats_reply_xid_get( (of_bsn_switch_pipeline_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_switch_pipeline_stats_reply_flags_set( (of_bsn_switch_pipeline_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_switch_pipeline_stats_reply_flags_get( (of_bsn_switch_pipeline_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_switch_pipeline_stats_reply_experimenter_set( (of_bsn_switch_pipeline_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_switch_pipeline_stats_reply_experimenter_get( (of_bsn_switch_pipeline_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_switch_pipeline_stats_reply_subtype_set( (of_bsn_switch_pipeline_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_switch_pipeline_stats_reply_subtype_get( (of_bsn_switch_pipeline_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_switch_pipeline_stats_entry_t *tmp;
	tmp = of_bsn_switch_pipeline_stats_reply_entries_get( (of_bsn_switch_pipeline_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_switch_pipeline_stats_reply_entries_set( (of_bsn_switch_pipeline_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_switch_pipeline_stats_entry_t *tmp;
	tmp = of_bsn_switch_pipeline_stats_reply_entries_get( (of_bsn_switch_pipeline_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_switch_pipeline_stats_request_xid_set( (of_bsn_switch_pipeline_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_switch_pipeline_stats_request_xid_get( (of_bsn_switch_pipeline_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_switch_pipeline_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_switch_pipeline_stats_request_flags_set( (of_bsn_switch_pipeline_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_switch_pipeline_stats_request_flags_get( (of_bsn_switch_pipeline_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_switch_pipeline_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_switch_pipeline_stats_request_experimenter_set( (of_bsn_switch_pipeline_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_switch_pipeline_stats_request_experimenter_get( (of_bsn_switch_pipeline_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_switch_pipeline_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_switch_pipeline_stats_request_subtype_set( (of_bsn_switch_pipeline_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_switch_pipeline_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_switch_pipeline_stats_request_subtype_get( (of_bsn_switch_pipeline_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_checksum_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_reply_xid_set( (of_bsn_table_checksum_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_checksum_stats_reply_xid_get( (of_bsn_table_checksum_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_checksum_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_reply_flags_set( (of_bsn_table_checksum_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_table_checksum_stats_reply_flags_get( (of_bsn_table_checksum_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_checksum_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_reply_experimenter_set( (of_bsn_table_checksum_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_checksum_stats_reply_experimenter_get( (of_bsn_table_checksum_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_checksum_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_reply_subtype_set( (of_bsn_table_checksum_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_checksum_stats_reply_subtype_get( (of_bsn_table_checksum_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_checksum_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_table_checksum_stats_entry_t *tmp;
	tmp = of_bsn_table_checksum_stats_reply_entries_get( (of_bsn_table_checksum_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_table_checksum_stats_reply_entries_set( (of_bsn_table_checksum_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_table_checksum_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_table_checksum_stats_entry_t *tmp;
	tmp = of_bsn_table_checksum_stats_reply_entries_get( (of_bsn_table_checksum_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_table_checksum_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_request_xid_set( (of_bsn_table_checksum_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_checksum_stats_request_xid_get( (of_bsn_table_checksum_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_checksum_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_request_flags_set( (of_bsn_table_checksum_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_table_checksum_stats_request_flags_get( (of_bsn_table_checksum_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_checksum_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_request_experimenter_set( (of_bsn_table_checksum_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_checksum_stats_request_experimenter_get( (of_bsn_table_checksum_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_checksum_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_request_subtype_set( (of_bsn_table_checksum_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_checksum_stats_request_subtype_get( (of_bsn_table_checksum_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_set_buckets_size_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_set_buckets_size_xid_set( (of_bsn_table_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_table_set_buckets_size_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_set_buckets_size_xid_get( (of_bsn_table_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_set_buckets_size_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_set_buckets_size_experimenter_set( (of_bsn_table_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_table_set_buckets_size_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_set_buckets_size_experimenter_get( (of_bsn_table_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_set_buckets_size_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_set_buckets_size_subtype_set( (of_bsn_table_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_table_set_buckets_size_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_set_buckets_size_subtype_get( (of_bsn_table_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_set_buckets_size_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_table_set_buckets_size_table_id_set( (of_bsn_table_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_table_set_buckets_size_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_table_set_buckets_size_table_id_get( (of_bsn_table_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_set_buckets_size_buckets_size_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_table_set_buckets_size_buckets_size_set( (of_bsn_table_set_buckets_size_t *) o, tmp);
	return;
}

void do_of_bsn_table_set_buckets_size_buckets_size_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_table_set_buckets_size_buckets_size_get( (of_bsn_table_set_buckets_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_time_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_time_reply_xid_set( (of_bsn_time_reply_t *) o, tmp);
	return;
}

void do_of_bsn_time_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_time_reply_xid_get( (of_bsn_time_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_time_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_time_reply_experimenter_set( (of_bsn_time_reply_t *) o, tmp);
	return;
}

void do_of_bsn_time_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_time_reply_experimenter_get( (of_bsn_time_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_time_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_time_reply_subtype_set( (of_bsn_time_reply_t *) o, tmp);
	return;
}

void do_of_bsn_time_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_time_reply_subtype_get( (of_bsn_time_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_time_reply_time_ms_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_time_reply_time_ms_set( (of_bsn_time_reply_t *) o, tmp);
	return;
}

void do_of_bsn_time_reply_time_ms_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_time_reply_time_ms_get( (of_bsn_time_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_time_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_time_request_xid_set( (of_bsn_time_request_t *) o, tmp);
	return;
}

void do_of_bsn_time_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_time_request_xid_get( (of_bsn_time_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_time_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_time_request_experimenter_set( (of_bsn_time_request_t *) o, tmp);
	return;
}

void do_of_bsn_time_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_time_request_experimenter_get( (of_bsn_time_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_time_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_time_request_subtype_set( (of_bsn_time_request_t *) o, tmp);
	return;
}

void do_of_bsn_time_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_time_request_subtype_get( (of_bsn_time_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_create_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_create_reply_xid_set( (of_bsn_virtual_port_create_reply_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_create_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_create_reply_xid_get( (of_bsn_virtual_port_create_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_create_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_create_reply_experimenter_set( (of_bsn_virtual_port_create_reply_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_create_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_create_reply_experimenter_get( (of_bsn_virtual_port_create_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_create_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_create_reply_subtype_set( (of_bsn_virtual_port_create_reply_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_create_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_create_reply_subtype_get( (of_bsn_virtual_port_create_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_create_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_create_reply_status_set( (of_bsn_virtual_port_create_reply_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_create_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_create_reply_status_get( (of_bsn_virtual_port_create_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_create_reply_vport_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_create_reply_vport_no_set( (of_bsn_virtual_port_create_reply_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_create_reply_vport_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_create_reply_vport_no_get( (of_bsn_virtual_port_create_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_create_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_create_request_xid_set( (of_bsn_virtual_port_create_request_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_create_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_create_request_xid_get( (of_bsn_virtual_port_create_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_create_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_create_request_experimenter_set( (of_bsn_virtual_port_create_request_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_create_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_create_request_experimenter_get( (of_bsn_virtual_port_create_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_create_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_create_request_subtype_set( (of_bsn_virtual_port_create_request_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_create_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_create_request_subtype_get( (of_bsn_virtual_port_create_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_create_request_vport_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_bsn_vport_t *tmp;
	tmp = of_bsn_virtual_port_create_request_vport_get( (of_bsn_virtual_port_create_request_t *) o);
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if(of_bsn_virtual_port_create_request_vport_set( (of_bsn_virtual_port_create_request_t *) o, tmp)){
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_virtual_port_create_request_vport_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_bsn_vport_t *tmp;
	tmp = of_bsn_virtual_port_create_request_vport_get( (of_bsn_virtual_port_create_request_t *) o);
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_virtual_port_remove_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_remove_reply_xid_set( (of_bsn_virtual_port_remove_reply_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_remove_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_remove_reply_xid_get( (of_bsn_virtual_port_remove_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_remove_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_remove_reply_experimenter_set( (of_bsn_virtual_port_remove_reply_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_remove_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_remove_reply_experimenter_get( (of_bsn_virtual_port_remove_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_remove_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_remove_reply_subtype_set( (of_bsn_virtual_port_remove_reply_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_remove_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_remove_reply_subtype_get( (of_bsn_virtual_port_remove_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_remove_reply_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_remove_reply_status_set( (of_bsn_virtual_port_remove_reply_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_remove_reply_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_remove_reply_status_get( (of_bsn_virtual_port_remove_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_remove_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_remove_request_xid_set( (of_bsn_virtual_port_remove_request_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_remove_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_remove_request_xid_get( (of_bsn_virtual_port_remove_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_remove_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_remove_request_experimenter_set( (of_bsn_virtual_port_remove_request_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_remove_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_remove_request_experimenter_get( (of_bsn_virtual_port_remove_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_remove_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_remove_request_subtype_set( (of_bsn_virtual_port_remove_request_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_remove_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_remove_request_subtype_get( (of_bsn_virtual_port_remove_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_virtual_port_remove_request_vport_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_virtual_port_remove_request_vport_no_set( (of_bsn_virtual_port_remove_request_t *) o, tmp);
	return;
}

void do_of_bsn_virtual_port_remove_request_vport_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_virtual_port_remove_request_vport_no_get( (of_bsn_virtual_port_remove_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_reply_xid_set( (of_bsn_vlan_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vlan_counter_stats_reply_xid_get( (of_bsn_vlan_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_reply_flags_set( (of_bsn_vlan_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vlan_counter_stats_reply_flags_get( (of_bsn_vlan_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_reply_experimenter_set( (of_bsn_vlan_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vlan_counter_stats_reply_experimenter_get( (of_bsn_vlan_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_reply_subtype_set( (of_bsn_vlan_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vlan_counter_stats_reply_subtype_get( (of_bsn_vlan_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_vlan_counter_stats_entry_t *tmp;
	tmp = of_bsn_vlan_counter_stats_reply_entries_get( (of_bsn_vlan_counter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_vlan_counter_stats_reply_entries_set( (of_bsn_vlan_counter_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_vlan_counter_stats_entry_t *tmp;
	tmp = of_bsn_vlan_counter_stats_reply_entries_get( (of_bsn_vlan_counter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_request_xid_set( (of_bsn_vlan_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vlan_counter_stats_request_xid_get( (of_bsn_vlan_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_request_flags_set( (of_bsn_vlan_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vlan_counter_stats_request_flags_get( (of_bsn_vlan_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_request_experimenter_set( (of_bsn_vlan_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vlan_counter_stats_request_experimenter_get( (of_bsn_vlan_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_request_subtype_set( (of_bsn_vlan_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vlan_counter_stats_request_subtype_get( (of_bsn_vlan_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_request_vlan_vid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_request_vlan_vid_set( (of_bsn_vlan_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_request_vlan_vid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vlan_counter_stats_request_vlan_vid_get( (of_bsn_vlan_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_reply_xid_set( (of_bsn_vrf_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vrf_counter_stats_reply_xid_get( (of_bsn_vrf_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_reply_flags_set( (of_bsn_vrf_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vrf_counter_stats_reply_flags_get( (of_bsn_vrf_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_reply_experimenter_set( (of_bsn_vrf_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vrf_counter_stats_reply_experimenter_get( (of_bsn_vrf_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_reply_subtype_set( (of_bsn_vrf_counter_stats_reply_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vrf_counter_stats_reply_subtype_get( (of_bsn_vrf_counter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_vrf_counter_stats_entry_t *tmp;
	tmp = of_bsn_vrf_counter_stats_reply_entries_get( (of_bsn_vrf_counter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_vrf_counter_stats_reply_entries_set( (of_bsn_vrf_counter_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_vrf_counter_stats_entry_t *tmp;
	tmp = of_bsn_vrf_counter_stats_reply_entries_get( (of_bsn_vrf_counter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_request_xid_set( (of_bsn_vrf_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vrf_counter_stats_request_xid_get( (of_bsn_vrf_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_request_flags_set( (of_bsn_vrf_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vrf_counter_stats_request_flags_get( (of_bsn_vrf_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_request_experimenter_set( (of_bsn_vrf_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vrf_counter_stats_request_experimenter_get( (of_bsn_vrf_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_request_subtype_set( (of_bsn_vrf_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vrf_counter_stats_request_subtype_get( (of_bsn_vrf_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_request_vrf_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_request_vrf_set( (of_bsn_vrf_counter_stats_request_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_request_vrf_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vrf_counter_stats_request_vrf_get( (of_bsn_vrf_counter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bundle_add_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bundle_add_msg_xid_set( (of_bundle_add_msg_t *) o, tmp);
	return;
}

void do_of_bundle_add_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bundle_add_msg_xid_get( (of_bundle_add_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bundle_add_msg_bundle_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bundle_add_msg_bundle_id_set( (of_bundle_add_msg_t *) o, tmp);
	return;
}

void do_of_bundle_add_msg_bundle_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bundle_add_msg_bundle_id_get( (of_bundle_add_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bundle_add_msg_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bundle_add_msg_flags_set( (of_bundle_add_msg_t *) o, tmp);
	return;
}

void do_of_bundle_add_msg_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bundle_add_msg_flags_get( (of_bundle_add_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bundle_ctrl_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bundle_ctrl_msg_xid_set( (of_bundle_ctrl_msg_t *) o, tmp);
	return;
}

void do_of_bundle_ctrl_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bundle_ctrl_msg_xid_get( (of_bundle_ctrl_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bundle_ctrl_msg_bundle_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bundle_ctrl_msg_bundle_id_set( (of_bundle_ctrl_msg_t *) o, tmp);
	return;
}

void do_of_bundle_ctrl_msg_bundle_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bundle_ctrl_msg_bundle_id_get( (of_bundle_ctrl_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bundle_ctrl_msg_bundle_ctrl_type_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bundle_ctrl_msg_bundle_ctrl_type_set( (of_bundle_ctrl_msg_t *) o, tmp);
	return;
}

void do_of_bundle_ctrl_msg_bundle_ctrl_type_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bundle_ctrl_msg_bundle_ctrl_type_get( (of_bundle_ctrl_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bundle_ctrl_msg_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bundle_ctrl_msg_flags_set( (of_bundle_ctrl_msg_t *) o, tmp);
	return;
}

void do_of_bundle_ctrl_msg_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bundle_ctrl_msg_flags_get( (of_bundle_ctrl_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bundle_ctrl_msg_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bundle_prop_t *tmp;
	tmp = of_bundle_ctrl_msg_properties_get( (of_bundle_ctrl_msg_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bundle_ctrl_msg_properties_set( (of_bundle_ctrl_msg_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bundle_ctrl_msg_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bundle_prop_t *tmp;
	tmp = of_bundle_ctrl_msg_properties_get( (of_bundle_ctrl_msg_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bundle_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bundle_failed_error_msg_xid_set( (of_bundle_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_bundle_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bundle_failed_error_msg_xid_get( (of_bundle_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bundle_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bundle_failed_error_msg_code_set( (of_bundle_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_bundle_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bundle_failed_error_msg_code_get( (of_bundle_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_desc_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_desc_stats_reply_xid_set( (of_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_desc_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_desc_stats_reply_xid_get( (of_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_desc_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_desc_stats_reply_flags_set( (of_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_desc_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_desc_stats_reply_flags_get( (of_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_desc_stats_reply_mfr_desc_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_desc_str_t tmp;
	//tmp = val;
	//of_desc_stats_reply_mfr_desc_set( (of_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_desc_stats_reply_mfr_desc_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_desc_str_t tmp;
	//of_desc_stats_reply_mfr_desc_get( (of_desc_stats_reply_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_desc_stats_reply_hw_desc_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_desc_str_t tmp;
	//tmp = val;
	//of_desc_stats_reply_hw_desc_set( (of_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_desc_stats_reply_hw_desc_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_desc_str_t tmp;
	//of_desc_stats_reply_hw_desc_get( (of_desc_stats_reply_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_desc_stats_reply_sw_desc_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_desc_str_t tmp;
	//tmp = val;
	//of_desc_stats_reply_sw_desc_set( (of_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_desc_stats_reply_sw_desc_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_desc_str_t tmp;
	//of_desc_stats_reply_sw_desc_get( (of_desc_stats_reply_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_desc_stats_reply_serial_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_serial_num_t tmp;
	//tmp = val;
	//of_desc_stats_reply_serial_num_set( (of_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_desc_stats_reply_serial_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_serial_num_t tmp;
	//of_desc_stats_reply_serial_num_get( (of_desc_stats_reply_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_desc_stats_reply_dp_desc_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_desc_str_t tmp;
	//tmp = val;
	//of_desc_stats_reply_dp_desc_set( (of_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_desc_stats_reply_dp_desc_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_desc_str_t tmp;
	//of_desc_stats_reply_dp_desc_get( (of_desc_stats_reply_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_desc_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_desc_stats_request_xid_set( (of_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_desc_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_desc_stats_request_xid_get( (of_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_desc_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_desc_stats_request_flags_set( (of_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_desc_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_desc_stats_request_flags_get( (of_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_echo_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_echo_reply_xid_set( (of_echo_reply_t *) o, tmp);
	return;
}

void do_of_echo_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_echo_reply_xid_get( (of_echo_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_echo_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_echo_request_xid_set( (of_echo_request_t *) o, tmp);
	return;
}

void do_of_echo_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_echo_request_xid_get( (of_echo_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_experimenter_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_experimenter_error_msg_xid_set( (of_experimenter_error_msg_t *) o, tmp);
	return;
}

void do_of_experimenter_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_experimenter_error_msg_xid_get( (of_experimenter_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_experimenter_error_msg_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_experimenter_error_msg_subtype_set( (of_experimenter_error_msg_t *) o, tmp);
	return;
}

void do_of_experimenter_error_msg_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_experimenter_error_msg_subtype_get( (of_experimenter_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_experimenter_error_msg_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_experimenter_error_msg_experimenter_set( (of_experimenter_error_msg_t *) o, tmp);
	return;
}

void do_of_experimenter_error_msg_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_experimenter_error_msg_experimenter_get( (of_experimenter_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_features_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_features_reply_xid_set( (of_features_reply_t *) o, tmp);
	return;
}

void do_of_features_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_features_reply_xid_get( (of_features_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_features_reply_datapath_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_features_reply_datapath_id_set( (of_features_reply_t *) o, tmp);
	return;
}

void do_of_features_reply_datapath_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_features_reply_datapath_id_get( (of_features_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_features_reply_n_buffers_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_features_reply_n_buffers_set( (of_features_reply_t *) o, tmp);
	return;
}

void do_of_features_reply_n_buffers_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_features_reply_n_buffers_get( (of_features_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_features_reply_n_tables_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_features_reply_n_tables_set( (of_features_reply_t *) o, tmp);
	return;
}

void do_of_features_reply_n_tables_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_features_reply_n_tables_get( (of_features_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_features_reply_auxiliary_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_features_reply_auxiliary_id_set( (of_features_reply_t *) o, tmp);
	return;
}

void do_of_features_reply_auxiliary_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_features_reply_auxiliary_id_get( (of_features_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_features_reply_capabilities_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_features_reply_capabilities_set( (of_features_reply_t *) o, tmp);
	return;
}

void do_of_features_reply_capabilities_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_features_reply_capabilities_get( (of_features_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_features_reply_reserved_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_features_reply_reserved_set( (of_features_reply_t *) o, tmp);
	return;
}

void do_of_features_reply_reserved_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_features_reply_reserved_get( (of_features_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_features_reply_ports_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_port_desc_t *tmp;
	tmp = of_features_reply_ports_get( (of_features_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_features_reply_ports_set( (of_features_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_features_reply_ports_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_port_desc_t *tmp;
	tmp = of_features_reply_ports_get( (of_features_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_features_reply_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_features_reply_actions_set( (of_features_reply_t *) o, tmp);
	return;
}

void do_of_features_reply_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_features_reply_actions_get( (of_features_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_features_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_features_request_xid_set( (of_features_request_t *) o, tmp);
	return;
}

void do_of_features_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_features_request_xid_get( (of_features_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_add_xid_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_add_xid_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_add_cookie_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_add_cookie_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_cookie_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_add_cookie_mask_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_cookie_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_add_cookie_mask_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_flow_add_table_id_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_flow_add_table_id_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_idle_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_add_idle_timeout_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_idle_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_add_idle_timeout_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_hard_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_add_hard_timeout_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_hard_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_add_hard_timeout_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_add_priority_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_add_priority_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_buffer_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_add_buffer_id_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_buffer_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_add_buffer_id_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_out_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_flow_add_out_port_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_out_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_flow_add_out_port_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_out_group_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_add_out_group_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_out_group_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_add_out_group_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_add_flags_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_add_flags_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_importance_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_add_importance_set( (of_flow_add_t *) o, tmp);
	return;
}

void do_of_flow_add_importance_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_add_importance_get( (of_flow_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_add_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_add_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_add_instructions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_add_instructions_get( (of_flow_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_add_instructions_set( (of_flow_add_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_add_instructions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_add_instructions_get( (of_flow_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_add_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_add_actions_get( (of_flow_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_add_actions_set( (of_flow_add_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_add_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_add_actions_get( (of_flow_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_delete_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_delete_xid_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_delete_xid_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_delete_cookie_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_delete_cookie_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_cookie_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_delete_cookie_mask_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_cookie_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_delete_cookie_mask_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_flow_delete_table_id_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_flow_delete_table_id_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_idle_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_idle_timeout_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_idle_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_idle_timeout_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_hard_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_hard_timeout_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_hard_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_hard_timeout_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_priority_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_priority_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_buffer_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_delete_buffer_id_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_buffer_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_delete_buffer_id_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_out_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_flow_delete_out_port_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_out_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_flow_delete_out_port_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_out_group_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_delete_out_group_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_out_group_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_delete_out_group_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_flags_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_flags_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_importance_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_importance_set( (of_flow_delete_t *) o, tmp);
	return;
}

void do_of_flow_delete_importance_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_importance_get( (of_flow_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_delete_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_delete_instructions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_delete_instructions_get( (of_flow_delete_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_delete_instructions_set( (of_flow_delete_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_delete_instructions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_delete_instructions_get( (of_flow_delete_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_delete_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_delete_actions_get( (of_flow_delete_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_delete_actions_set( (of_flow_delete_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_delete_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_delete_actions_get( (of_flow_delete_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_delete_strict_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_delete_strict_xid_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_delete_strict_xid_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_delete_strict_cookie_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_delete_strict_cookie_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_cookie_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_delete_strict_cookie_mask_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_cookie_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_delete_strict_cookie_mask_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_flow_delete_strict_table_id_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_flow_delete_strict_table_id_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_idle_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_strict_idle_timeout_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_idle_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_strict_idle_timeout_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_hard_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_strict_hard_timeout_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_hard_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_strict_hard_timeout_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_strict_priority_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_strict_priority_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_buffer_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_delete_strict_buffer_id_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_buffer_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_delete_strict_buffer_id_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_out_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_flow_delete_strict_out_port_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_out_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_flow_delete_strict_out_port_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_out_group_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_delete_strict_out_group_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_out_group_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_delete_strict_out_group_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_strict_flags_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_strict_flags_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_importance_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_delete_strict_importance_set( (of_flow_delete_strict_t *) o, tmp);
	return;
}

void do_of_flow_delete_strict_importance_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_delete_strict_importance_get( (of_flow_delete_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_delete_strict_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_delete_strict_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_delete_strict_instructions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_delete_strict_instructions_get( (of_flow_delete_strict_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_delete_strict_instructions_set( (of_flow_delete_strict_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_delete_strict_instructions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_delete_strict_instructions_get( (of_flow_delete_strict_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_delete_strict_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_delete_strict_actions_get( (of_flow_delete_strict_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_delete_strict_actions_set( (of_flow_delete_strict_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_delete_strict_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_delete_strict_actions_get( (of_flow_delete_strict_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_mod_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_mod_failed_error_msg_xid_set( (of_flow_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_flow_mod_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_mod_failed_error_msg_xid_get( (of_flow_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_mod_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_mod_failed_error_msg_code_set( (of_flow_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_flow_mod_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_mod_failed_error_msg_code_get( (of_flow_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_modify_xid_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_modify_xid_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_modify_cookie_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_modify_cookie_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_cookie_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_modify_cookie_mask_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_cookie_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_modify_cookie_mask_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_flow_modify_table_id_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_flow_modify_table_id_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_idle_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_idle_timeout_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_idle_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_idle_timeout_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_hard_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_hard_timeout_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_hard_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_hard_timeout_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_priority_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_priority_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_buffer_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_modify_buffer_id_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_buffer_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_modify_buffer_id_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_out_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_flow_modify_out_port_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_out_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_flow_modify_out_port_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_out_group_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_modify_out_group_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_out_group_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_modify_out_group_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_flags_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_flags_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_importance_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_importance_set( (of_flow_modify_t *) o, tmp);
	return;
}

void do_of_flow_modify_importance_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_importance_get( (of_flow_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_modify_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_modify_instructions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_modify_instructions_get( (of_flow_modify_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_modify_instructions_set( (of_flow_modify_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_modify_instructions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_modify_instructions_get( (of_flow_modify_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_modify_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_modify_actions_get( (of_flow_modify_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_modify_actions_set( (of_flow_modify_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_modify_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_modify_actions_get( (of_flow_modify_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_modify_strict_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_modify_strict_xid_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_modify_strict_xid_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_modify_strict_cookie_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_modify_strict_cookie_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_cookie_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_modify_strict_cookie_mask_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_cookie_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_modify_strict_cookie_mask_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_flow_modify_strict_table_id_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_flow_modify_strict_table_id_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_idle_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_strict_idle_timeout_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_idle_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_strict_idle_timeout_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_hard_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_strict_hard_timeout_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_hard_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_strict_hard_timeout_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_strict_priority_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_strict_priority_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_buffer_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_modify_strict_buffer_id_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_buffer_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_modify_strict_buffer_id_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_out_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_flow_modify_strict_out_port_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_out_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_flow_modify_strict_out_port_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_out_group_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_modify_strict_out_group_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_out_group_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_modify_strict_out_group_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_strict_flags_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_strict_flags_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_importance_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_modify_strict_importance_set( (of_flow_modify_strict_t *) o, tmp);
	return;
}

void do_of_flow_modify_strict_importance_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_modify_strict_importance_get( (of_flow_modify_strict_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_modify_strict_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_modify_strict_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_modify_strict_instructions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_modify_strict_instructions_get( (of_flow_modify_strict_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_modify_strict_instructions_set( (of_flow_modify_strict_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_modify_strict_instructions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_modify_strict_instructions_get( (of_flow_modify_strict_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_modify_strict_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_modify_strict_actions_get( (of_flow_modify_strict_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_modify_strict_actions_set( (of_flow_modify_strict_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_modify_strict_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_modify_strict_actions_get( (of_flow_modify_strict_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_monitor_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_monitor_failed_error_msg_xid_set( (of_flow_monitor_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_flow_monitor_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_monitor_failed_error_msg_xid_get( (of_flow_monitor_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_monitor_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_monitor_failed_error_msg_code_set( (of_flow_monitor_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_flow_monitor_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_monitor_failed_error_msg_code_get( (of_flow_monitor_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_removed_xid_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_removed_xid_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_removed_cookie_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_removed_cookie_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_removed_priority_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_removed_priority_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_reason_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_flow_removed_reason_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_reason_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_flow_removed_reason_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_flow_removed_table_id_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_flow_removed_table_id_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_duration_sec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_removed_duration_sec_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_duration_sec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_removed_duration_sec_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_duration_nsec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_removed_duration_nsec_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_duration_nsec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_removed_duration_nsec_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_idle_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_removed_idle_timeout_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_idle_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_removed_idle_timeout_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_hard_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_removed_hard_timeout_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_hard_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_removed_hard_timeout_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_packet_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_removed_packet_count_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_packet_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_removed_packet_count_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_byte_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_removed_byte_count_set( (of_flow_removed_t *) o, tmp);
	return;
}

void do_of_flow_removed_byte_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_removed_byte_count_get( (of_flow_removed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_removed_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_removed_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_stats_reply_xid_set( (of_flow_stats_reply_t *) o, tmp);
	return;
}

void do_of_flow_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_stats_reply_xid_get( (of_flow_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_stats_reply_flags_set( (of_flow_stats_reply_t *) o, tmp);
	return;
}

void do_of_flow_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_stats_reply_flags_get( (of_flow_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_flow_stats_entry_t *tmp;
	tmp = of_flow_stats_reply_entries_get( (of_flow_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_stats_reply_entries_set( (of_flow_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_flow_stats_entry_t *tmp;
	tmp = of_flow_stats_reply_entries_get( (of_flow_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_stats_request_xid_set( (of_flow_stats_request_t *) o, tmp);
	return;
}

void do_of_flow_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_stats_request_xid_get( (of_flow_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_stats_request_flags_set( (of_flow_stats_request_t *) o, tmp);
	return;
}

void do_of_flow_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_stats_request_flags_get( (of_flow_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_request_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_flow_stats_request_table_id_set( (of_flow_stats_request_t *) o, tmp);
	return;
}

void do_of_flow_stats_request_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_flow_stats_request_table_id_get( (of_flow_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_request_out_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_flow_stats_request_out_port_set( (of_flow_stats_request_t *) o, tmp);
	return;
}

void do_of_flow_stats_request_out_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_flow_stats_request_out_port_get( (of_flow_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_request_out_group_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_stats_request_out_group_set( (of_flow_stats_request_t *) o, tmp);
	return;
}

void do_of_flow_stats_request_out_group_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_stats_request_out_group_get( (of_flow_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_request_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_stats_request_cookie_set( (of_flow_stats_request_t *) o, tmp);
	return;
}

void do_of_flow_stats_request_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_stats_request_cookie_get( (of_flow_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_request_cookie_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_stats_request_cookie_mask_set( (of_flow_stats_request_t *) o, tmp);
	return;
}

void do_of_flow_stats_request_cookie_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_stats_request_cookie_mask_get( (of_flow_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_request_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_stats_request_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_get_config_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_get_config_reply_xid_set( (of_get_config_reply_t *) o, tmp);
	return;
}

void do_of_get_config_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_get_config_reply_xid_get( (of_get_config_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_get_config_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_get_config_reply_flags_set( (of_get_config_reply_t *) o, tmp);
	return;
}

void do_of_get_config_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_get_config_reply_flags_get( (of_get_config_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_get_config_reply_miss_send_len_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_get_config_reply_miss_send_len_set( (of_get_config_reply_t *) o, tmp);
	return;
}

void do_of_get_config_reply_miss_send_len_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_get_config_reply_miss_send_len_get( (of_get_config_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_get_config_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_get_config_request_xid_set( (of_get_config_request_t *) o, tmp);
	return;
}

void do_of_get_config_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_get_config_request_xid_get( (of_get_config_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_add_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_add_xid_set( (of_group_add_t *) o, tmp);
	return;
}

void do_of_group_add_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_add_xid_get( (of_group_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_add_group_type_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_group_add_group_type_set( (of_group_add_t *) o, tmp);
	return;
}

void do_of_group_add_group_type_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_group_add_group_type_get( (of_group_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_add_group_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_add_group_id_set( (of_group_add_t *) o, tmp);
	return;
}

void do_of_group_add_group_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_add_group_id_get( (of_group_add_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_add_buckets_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bucket_t *tmp;
	tmp = of_group_add_buckets_get( (of_group_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_group_add_buckets_set( (of_group_add_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_add_buckets_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bucket_t *tmp;
	tmp = of_group_add_buckets_get( (of_group_add_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_delete_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_delete_xid_set( (of_group_delete_t *) o, tmp);
	return;
}

void do_of_group_delete_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_delete_xid_get( (of_group_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_delete_group_type_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_group_delete_group_type_set( (of_group_delete_t *) o, tmp);
	return;
}

void do_of_group_delete_group_type_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_group_delete_group_type_get( (of_group_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_delete_group_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_delete_group_id_set( (of_group_delete_t *) o, tmp);
	return;
}

void do_of_group_delete_group_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_delete_group_id_get( (of_group_delete_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_delete_buckets_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bucket_t *tmp;
	tmp = of_group_delete_buckets_get( (of_group_delete_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_group_delete_buckets_set( (of_group_delete_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_delete_buckets_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bucket_t *tmp;
	tmp = of_group_delete_buckets_get( (of_group_delete_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_desc_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_desc_stats_reply_xid_set( (of_group_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_desc_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_desc_stats_reply_xid_get( (of_group_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_desc_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_group_desc_stats_reply_flags_set( (of_group_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_desc_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_group_desc_stats_reply_flags_get( (of_group_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_desc_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_group_desc_stats_entry_t *tmp;
	tmp = of_group_desc_stats_reply_entries_get( (of_group_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_group_desc_stats_reply_entries_set( (of_group_desc_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_desc_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_group_desc_stats_entry_t *tmp;
	tmp = of_group_desc_stats_reply_entries_get( (of_group_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_desc_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_desc_stats_request_xid_set( (of_group_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_group_desc_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_desc_stats_request_xid_get( (of_group_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_desc_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_group_desc_stats_request_flags_set( (of_group_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_group_desc_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_group_desc_stats_request_flags_get( (of_group_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_xid_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_xid_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_group_features_stats_reply_flags_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_group_features_stats_reply_flags_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_types_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_types_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_types_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_types_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_capabilities_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_capabilities_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_capabilities_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_capabilities_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_max_groups_all_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_max_groups_all_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_max_groups_all_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_max_groups_all_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_max_groups_select_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_max_groups_select_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_max_groups_select_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_max_groups_select_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_max_groups_indirect_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_max_groups_indirect_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_max_groups_indirect_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_max_groups_indirect_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_max_groups_ff_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_max_groups_ff_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_max_groups_ff_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_max_groups_ff_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_actions_all_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_actions_all_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_actions_all_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_actions_all_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_actions_select_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_actions_select_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_actions_select_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_actions_select_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_actions_indirect_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_actions_indirect_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_actions_indirect_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_actions_indirect_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_reply_actions_ff_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_reply_actions_ff_set( (of_group_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_features_stats_reply_actions_ff_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_reply_actions_ff_get( (of_group_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_features_stats_request_xid_set( (of_group_features_stats_request_t *) o, tmp);
	return;
}

void do_of_group_features_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_features_stats_request_xid_get( (of_group_features_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_features_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_group_features_stats_request_flags_set( (of_group_features_stats_request_t *) o, tmp);
	return;
}

void do_of_group_features_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_group_features_stats_request_flags_get( (of_group_features_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_mod_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_mod_failed_error_msg_xid_set( (of_group_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_group_mod_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_mod_failed_error_msg_xid_get( (of_group_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_mod_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_group_mod_failed_error_msg_code_set( (of_group_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_group_mod_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_group_mod_failed_error_msg_code_get( (of_group_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_modify_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_modify_xid_set( (of_group_modify_t *) o, tmp);
	return;
}

void do_of_group_modify_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_modify_xid_get( (of_group_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_modify_group_type_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_group_modify_group_type_set( (of_group_modify_t *) o, tmp);
	return;
}

void do_of_group_modify_group_type_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_group_modify_group_type_get( (of_group_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_modify_group_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_modify_group_id_set( (of_group_modify_t *) o, tmp);
	return;
}

void do_of_group_modify_group_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_modify_group_id_get( (of_group_modify_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_modify_buckets_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bucket_t *tmp;
	tmp = of_group_modify_buckets_get( (of_group_modify_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_group_modify_buckets_set( (of_group_modify_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_modify_buckets_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bucket_t *tmp;
	tmp = of_group_modify_buckets_get( (of_group_modify_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_stats_reply_xid_set( (of_group_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_stats_reply_xid_get( (of_group_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_group_stats_reply_flags_set( (of_group_stats_reply_t *) o, tmp);
	return;
}

void do_of_group_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_group_stats_reply_flags_get( (of_group_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_group_stats_entry_t *tmp;
	tmp = of_group_stats_reply_entries_get( (of_group_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_group_stats_reply_entries_set( (of_group_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_group_stats_entry_t *tmp;
	tmp = of_group_stats_reply_entries_get( (of_group_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_stats_request_xid_set( (of_group_stats_request_t *) o, tmp);
	return;
}

void do_of_group_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_stats_request_xid_get( (of_group_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_group_stats_request_flags_set( (of_group_stats_request_t *) o, tmp);
	return;
}

void do_of_group_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_group_stats_request_flags_get( (of_group_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_request_group_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_stats_request_group_id_set( (of_group_stats_request_t *) o, tmp);
	return;
}

void do_of_group_stats_request_group_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_stats_request_group_id_get( (of_group_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_hello_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_hello_xid_set( (of_hello_t *) o, tmp);
	return;
}

void do_of_hello_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_hello_xid_get( (of_hello_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_hello_elements_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_hello_elem_t *tmp;
	tmp = of_hello_elements_get( (of_hello_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_hello_elements_set( (of_hello_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_hello_elements_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_hello_elem_t *tmp;
	tmp = of_hello_elements_get( (of_hello_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_hello_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_hello_failed_error_msg_xid_set( (of_hello_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_hello_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_hello_failed_error_msg_xid_get( (of_hello_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_hello_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_hello_failed_error_msg_code_set( (of_hello_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_hello_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_hello_failed_error_msg_code_get( (of_hello_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_config_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_config_stats_reply_xid_set( (of_meter_config_stats_reply_t *) o, tmp);
	return;
}

void do_of_meter_config_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_config_stats_reply_xid_get( (of_meter_config_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_config_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_meter_config_stats_reply_flags_set( (of_meter_config_stats_reply_t *) o, tmp);
	return;
}

void do_of_meter_config_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_meter_config_stats_reply_flags_get( (of_meter_config_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_config_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_meter_band_t *tmp;
	tmp = of_meter_config_stats_reply_entries_get( (of_meter_config_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_meter_config_stats_reply_entries_set( (of_meter_config_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_config_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_meter_band_t *tmp;
	tmp = of_meter_config_stats_reply_entries_get( (of_meter_config_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_config_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_config_stats_request_xid_set( (of_meter_config_stats_request_t *) o, tmp);
	return;
}

void do_of_meter_config_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_config_stats_request_xid_get( (of_meter_config_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_config_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_meter_config_stats_request_flags_set( (of_meter_config_stats_request_t *) o, tmp);
	return;
}

void do_of_meter_config_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_meter_config_stats_request_flags_get( (of_meter_config_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_config_stats_request_meter_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_config_stats_request_meter_id_set( (of_meter_config_stats_request_t *) o, tmp);
	return;
}

void do_of_meter_config_stats_request_meter_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_config_stats_request_meter_id_get( (of_meter_config_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_features_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_features_stats_reply_xid_set( (of_meter_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_meter_features_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_features_stats_reply_xid_get( (of_meter_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_features_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_meter_features_stats_reply_flags_set( (of_meter_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_meter_features_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_meter_features_stats_reply_flags_get( (of_meter_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_features_stats_reply_features_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_meter_features_t *tmp;
	tmp = of_meter_features_stats_reply_features_get( (of_meter_features_stats_reply_t *) o);
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_meter_features_stats_reply_features_set( (of_meter_features_stats_reply_t *) o, tmp)) {
		//nothing
	}
	return;
}

void do_of_meter_features_stats_reply_features_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_meter_features_t *tmp;
	tmp = of_meter_features_stats_reply_features_get( (of_meter_features_stats_reply_t *) o);
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	return;
}

void do_of_meter_features_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_features_stats_request_xid_set( (of_meter_features_stats_request_t *) o, tmp);
	return;
}

void do_of_meter_features_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_features_stats_request_xid_get( (of_meter_features_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_features_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_meter_features_stats_request_flags_set( (of_meter_features_stats_request_t *) o, tmp);
	return;
}

void do_of_meter_features_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_meter_features_stats_request_flags_get( (of_meter_features_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_mod_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_mod_xid_set( (of_meter_mod_t *) o, tmp);
	return;
}

void do_of_meter_mod_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_mod_xid_get( (of_meter_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_mod_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_meter_mod_flags_set( (of_meter_mod_t *) o, tmp);
	return;
}

void do_of_meter_mod_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_meter_mod_flags_get( (of_meter_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_mod_meter_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_mod_meter_id_set( (of_meter_mod_t *) o, tmp);
	return;
}

void do_of_meter_mod_meter_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_mod_meter_id_get( (of_meter_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_mod_bands_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_meter_band_t *tmp;
	tmp = of_meter_mod_bands_get( (of_meter_mod_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_meter_mod_bands_set( (of_meter_mod_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_mod_bands_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_meter_band_t *tmp;
	tmp = of_meter_mod_bands_get( (of_meter_mod_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_mod_meters_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_meter_band_t *tmp;
	tmp = of_meter_mod_meters_get( (of_meter_mod_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_meter_mod_meters_set( (of_meter_mod_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_mod_meters_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_meter_band_t *tmp;
	tmp = of_meter_mod_meters_get( (of_meter_mod_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_mod_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_mod_failed_error_msg_xid_set( (of_meter_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_meter_mod_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_mod_failed_error_msg_xid_get( (of_meter_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_mod_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_meter_mod_failed_error_msg_code_set( (of_meter_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_meter_mod_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_meter_mod_failed_error_msg_code_get( (of_meter_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_stats_reply_xid_set( (of_meter_stats_reply_t *) o, tmp);
	return;
}

void do_of_meter_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_stats_reply_xid_get( (of_meter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_meter_stats_reply_flags_set( (of_meter_stats_reply_t *) o, tmp);
	return;
}

void do_of_meter_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_meter_stats_reply_flags_get( (of_meter_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_meter_stats_t *tmp;
	tmp = of_meter_stats_reply_entries_get( (of_meter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_meter_stats_reply_entries_set( (of_meter_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_meter_stats_t *tmp;
	tmp = of_meter_stats_reply_entries_get( (of_meter_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_stats_request_xid_set( (of_meter_stats_request_t *) o, tmp);
	return;
}

void do_of_meter_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_stats_request_xid_get( (of_meter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_meter_stats_request_flags_set( (of_meter_stats_request_t *) o, tmp);
	return;
}

void do_of_meter_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_meter_stats_request_flags_get( (of_meter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_request_meter_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_stats_request_meter_id_set( (of_meter_stats_request_t *) o, tmp);
	return;
}

void do_of_meter_stats_request_meter_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_stats_request_meter_id_get( (of_meter_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_nicira_controller_role_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_nicira_controller_role_reply_xid_set( (of_nicira_controller_role_reply_t *) o, tmp);
	return;
}

void do_of_nicira_controller_role_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_nicira_controller_role_reply_xid_get( (of_nicira_controller_role_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_nicira_controller_role_reply_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_nicira_controller_role_reply_experimenter_set( (of_nicira_controller_role_reply_t *) o, tmp);
	return;
}

void do_of_nicira_controller_role_reply_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_nicira_controller_role_reply_experimenter_get( (of_nicira_controller_role_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_nicira_controller_role_reply_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_nicira_controller_role_reply_subtype_set( (of_nicira_controller_role_reply_t *) o, tmp);
	return;
}

void do_of_nicira_controller_role_reply_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_nicira_controller_role_reply_subtype_get( (of_nicira_controller_role_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_nicira_controller_role_reply_role_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_nicira_controller_role_reply_role_set( (of_nicira_controller_role_reply_t *) o, tmp);
	return;
}

void do_of_nicira_controller_role_reply_role_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_nicira_controller_role_reply_role_get( (of_nicira_controller_role_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_nicira_controller_role_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_nicira_controller_role_request_xid_set( (of_nicira_controller_role_request_t *) o, tmp);
	return;
}

void do_of_nicira_controller_role_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_nicira_controller_role_request_xid_get( (of_nicira_controller_role_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_nicira_controller_role_request_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_nicira_controller_role_request_experimenter_set( (of_nicira_controller_role_request_t *) o, tmp);
	return;
}

void do_of_nicira_controller_role_request_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_nicira_controller_role_request_experimenter_get( (of_nicira_controller_role_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_nicira_controller_role_request_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_nicira_controller_role_request_subtype_set( (of_nicira_controller_role_request_t *) o, tmp);
	return;
}

void do_of_nicira_controller_role_request_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_nicira_controller_role_request_subtype_get( (of_nicira_controller_role_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_nicira_controller_role_request_role_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_nicira_controller_role_request_role_set( (of_nicira_controller_role_request_t *) o, tmp);
	return;
}

void do_of_nicira_controller_role_request_role_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_nicira_controller_role_request_role_get( (of_nicira_controller_role_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_in_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_packet_in_xid_set( (of_packet_in_t *) o, tmp);
	return;
}

void do_of_packet_in_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_packet_in_xid_get( (of_packet_in_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_in_buffer_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_packet_in_buffer_id_set( (of_packet_in_t *) o, tmp);
	return;
}

void do_of_packet_in_buffer_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_packet_in_buffer_id_get( (of_packet_in_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_in_total_len_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_packet_in_total_len_set( (of_packet_in_t *) o, tmp);
	return;
}

void do_of_packet_in_total_len_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_packet_in_total_len_get( (of_packet_in_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_in_reason_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_packet_in_reason_set( (of_packet_in_t *) o, tmp);
	return;
}

void do_of_packet_in_reason_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_packet_in_reason_get( (of_packet_in_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_in_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_packet_in_table_id_set( (of_packet_in_t *) o, tmp);
	return;
}

void do_of_packet_in_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_packet_in_table_id_get( (of_packet_in_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_in_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_packet_in_cookie_set( (of_packet_in_t *) o, tmp);
	return;
}

void do_of_packet_in_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_packet_in_cookie_get( (of_packet_in_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_in_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_packet_in_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_packet_in_in_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_packet_in_in_port_set( (of_packet_in_t *) o, tmp);
	return;
}

void do_of_packet_in_in_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_packet_in_in_port_get( (of_packet_in_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_in_in_phy_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_packet_in_in_phy_port_set( (of_packet_in_t *) o, tmp);
	return;
}

void do_of_packet_in_in_phy_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_packet_in_in_phy_port_get( (of_packet_in_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_out_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_packet_out_xid_set( (of_packet_out_t *) o, tmp);
	return;
}

void do_of_packet_out_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_packet_out_xid_get( (of_packet_out_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_out_buffer_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_packet_out_buffer_id_set( (of_packet_out_t *) o, tmp);
	return;
}

void do_of_packet_out_buffer_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_packet_out_buffer_id_get( (of_packet_out_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_out_in_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_packet_out_in_port_set( (of_packet_out_t *) o, tmp);
	return;
}

void do_of_packet_out_in_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_packet_out_in_port_get( (of_packet_out_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_out_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_packet_out_actions_get( (of_packet_out_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_packet_out_actions_set( (of_packet_out_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_packet_out_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_packet_out_actions_get( (of_packet_out_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_desc_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_stats_reply_xid_set( (of_port_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_port_desc_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_stats_reply_xid_get( (of_port_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_port_desc_stats_reply_flags_set( (of_port_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_port_desc_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_port_desc_stats_reply_flags_get( (of_port_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_port_desc_t *tmp;
	tmp = of_port_desc_stats_reply_entries_get( (of_port_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_port_desc_stats_reply_entries_set( (of_port_desc_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_desc_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_port_desc_t *tmp;
	tmp = of_port_desc_stats_reply_entries_get( (of_port_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_desc_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_stats_request_xid_set( (of_port_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_port_desc_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_stats_request_xid_get( (of_port_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_port_desc_stats_request_flags_set( (of_port_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_port_desc_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_port_desc_stats_request_flags_get( (of_port_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_xid_set( (of_port_mod_t *) o, tmp);
	return;
}

void do_of_port_mod_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_xid_get( (of_port_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_port_mod_port_no_set( (of_port_mod_t *) o, tmp);
	return;
}

void do_of_port_mod_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_port_mod_port_no_get( (of_port_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_hw_addr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_port_mod_hw_addr_set( (of_port_mod_t *) o, tmp);
	return;
}

void do_of_port_mod_hw_addr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_port_mod_hw_addr_get( (of_port_mod_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_port_mod_config_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_config_set( (of_port_mod_t *) o, tmp);
	return;
}

void do_of_port_mod_config_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_config_get( (of_port_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_mask_set( (of_port_mod_t *) o, tmp);
	return;
}

void do_of_port_mod_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_mask_get( (of_port_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_port_mod_prop_t *tmp;
	tmp = of_port_mod_properties_get( (of_port_mod_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_port_mod_properties_set( (of_port_mod_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_mod_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_port_mod_prop_t *tmp;
	tmp = of_port_mod_properties_get( (of_port_mod_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_mod_advertise_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_advertise_set( (of_port_mod_t *) o, tmp);
	return;
}

void do_of_port_mod_advertise_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_advertise_get( (of_port_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_failed_error_msg_xid_set( (of_port_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_port_mod_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_failed_error_msg_xid_get( (of_port_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_port_mod_failed_error_msg_code_set( (of_port_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_port_mod_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_port_mod_failed_error_msg_code_get( (of_port_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_reply_xid_set( (of_port_stats_reply_t *) o, tmp);
	return;
}

void do_of_port_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_reply_xid_get( (of_port_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_port_stats_reply_flags_set( (of_port_stats_reply_t *) o, tmp);
	return;
}

void do_of_port_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_port_stats_reply_flags_get( (of_port_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_port_stats_entry_t *tmp;
	tmp = of_port_stats_reply_entries_get( (of_port_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_port_stats_reply_entries_set( (of_port_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_port_stats_entry_t *tmp;
	tmp = of_port_stats_reply_entries_get( (of_port_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_request_xid_set( (of_port_stats_request_t *) o, tmp);
	return;
}

void do_of_port_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_request_xid_get( (of_port_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_port_stats_request_flags_set( (of_port_stats_request_t *) o, tmp);
	return;
}

void do_of_port_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_port_stats_request_flags_get( (of_port_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_request_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_port_stats_request_port_no_set( (of_port_stats_request_t *) o, tmp);
	return;
}

void do_of_port_stats_request_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_port_stats_request_port_no_get( (of_port_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_status_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_status_xid_set( (of_port_status_t *) o, tmp);
	return;
}

void do_of_port_status_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_status_xid_get( (of_port_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_status_reason_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_port_status_reason_set( (of_port_status_t *) o, tmp);
	return;
}

void do_of_port_status_reason_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_port_status_reason_get( (of_port_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_status_desc_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_desc_t *tmp;
	tmp = of_port_status_desc_get( (of_port_status_t *) o);
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if(of_port_status_desc_set( (of_port_status_t *) o, tmp)){
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_status_desc_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_desc_t *tmp;
	tmp = of_port_status_desc_get( (of_port_status_t *) o);
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_desc_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_desc_stats_reply_xid_set( (of_queue_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_queue_desc_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_desc_stats_reply_xid_get( (of_queue_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_desc_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_queue_desc_stats_reply_flags_set( (of_queue_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_queue_desc_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_queue_desc_stats_reply_flags_get( (of_queue_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_desc_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_queue_desc_t *tmp;
	tmp = of_queue_desc_stats_reply_entries_get( (of_queue_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_queue_desc_stats_reply_entries_set( (of_queue_desc_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_desc_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_queue_desc_t *tmp;
	tmp = of_queue_desc_stats_reply_entries_get( (of_queue_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_desc_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_desc_stats_request_xid_set( (of_queue_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_queue_desc_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_desc_stats_request_xid_get( (of_queue_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_desc_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_queue_desc_stats_request_flags_set( (of_queue_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_queue_desc_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_queue_desc_stats_request_flags_get( (of_queue_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_get_config_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_get_config_reply_xid_set( (of_queue_get_config_reply_t *) o, tmp);
	return;
}

void do_of_queue_get_config_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_get_config_reply_xid_get( (of_queue_get_config_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_get_config_reply_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_queue_get_config_reply_port_set( (of_queue_get_config_reply_t *) o, tmp);
	return;
}

void do_of_queue_get_config_reply_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_queue_get_config_reply_port_get( (of_queue_get_config_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_get_config_reply_queues_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_packet_queue_t *tmp;
	tmp = of_queue_get_config_reply_queues_get( (of_queue_get_config_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_queue_get_config_reply_queues_set( (of_queue_get_config_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_get_config_reply_queues_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_packet_queue_t *tmp;
	tmp = of_queue_get_config_reply_queues_get( (of_queue_get_config_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_get_config_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_get_config_request_xid_set( (of_queue_get_config_request_t *) o, tmp);
	return;
}

void do_of_queue_get_config_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_get_config_request_xid_get( (of_queue_get_config_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_get_config_request_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_queue_get_config_request_port_set( (of_queue_get_config_request_t *) o, tmp);
	return;
}

void do_of_queue_get_config_request_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_queue_get_config_request_port_get( (of_queue_get_config_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_op_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_op_failed_error_msg_xid_set( (of_queue_op_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_queue_op_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_op_failed_error_msg_xid_get( (of_queue_op_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_op_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_queue_op_failed_error_msg_code_set( (of_queue_op_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_queue_op_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_queue_op_failed_error_msg_code_get( (of_queue_op_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_stats_reply_xid_set( (of_queue_stats_reply_t *) o, tmp);
	return;
}

void do_of_queue_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_stats_reply_xid_get( (of_queue_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_queue_stats_reply_flags_set( (of_queue_stats_reply_t *) o, tmp);
	return;
}

void do_of_queue_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_queue_stats_reply_flags_get( (of_queue_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_queue_stats_entry_t *tmp;
	tmp = of_queue_stats_reply_entries_get( (of_queue_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_queue_stats_reply_entries_set( (of_queue_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_queue_stats_entry_t *tmp;
	tmp = of_queue_stats_reply_entries_get( (of_queue_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_stats_request_xid_set( (of_queue_stats_request_t *) o, tmp);
	return;
}

void do_of_queue_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_stats_request_xid_get( (of_queue_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_queue_stats_request_flags_set( (of_queue_stats_request_t *) o, tmp);
	return;
}

void do_of_queue_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_queue_stats_request_flags_get( (of_queue_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_request_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_queue_stats_request_port_no_set( (of_queue_stats_request_t *) o, tmp);
	return;
}

void do_of_queue_stats_request_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_queue_stats_request_port_no_get( (of_queue_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_request_queue_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_stats_request_queue_id_set( (of_queue_stats_request_t *) o, tmp);
	return;
}

void do_of_queue_stats_request_queue_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_stats_request_queue_id_get( (of_queue_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_requestforward_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_requestforward_xid_set( (of_requestforward_t *) o, tmp);
	return;
}

void do_of_requestforward_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_requestforward_xid_get( (of_requestforward_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_requestforward_role_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_requestforward_role_set( (of_requestforward_t *) o, tmp);
	return;
}

void do_of_requestforward_role_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_requestforward_role_get( (of_requestforward_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_role_reply_xid_set( (of_role_reply_t *) o, tmp);
	return;
}

void do_of_role_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_role_reply_xid_get( (of_role_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_reply_role_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_role_reply_role_set( (of_role_reply_t *) o, tmp);
	return;
}

void do_of_role_reply_role_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_role_reply_role_get( (of_role_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_reply_generation_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_role_reply_generation_id_set( (of_role_reply_t *) o, tmp);
	return;
}

void do_of_role_reply_generation_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_role_reply_generation_id_get( (of_role_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_role_request_xid_set( (of_role_request_t *) o, tmp);
	return;
}

void do_of_role_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_role_request_xid_get( (of_role_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_request_role_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_role_request_role_set( (of_role_request_t *) o, tmp);
	return;
}

void do_of_role_request_role_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_role_request_role_get( (of_role_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_request_generation_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_role_request_generation_id_set( (of_role_request_t *) o, tmp);
	return;
}

void do_of_role_request_generation_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_role_request_generation_id_get( (of_role_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_request_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_role_request_failed_error_msg_xid_set( (of_role_request_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_role_request_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_role_request_failed_error_msg_xid_get( (of_role_request_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_request_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_role_request_failed_error_msg_code_set( (of_role_request_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_role_request_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_role_request_failed_error_msg_code_get( (of_role_request_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_status_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_role_status_xid_set( (of_role_status_t *) o, tmp);
	return;
}

void do_of_role_status_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_role_status_xid_get( (of_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_status_role_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_role_status_role_set( (of_role_status_t *) o, tmp);
	return;
}

void do_of_role_status_role_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_role_status_role_get( (of_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_status_reason_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_role_status_reason_set( (of_role_status_t *) o, tmp);
	return;
}

void do_of_role_status_reason_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_role_status_reason_get( (of_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_status_generation_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_role_status_generation_id_set( (of_role_status_t *) o, tmp);
	return;
}

void do_of_role_status_generation_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_role_status_generation_id_get( (of_role_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_role_status_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_role_prop_t *tmp;
	tmp = of_role_status_properties_get( (of_role_status_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_role_status_properties_set( (of_role_status_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_role_status_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_role_prop_t *tmp;
	tmp = of_role_status_properties_get( (of_role_status_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_set_config_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_set_config_xid_set( (of_set_config_t *) o, tmp);
	return;
}

void do_of_set_config_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_set_config_xid_get( (of_set_config_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_set_config_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_set_config_flags_set( (of_set_config_t *) o, tmp);
	return;
}

void do_of_set_config_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_set_config_flags_get( (of_set_config_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_set_config_miss_send_len_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_set_config_miss_send_len_set( (of_set_config_t *) o, tmp);
	return;
}

void do_of_set_config_miss_send_len_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_set_config_miss_send_len_get( (of_set_config_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_switch_config_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_switch_config_failed_error_msg_xid_set( (of_switch_config_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_switch_config_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_switch_config_failed_error_msg_xid_get( (of_switch_config_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_switch_config_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_switch_config_failed_error_msg_code_set( (of_switch_config_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_switch_config_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_switch_config_failed_error_msg_code_get( (of_switch_config_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_desc_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_desc_stats_reply_xid_set( (of_table_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_table_desc_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_desc_stats_reply_xid_get( (of_table_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_desc_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_table_desc_stats_reply_flags_set( (of_table_desc_stats_reply_t *) o, tmp);
	return;
}

void do_of_table_desc_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_table_desc_stats_reply_flags_get( (of_table_desc_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_desc_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_table_desc_t *tmp;
	tmp = of_table_desc_stats_reply_entries_get( (of_table_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_desc_stats_reply_entries_set( (of_table_desc_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_desc_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_table_desc_t *tmp;
	tmp = of_table_desc_stats_reply_entries_get( (of_table_desc_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_desc_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_desc_stats_request_xid_set( (of_table_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_table_desc_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_desc_stats_request_xid_get( (of_table_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_desc_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_table_desc_stats_request_flags_set( (of_table_desc_stats_request_t *) o, tmp);
	return;
}

void do_of_table_desc_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_table_desc_stats_request_flags_get( (of_table_desc_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_features_failed_error_msg_xid_set( (of_table_features_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_table_features_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_features_failed_error_msg_xid_get( (of_table_features_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_table_features_failed_error_msg_code_set( (of_table_features_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_table_features_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_table_features_failed_error_msg_code_get( (of_table_features_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_features_stats_reply_xid_set( (of_table_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_table_features_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_features_stats_reply_xid_get( (of_table_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_table_features_stats_reply_flags_set( (of_table_features_stats_reply_t *) o, tmp);
	return;
}

void do_of_table_features_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_table_features_stats_reply_flags_get( (of_table_features_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_table_features_t *tmp;
	tmp = of_table_features_stats_reply_entries_get( (of_table_features_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_features_stats_reply_entries_set( (of_table_features_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_features_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_table_features_t *tmp;
	tmp = of_table_features_stats_reply_entries_get( (of_table_features_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_features_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_features_stats_request_xid_set( (of_table_features_stats_request_t *) o, tmp);
	return;
}

void do_of_table_features_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_features_stats_request_xid_get( (of_table_features_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_table_features_stats_request_flags_set( (of_table_features_stats_request_t *) o, tmp);
	return;
}

void do_of_table_features_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_table_features_stats_request_flags_get( (of_table_features_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_stats_request_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_table_features_t *tmp;
	tmp = of_table_features_stats_request_entries_get( (of_table_features_stats_request_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_features_stats_request_entries_set( (of_table_features_stats_request_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_features_stats_request_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_table_features_t *tmp;
	tmp = of_table_features_stats_request_entries_get( (of_table_features_stats_request_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_mod_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_mod_xid_set( (of_table_mod_t *) o, tmp);
	return;
}

void do_of_table_mod_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_mod_xid_get( (of_table_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_mod_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_table_mod_table_id_set( (of_table_mod_t *) o, tmp);
	return;
}

void do_of_table_mod_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_table_mod_table_id_get( (of_table_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_mod_config_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_mod_config_set( (of_table_mod_t *) o, tmp);
	return;
}

void do_of_table_mod_config_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_mod_config_get( (of_table_mod_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_mod_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_table_mod_prop_t *tmp;
	tmp = of_table_mod_properties_get( (of_table_mod_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_mod_properties_set( (of_table_mod_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_mod_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_table_mod_prop_t *tmp;
	tmp = of_table_mod_properties_get( (of_table_mod_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_mod_failed_error_msg_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_mod_failed_error_msg_xid_set( (of_table_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_table_mod_failed_error_msg_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_mod_failed_error_msg_xid_get( (of_table_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_mod_failed_error_msg_code_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_table_mod_failed_error_msg_code_set( (of_table_mod_failed_error_msg_t *) o, tmp);
	return;
}

void do_of_table_mod_failed_error_msg_code_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_table_mod_failed_error_msg_code_get( (of_table_mod_failed_error_msg_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_reply_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_stats_reply_xid_set( (of_table_stats_reply_t *) o, tmp);
	return;
}

void do_of_table_stats_reply_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_stats_reply_xid_get( (of_table_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_reply_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_table_stats_reply_flags_set( (of_table_stats_reply_t *) o, tmp);
	return;
}

void do_of_table_stats_reply_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_table_stats_reply_flags_get( (of_table_stats_reply_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_reply_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_table_stats_entry_t *tmp;
	tmp = of_table_stats_reply_entries_get( (of_table_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_stats_reply_entries_set( (of_table_stats_reply_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_stats_reply_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_table_stats_entry_t *tmp;
	tmp = of_table_stats_reply_entries_get( (of_table_stats_reply_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_stats_request_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_stats_request_xid_set( (of_table_stats_request_t *) o, tmp);
	return;
}

void do_of_table_stats_request_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_stats_request_xid_get( (of_table_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_request_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_table_stats_request_flags_set( (of_table_stats_request_t *) o, tmp);
	return;
}

void do_of_table_stats_request_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_table_stats_request_flags_get( (of_table_stats_request_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_status_xid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_status_xid_set( (of_table_status_t *) o, tmp);
	return;
}

void do_of_table_status_xid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_status_xid_get( (of_table_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_status_role_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_status_role_set( (of_table_status_t *) o, tmp);
	return;
}

void do_of_table_status_role_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_status_role_get( (of_table_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_status_reason_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_table_status_reason_set( (of_table_status_t *) o, tmp);
	return;
}

void do_of_table_status_reason_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_table_status_reason_get( (of_table_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_status_table_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_table_desc_t *tmp;
	tmp = of_table_status_table_get( (of_table_status_t *) o);
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if(of_table_status_table_set( (of_table_status_t *) o, tmp)){
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_status_table_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_table_desc_t *tmp;
	tmp = of_table_status_table_get( (of_table_status_t *) o);
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_action_bsn_checksum_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_checksum_experimenter_set( (of_action_bsn_checksum_t *) o, tmp);
	return;
}

void do_of_action_bsn_checksum_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_checksum_experimenter_get( (of_action_bsn_checksum_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_checksum_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_checksum_subtype_set( (of_action_bsn_checksum_t *) o, tmp);
	return;
}

void do_of_action_bsn_checksum_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_checksum_subtype_get( (of_action_bsn_checksum_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_gentable_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_gentable_experimenter_set( (of_action_bsn_gentable_t *) o, tmp);
	return;
}

void do_of_action_bsn_gentable_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_gentable_experimenter_get( (of_action_bsn_gentable_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_gentable_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_gentable_subtype_set( (of_action_bsn_gentable_t *) o, tmp);
	return;
}

void do_of_action_bsn_gentable_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_gentable_subtype_get( (of_action_bsn_gentable_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_gentable_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_gentable_table_id_set( (of_action_bsn_gentable_t *) o, tmp);
	return;
}

void do_of_action_bsn_gentable_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_gentable_table_id_get( (of_action_bsn_gentable_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_gentable_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_action_bsn_gentable_key_get( (of_action_bsn_gentable_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_action_bsn_gentable_key_set( (of_action_bsn_gentable_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_action_bsn_gentable_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_action_bsn_gentable_key_get( (of_action_bsn_gentable_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_action_bsn_mirror_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_mirror_experimenter_set( (of_action_bsn_mirror_t *) o, tmp);
	return;
}

void do_of_action_bsn_mirror_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_mirror_experimenter_get( (of_action_bsn_mirror_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_mirror_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_mirror_subtype_set( (of_action_bsn_mirror_t *) o, tmp);
	return;
}

void do_of_action_bsn_mirror_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_mirror_subtype_get( (of_action_bsn_mirror_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_mirror_dest_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_mirror_dest_port_set( (of_action_bsn_mirror_t *) o, tmp);
	return;
}

void do_of_action_bsn_mirror_dest_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_mirror_dest_port_get( (of_action_bsn_mirror_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_mirror_vlan_tag_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_mirror_vlan_tag_set( (of_action_bsn_mirror_t *) o, tmp);
	return;
}

void do_of_action_bsn_mirror_vlan_tag_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_mirror_vlan_tag_get( (of_action_bsn_mirror_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_mirror_copy_stage_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_action_bsn_mirror_copy_stage_set( (of_action_bsn_mirror_t *) o, tmp);
	return;
}

void do_of_action_bsn_mirror_copy_stage_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_action_bsn_mirror_copy_stage_get( (of_action_bsn_mirror_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_set_tunnel_dst_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_set_tunnel_dst_experimenter_set( (of_action_bsn_set_tunnel_dst_t *) o, tmp);
	return;
}

void do_of_action_bsn_set_tunnel_dst_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_set_tunnel_dst_experimenter_get( (of_action_bsn_set_tunnel_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_set_tunnel_dst_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_set_tunnel_dst_subtype_set( (of_action_bsn_set_tunnel_dst_t *) o, tmp);
	return;
}

void do_of_action_bsn_set_tunnel_dst_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_set_tunnel_dst_subtype_get( (of_action_bsn_set_tunnel_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_bsn_set_tunnel_dst_dst_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_bsn_set_tunnel_dst_dst_set( (of_action_bsn_set_tunnel_dst_t *) o, tmp);
	return;
}

void do_of_action_bsn_set_tunnel_dst_dst_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_bsn_set_tunnel_dst_dst_get( (of_action_bsn_set_tunnel_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_enqueue_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_action_enqueue_port_set( (of_action_enqueue_t *) o, tmp);
	return;
}

void do_of_action_enqueue_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_action_enqueue_port_get( (of_action_enqueue_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_enqueue_queue_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_enqueue_queue_id_set( (of_action_enqueue_t *) o, tmp);
	return;
}

void do_of_action_enqueue_queue_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_enqueue_queue_id_get( (of_action_enqueue_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_group_group_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_group_group_id_set( (of_action_group_t *) o, tmp);
	return;
}

void do_of_action_group_group_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_group_group_id_get( (of_action_group_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_bsn_checksum_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_id_bsn_checksum_experimenter_set( (of_action_id_bsn_checksum_t *) o, tmp);
	return;
}

void do_of_action_id_bsn_checksum_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_id_bsn_checksum_experimenter_get( (of_action_id_bsn_checksum_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_bsn_checksum_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_id_bsn_checksum_subtype_set( (of_action_id_bsn_checksum_t *) o, tmp);
	return;
}

void do_of_action_id_bsn_checksum_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_id_bsn_checksum_subtype_get( (of_action_id_bsn_checksum_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_bsn_gentable_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_id_bsn_gentable_experimenter_set( (of_action_id_bsn_gentable_t *) o, tmp);
	return;
}

void do_of_action_id_bsn_gentable_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_id_bsn_gentable_experimenter_get( (of_action_id_bsn_gentable_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_bsn_gentable_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_id_bsn_gentable_subtype_set( (of_action_id_bsn_gentable_t *) o, tmp);
	return;
}

void do_of_action_id_bsn_gentable_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_id_bsn_gentable_subtype_get( (of_action_id_bsn_gentable_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_bsn_mirror_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_id_bsn_mirror_experimenter_set( (of_action_id_bsn_mirror_t *) o, tmp);
	return;
}

void do_of_action_id_bsn_mirror_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_id_bsn_mirror_experimenter_get( (of_action_id_bsn_mirror_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_bsn_mirror_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_id_bsn_mirror_subtype_set( (of_action_id_bsn_mirror_t *) o, tmp);
	return;
}

void do_of_action_id_bsn_mirror_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_id_bsn_mirror_subtype_get( (of_action_id_bsn_mirror_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_bsn_set_tunnel_dst_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_id_bsn_set_tunnel_dst_experimenter_set( (of_action_id_bsn_set_tunnel_dst_t *) o, tmp);
	return;
}

void do_of_action_id_bsn_set_tunnel_dst_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_id_bsn_set_tunnel_dst_experimenter_get( (of_action_id_bsn_set_tunnel_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_bsn_set_tunnel_dst_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_id_bsn_set_tunnel_dst_subtype_set( (of_action_id_bsn_set_tunnel_dst_t *) o, tmp);
	return;
}

void do_of_action_id_bsn_set_tunnel_dst_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_id_bsn_set_tunnel_dst_subtype_get( (of_action_id_bsn_set_tunnel_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_nicira_dec_ttl_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_id_nicira_dec_ttl_experimenter_set( (of_action_id_nicira_dec_ttl_t *) o, tmp);
	return;
}

void do_of_action_id_nicira_dec_ttl_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_id_nicira_dec_ttl_experimenter_get( (of_action_id_nicira_dec_ttl_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_id_nicira_dec_ttl_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_id_nicira_dec_ttl_subtype_set( (of_action_id_nicira_dec_ttl_t *) o, tmp);
	return;
}

void do_of_action_id_nicira_dec_ttl_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_id_nicira_dec_ttl_subtype_get( (of_action_id_nicira_dec_ttl_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_nicira_dec_ttl_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_nicira_dec_ttl_experimenter_set( (of_action_nicira_dec_ttl_t *) o, tmp);
	return;
}

void do_of_action_nicira_dec_ttl_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_nicira_dec_ttl_experimenter_get( (of_action_nicira_dec_ttl_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_nicira_dec_ttl_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_nicira_dec_ttl_subtype_set( (of_action_nicira_dec_ttl_t *) o, tmp);
	return;
}

void do_of_action_nicira_dec_ttl_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_nicira_dec_ttl_subtype_get( (of_action_nicira_dec_ttl_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_output_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_action_output_port_set( (of_action_output_t *) o, tmp);
	return;
}

void do_of_action_output_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_action_output_port_get( (of_action_output_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_output_max_len_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_output_max_len_set( (of_action_output_t *) o, tmp);
	return;
}

void do_of_action_output_max_len_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_output_max_len_get( (of_action_output_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_pop_mpls_ethertype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_pop_mpls_ethertype_set( (of_action_pop_mpls_t *) o, tmp);
	return;
}

void do_of_action_pop_mpls_ethertype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_pop_mpls_ethertype_get( (of_action_pop_mpls_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_push_mpls_ethertype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_push_mpls_ethertype_set( (of_action_push_mpls_t *) o, tmp);
	return;
}

void do_of_action_push_mpls_ethertype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_push_mpls_ethertype_get( (of_action_push_mpls_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_push_pbb_ethertype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_push_pbb_ethertype_set( (of_action_push_pbb_t *) o, tmp);
	return;
}

void do_of_action_push_pbb_ethertype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_push_pbb_ethertype_get( (of_action_push_pbb_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_push_vlan_ethertype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_push_vlan_ethertype_set( (of_action_push_vlan_t *) o, tmp);
	return;
}

void do_of_action_push_vlan_ethertype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_push_vlan_ethertype_get( (of_action_push_vlan_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_dl_dst_dl_addr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_action_set_dl_dst_dl_addr_set( (of_action_set_dl_dst_t *) o, tmp);
	return;
}

void do_of_action_set_dl_dst_dl_addr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_action_set_dl_dst_dl_addr_get( (of_action_set_dl_dst_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_action_set_dl_src_dl_addr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_action_set_dl_src_dl_addr_set( (of_action_set_dl_src_t *) o, tmp);
	return;
}

void do_of_action_set_dl_src_dl_addr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_action_set_dl_src_dl_addr_get( (of_action_set_dl_src_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_action_set_field_field_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_oxm_t *tmp;
	tmp = of_action_set_field_field_get( (of_action_set_field_t *) o);
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if(of_action_set_field_field_set( (of_action_set_field_t *) o, tmp)){
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_action_set_field_field_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_oxm_t *tmp;
	tmp = of_action_set_field_field_get( (of_action_set_field_t *) o);
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_action_set_mpls_label_mpls_label_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_set_mpls_label_mpls_label_set( (of_action_set_mpls_label_t *) o, tmp);
	return;
}

void do_of_action_set_mpls_label_mpls_label_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_set_mpls_label_mpls_label_get( (of_action_set_mpls_label_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_mpls_tc_mpls_tc_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_action_set_mpls_tc_mpls_tc_set( (of_action_set_mpls_tc_t *) o, tmp);
	return;
}

void do_of_action_set_mpls_tc_mpls_tc_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_action_set_mpls_tc_mpls_tc_get( (of_action_set_mpls_tc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_mpls_ttl_mpls_ttl_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_action_set_mpls_ttl_mpls_ttl_set( (of_action_set_mpls_ttl_t *) o, tmp);
	return;
}

void do_of_action_set_mpls_ttl_mpls_ttl_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_action_set_mpls_ttl_mpls_ttl_get( (of_action_set_mpls_ttl_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_nw_dst_nw_addr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_set_nw_dst_nw_addr_set( (of_action_set_nw_dst_t *) o, tmp);
	return;
}

void do_of_action_set_nw_dst_nw_addr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_set_nw_dst_nw_addr_get( (of_action_set_nw_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_nw_ecn_nw_ecn_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_action_set_nw_ecn_nw_ecn_set( (of_action_set_nw_ecn_t *) o, tmp);
	return;
}

void do_of_action_set_nw_ecn_nw_ecn_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_action_set_nw_ecn_nw_ecn_get( (of_action_set_nw_ecn_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_nw_src_nw_addr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_set_nw_src_nw_addr_set( (of_action_set_nw_src_t *) o, tmp);
	return;
}

void do_of_action_set_nw_src_nw_addr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_set_nw_src_nw_addr_get( (of_action_set_nw_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_nw_tos_nw_tos_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_action_set_nw_tos_nw_tos_set( (of_action_set_nw_tos_t *) o, tmp);
	return;
}

void do_of_action_set_nw_tos_nw_tos_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_action_set_nw_tos_nw_tos_get( (of_action_set_nw_tos_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_nw_ttl_nw_ttl_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_action_set_nw_ttl_nw_ttl_set( (of_action_set_nw_ttl_t *) o, tmp);
	return;
}

void do_of_action_set_nw_ttl_nw_ttl_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_action_set_nw_ttl_nw_ttl_get( (of_action_set_nw_ttl_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_queue_queue_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_action_set_queue_queue_id_set( (of_action_set_queue_t *) o, tmp);
	return;
}

void do_of_action_set_queue_queue_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_action_set_queue_queue_id_get( (of_action_set_queue_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_tp_dst_tp_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_set_tp_dst_tp_port_set( (of_action_set_tp_dst_t *) o, tmp);
	return;
}

void do_of_action_set_tp_dst_tp_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_set_tp_dst_tp_port_get( (of_action_set_tp_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_tp_src_tp_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_set_tp_src_tp_port_set( (of_action_set_tp_src_t *) o, tmp);
	return;
}

void do_of_action_set_tp_src_tp_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_set_tp_src_tp_port_get( (of_action_set_tp_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_vlan_pcp_vlan_pcp_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_action_set_vlan_pcp_vlan_pcp_set( (of_action_set_vlan_pcp_t *) o, tmp);
	return;
}

void do_of_action_set_vlan_pcp_vlan_pcp_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_action_set_vlan_pcp_vlan_pcp_get( (of_action_set_vlan_pcp_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_action_set_vlan_vid_vlan_vid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_action_set_vlan_vid_vlan_vid_set( (of_action_set_vlan_vid_t *) o, tmp);
	return;
}

void do_of_action_set_vlan_vid_vlan_vid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_action_set_vlan_vid_vlan_vid_get( (of_action_set_vlan_vid_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_flow_removed_master_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_flow_removed_master_mask_set( (of_async_config_prop_flow_removed_master_t *) o, tmp);
	return;
}

void do_of_async_config_prop_flow_removed_master_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_flow_removed_master_mask_get( (of_async_config_prop_flow_removed_master_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_flow_removed_slave_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_flow_removed_slave_mask_set( (of_async_config_prop_flow_removed_slave_t *) o, tmp);
	return;
}

void do_of_async_config_prop_flow_removed_slave_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_flow_removed_slave_mask_get( (of_async_config_prop_flow_removed_slave_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_packet_in_master_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_packet_in_master_mask_set( (of_async_config_prop_packet_in_master_t *) o, tmp);
	return;
}

void do_of_async_config_prop_packet_in_master_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_packet_in_master_mask_get( (of_async_config_prop_packet_in_master_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_packet_in_slave_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_packet_in_slave_mask_set( (of_async_config_prop_packet_in_slave_t *) o, tmp);
	return;
}

void do_of_async_config_prop_packet_in_slave_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_packet_in_slave_mask_get( (of_async_config_prop_packet_in_slave_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_port_status_master_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_port_status_master_mask_set( (of_async_config_prop_port_status_master_t *) o, tmp);
	return;
}

void do_of_async_config_prop_port_status_master_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_port_status_master_mask_get( (of_async_config_prop_port_status_master_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_port_status_slave_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_port_status_slave_mask_set( (of_async_config_prop_port_status_slave_t *) o, tmp);
	return;
}

void do_of_async_config_prop_port_status_slave_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_port_status_slave_mask_get( (of_async_config_prop_port_status_slave_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_requestforward_master_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_requestforward_master_mask_set( (of_async_config_prop_requestforward_master_t *) o, tmp);
	return;
}

void do_of_async_config_prop_requestforward_master_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_requestforward_master_mask_get( (of_async_config_prop_requestforward_master_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_requestforward_slave_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_requestforward_slave_mask_set( (of_async_config_prop_requestforward_slave_t *) o, tmp);
	return;
}

void do_of_async_config_prop_requestforward_slave_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_requestforward_slave_mask_get( (of_async_config_prop_requestforward_slave_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_role_status_master_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_role_status_master_mask_set( (of_async_config_prop_role_status_master_t *) o, tmp);
	return;
}

void do_of_async_config_prop_role_status_master_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_role_status_master_mask_get( (of_async_config_prop_role_status_master_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_role_status_slave_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_role_status_slave_mask_set( (of_async_config_prop_role_status_slave_t *) o, tmp);
	return;
}

void do_of_async_config_prop_role_status_slave_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_role_status_slave_mask_get( (of_async_config_prop_role_status_slave_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_table_status_master_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_table_status_master_mask_set( (of_async_config_prop_table_status_master_t *) o, tmp);
	return;
}

void do_of_async_config_prop_table_status_master_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_table_status_master_mask_get( (of_async_config_prop_table_status_master_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_async_config_prop_table_status_slave_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_async_config_prop_table_status_slave_mask_set( (of_async_config_prop_table_status_slave_t *) o, tmp);
	return;
}

void do_of_async_config_prop_table_status_slave_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_async_config_prop_table_status_slave_mask_get( (of_async_config_prop_table_status_slave_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_controller_connection_state_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_controller_connection_state_set( (of_bsn_controller_connection_t *) o, tmp);
	return;
}

void do_of_bsn_controller_connection_state_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_controller_connection_state_get( (of_bsn_controller_connection_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_controller_connection_auxiliary_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_controller_connection_auxiliary_id_set( (of_bsn_controller_connection_t *) o, tmp);
	return;
}

void do_of_bsn_controller_connection_auxiliary_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_controller_connection_auxiliary_id_get( (of_bsn_controller_connection_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_controller_connection_role_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_controller_connection_role_set( (of_bsn_controller_connection_t *) o, tmp);
	return;
}

void do_of_bsn_controller_connection_role_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_controller_connection_role_get( (of_bsn_controller_connection_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_desc_stats_entry_counter_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_debug_counter_desc_stats_entry_counter_id_set( (of_bsn_debug_counter_desc_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_desc_stats_entry_counter_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_debug_counter_desc_stats_entry_counter_id_get( (of_bsn_debug_counter_desc_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_entry_counter_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_entry_counter_id_set( (of_bsn_debug_counter_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_entry_counter_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_debug_counter_stats_entry_counter_id_get( (of_bsn_debug_counter_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_debug_counter_stats_entry_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_debug_counter_stats_entry_value_set( (of_bsn_debug_counter_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_debug_counter_stats_entry_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_debug_counter_stats_entry_value_get( (of_bsn_debug_counter_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_entry_checksum_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_flow_checksum_bucket_stats_entry_checksum_set( (of_bsn_flow_checksum_bucket_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_flow_checksum_bucket_stats_entry_checksum_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_flow_checksum_bucket_stats_entry_checksum_get( (of_bsn_flow_checksum_bucket_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_generic_stats_entry_tlvs_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_generic_stats_entry_tlvs_get( (of_bsn_generic_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_generic_stats_entry_tlvs_set( (of_bsn_generic_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_generic_stats_entry_tlvs_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_generic_stats_entry_tlvs_get( (of_bsn_generic_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_entry_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_entry_table_id_set( (of_bsn_gentable_desc_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_entry_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_desc_stats_entry_table_id_get( (of_bsn_gentable_desc_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_entry_buckets_size_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_entry_buckets_size_set( (of_bsn_gentable_desc_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_entry_buckets_size_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_desc_stats_entry_buckets_size_get( (of_bsn_gentable_desc_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_desc_stats_entry_max_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_desc_stats_entry_max_entries_set( (of_bsn_gentable_desc_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_desc_stats_entry_max_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_desc_stats_entry_max_entries_get( (of_bsn_gentable_desc_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_entry_desc_stats_entry_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_desc_stats_entry_key_get( (of_bsn_gentable_entry_desc_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_entry_desc_stats_entry_key_set( (of_bsn_gentable_entry_desc_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_entry_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_desc_stats_entry_key_get( (of_bsn_gentable_entry_desc_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_entry_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_desc_stats_entry_value_get( (of_bsn_gentable_entry_desc_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_entry_desc_stats_entry_value_set( (of_bsn_gentable_entry_desc_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_desc_stats_entry_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_desc_stats_entry_value_get( (of_bsn_gentable_entry_desc_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_entry_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_stats_entry_key_get( (of_bsn_gentable_entry_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_entry_stats_entry_key_set( (of_bsn_gentable_entry_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_entry_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_stats_entry_key_get( (of_bsn_gentable_entry_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_entry_stats_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_stats_entry_stats_get( (of_bsn_gentable_entry_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_gentable_entry_stats_entry_stats_set( (of_bsn_gentable_entry_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_entry_stats_entry_stats_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_gentable_entry_stats_entry_stats_get( (of_bsn_gentable_entry_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_gentable_stats_entry_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_gentable_stats_entry_table_id_set( (of_bsn_gentable_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_entry_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_gentable_stats_entry_table_id_get( (of_bsn_gentable_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_gentable_stats_entry_entry_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_gentable_stats_entry_entry_count_set( (of_bsn_gentable_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_gentable_stats_entry_entry_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_gentable_stats_entry_entry_count_get( (of_bsn_gentable_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_interface_ipv4_addr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_interface_ipv4_addr_set( (of_bsn_interface_t *) o, tmp);
	return;
}

void do_of_bsn_interface_ipv4_addr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_interface_ipv4_addr_get( (of_bsn_interface_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_interface_ipv4_netmask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_interface_ipv4_netmask_set( (of_bsn_interface_t *) o, tmp);
	return;
}

void do_of_bsn_interface_ipv4_netmask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_interface_ipv4_netmask_get( (of_bsn_interface_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_port_no_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_lacp_stats_entry_port_no_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_actor_sys_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_actor_sys_priority_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_actor_sys_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_entry_actor_sys_priority_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_actor_port_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_actor_port_priority_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_actor_port_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_entry_actor_port_priority_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_actor_port_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_actor_port_num_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_actor_port_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_entry_actor_port_num_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_actor_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_actor_key_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_actor_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_entry_actor_key_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_convergence_status_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_convergence_status_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_convergence_status_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_lacp_stats_entry_convergence_status_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_partner_sys_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_partner_sys_priority_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_partner_sys_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_entry_partner_sys_priority_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_partner_port_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_partner_port_priority_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_partner_port_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_entry_partner_port_priority_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_partner_port_num_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_partner_port_num_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_partner_port_num_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_entry_partner_port_num_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_lacp_stats_entry_partner_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_lacp_stats_entry_partner_key_set( (of_bsn_lacp_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_lacp_stats_entry_partner_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_lacp_stats_entry_partner_key_get( (of_bsn_lacp_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_entry_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_port_counter_stats_entry_port_no_set( (of_bsn_port_counter_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_port_counter_stats_entry_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_port_counter_stats_entry_port_no_get( (of_bsn_port_counter_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_port_counter_stats_entry_values_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint64_t *tmp;
	tmp = of_bsn_port_counter_stats_entry_values_get( (of_bsn_port_counter_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_port_counter_stats_entry_values_set( (of_bsn_port_counter_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_port_counter_stats_entry_values_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint64_t *tmp;
	tmp = of_bsn_port_counter_stats_entry_values_get( (of_bsn_port_counter_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_table_checksum_stats_entry_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_entry_table_id_set( (of_bsn_table_checksum_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_entry_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_table_checksum_stats_entry_table_id_get( (of_bsn_table_checksum_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_table_checksum_stats_entry_checksum_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_table_checksum_stats_entry_checksum_set( (of_bsn_table_checksum_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_table_checksum_stats_entry_checksum_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_table_checksum_stats_entry_checksum_get( (of_bsn_table_checksum_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_actor_key_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_actor_key_value_set( (of_bsn_tlv_actor_key_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_actor_key_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_actor_key_value_get( (of_bsn_tlv_actor_key_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_actor_port_num_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_actor_port_num_value_set( (of_bsn_tlv_actor_port_num_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_actor_port_num_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_actor_port_num_value_get( (of_bsn_tlv_actor_port_num_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_actor_port_priority_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_actor_port_priority_value_set( (of_bsn_tlv_actor_port_priority_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_actor_port_priority_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_actor_port_priority_value_get( (of_bsn_tlv_actor_port_priority_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_actor_state_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_tlv_actor_state_value_set( (of_bsn_tlv_actor_state_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_actor_state_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_tlv_actor_state_value_get( (of_bsn_tlv_actor_state_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_actor_system_priority_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_actor_system_priority_value_set( (of_bsn_tlv_actor_system_priority_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_actor_system_priority_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_actor_system_priority_value_get( (of_bsn_tlv_actor_system_priority_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_broadcast_query_timeout_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_broadcast_query_timeout_value_set( (of_bsn_tlv_broadcast_query_timeout_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_broadcast_query_timeout_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_broadcast_query_timeout_value_get( (of_bsn_tlv_broadcast_query_timeout_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_bucket_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_tlv_bucket_value_get( (of_bsn_tlv_bucket_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_tlv_bucket_value_set( (of_bsn_tlv_bucket_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_tlv_bucket_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_tlv_bucket_value_get( (of_bsn_tlv_bucket_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_tlv_convergence_status_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_tlv_convergence_status_value_set( (of_bsn_tlv_convergence_status_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_convergence_status_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_tlv_convergence_status_value_get( (of_bsn_tlv_convergence_status_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_crc_enabled_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_tlv_crc_enabled_value_set( (of_bsn_tlv_crc_enabled_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_crc_enabled_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_tlv_crc_enabled_value_get( (of_bsn_tlv_crc_enabled_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_external_gateway_ip_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_tlv_external_gateway_ip_value_set( (of_bsn_tlv_external_gateway_ip_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_external_gateway_ip_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_tlv_external_gateway_ip_value_get( (of_bsn_tlv_external_gateway_ip_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_external_ip_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_tlv_external_ip_value_set( (of_bsn_tlv_external_ip_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_external_ip_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_tlv_external_ip_value_get( (of_bsn_tlv_external_ip_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_external_netmask_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_tlv_external_netmask_value_set( (of_bsn_tlv_external_netmask_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_external_netmask_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_tlv_external_netmask_value_get( (of_bsn_tlv_external_netmask_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_header_size_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_header_size_value_set( (of_bsn_tlv_header_size_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_header_size_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_header_size_value_get( (of_bsn_tlv_header_size_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_icmp_code_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_tlv_icmp_code_value_set( (of_bsn_tlv_icmp_code_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_icmp_code_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_tlv_icmp_code_value_get( (of_bsn_tlv_icmp_code_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_icmp_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_icmp_id_value_set( (of_bsn_tlv_icmp_id_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_icmp_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_icmp_id_value_get( (of_bsn_tlv_icmp_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_icmp_type_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_tlv_icmp_type_value_set( (of_bsn_tlv_icmp_type_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_icmp_type_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_tlv_icmp_type_value_get( (of_bsn_tlv_icmp_type_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_idle_time_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_tlv_idle_time_value_set( (of_bsn_tlv_idle_time_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_idle_time_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_tlv_idle_time_value_get( (of_bsn_tlv_idle_time_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_idle_timeout_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_idle_timeout_value_set( (of_bsn_tlv_idle_timeout_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_idle_timeout_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_idle_timeout_value_get( (of_bsn_tlv_idle_timeout_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_interval_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_interval_value_set( (of_bsn_tlv_interval_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_interval_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_interval_value_get( (of_bsn_tlv_interval_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_ip_proto_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_tlv_ip_proto_value_set( (of_bsn_tlv_ip_proto_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_ip_proto_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_tlv_ip_proto_value_get( (of_bsn_tlv_ip_proto_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_ipv4_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_tlv_ipv4_value_set( (of_bsn_tlv_ipv4_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_ipv4_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_tlv_ipv4_value_get( (of_bsn_tlv_ipv4_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_ipv4_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_tlv_ipv4_dst_value_set( (of_bsn_tlv_ipv4_dst_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_ipv4_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_tlv_ipv4_dst_value_get( (of_bsn_tlv_ipv4_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_ipv4_netmask_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_tlv_ipv4_netmask_value_set( (of_bsn_tlv_ipv4_netmask_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_ipv4_netmask_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_tlv_ipv4_netmask_value_get( (of_bsn_tlv_ipv4_netmask_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_ipv4_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_tlv_ipv4_src_value_set( (of_bsn_tlv_ipv4_src_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_ipv4_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_tlv_ipv4_src_value_get( (of_bsn_tlv_ipv4_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_miss_packets_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_tlv_miss_packets_value_set( (of_bsn_tlv_miss_packets_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_miss_packets_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_tlv_miss_packets_value_get( (of_bsn_tlv_miss_packets_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_mpls_control_word_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_tlv_mpls_control_word_value_set( (of_bsn_tlv_mpls_control_word_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_mpls_control_word_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_tlv_mpls_control_word_value_get( (of_bsn_tlv_mpls_control_word_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_mpls_label_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_mpls_label_value_set( (of_bsn_tlv_mpls_label_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_mpls_label_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_mpls_label_value_get( (of_bsn_tlv_mpls_label_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_mpls_sequenced_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_tlv_mpls_sequenced_value_set( (of_bsn_tlv_mpls_sequenced_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_mpls_sequenced_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_tlv_mpls_sequenced_value_get( (of_bsn_tlv_mpls_sequenced_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_partner_key_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_partner_key_value_set( (of_bsn_tlv_partner_key_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_partner_key_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_partner_key_value_get( (of_bsn_tlv_partner_key_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_partner_port_num_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_partner_port_num_value_set( (of_bsn_tlv_partner_port_num_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_partner_port_num_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_partner_port_num_value_get( (of_bsn_tlv_partner_port_num_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_partner_port_priority_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_partner_port_priority_value_set( (of_bsn_tlv_partner_port_priority_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_partner_port_priority_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_partner_port_priority_value_get( (of_bsn_tlv_partner_port_priority_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_partner_state_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_tlv_partner_state_value_set( (of_bsn_tlv_partner_state_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_partner_state_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_tlv_partner_state_value_get( (of_bsn_tlv_partner_state_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_partner_system_priority_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_partner_system_priority_value_set( (of_bsn_tlv_partner_system_priority_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_partner_system_priority_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_partner_system_priority_value_get( (of_bsn_tlv_partner_system_priority_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_port_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_tlv_port_value_set( (of_bsn_tlv_port_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_port_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_tlv_port_value_get( (of_bsn_tlv_port_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_priority_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_priority_value_set( (of_bsn_tlv_priority_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_priority_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_priority_value_get( (of_bsn_tlv_priority_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_queue_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_queue_id_value_set( (of_bsn_tlv_queue_id_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_queue_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_queue_id_value_get( (of_bsn_tlv_queue_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_queue_weight_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_queue_weight_value_set( (of_bsn_tlv_queue_weight_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_queue_weight_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_queue_weight_value_get( (of_bsn_tlv_queue_weight_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_reference_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_reference_table_id_set( (of_bsn_tlv_reference_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_reference_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_reference_table_id_get( (of_bsn_tlv_reference_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_reference_key_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_tlv_reference_key_get( (of_bsn_tlv_reference_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_tlv_reference_key_set( (of_bsn_tlv_reference_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_tlv_reference_key_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bsn_tlv_t *tmp;
	tmp = of_bsn_tlv_reference_key_get( (of_bsn_tlv_reference_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_tlv_reply_packets_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_tlv_reply_packets_value_set( (of_bsn_tlv_reply_packets_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_reply_packets_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_tlv_reply_packets_value_get( (of_bsn_tlv_reply_packets_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_request_packets_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_tlv_request_packets_value_set( (of_bsn_tlv_request_packets_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_request_packets_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_tlv_request_packets_value_get( (of_bsn_tlv_request_packets_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_rx_bytes_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_tlv_rx_bytes_value_set( (of_bsn_tlv_rx_bytes_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_rx_bytes_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_tlv_rx_bytes_value_get( (of_bsn_tlv_rx_bytes_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_rx_packets_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_tlv_rx_packets_value_set( (of_bsn_tlv_rx_packets_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_rx_packets_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_tlv_rx_packets_value_get( (of_bsn_tlv_rx_packets_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_sampling_rate_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_sampling_rate_value_set( (of_bsn_tlv_sampling_rate_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_sampling_rate_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_sampling_rate_value_get( (of_bsn_tlv_sampling_rate_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_sub_agent_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_sub_agent_id_value_set( (of_bsn_tlv_sub_agent_id_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_sub_agent_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_sub_agent_id_value_get( (of_bsn_tlv_sub_agent_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_tcp_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_tcp_dst_value_set( (of_bsn_tlv_tcp_dst_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_tcp_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_tcp_dst_value_get( (of_bsn_tlv_tcp_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_tcp_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_tcp_src_value_set( (of_bsn_tlv_tcp_src_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_tcp_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_tcp_src_value_get( (of_bsn_tlv_tcp_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_tx_bytes_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_tlv_tx_bytes_value_set( (of_bsn_tlv_tx_bytes_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_tx_bytes_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_tlv_tx_bytes_value_get( (of_bsn_tlv_tx_bytes_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_tx_packets_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bsn_tlv_tx_packets_value_set( (of_bsn_tlv_tx_packets_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_tx_packets_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bsn_tlv_tx_packets_value_get( (of_bsn_tlv_tx_packets_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_udf_anchor_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_udf_anchor_value_set( (of_bsn_tlv_udf_anchor_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_udf_anchor_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_udf_anchor_value_get( (of_bsn_tlv_udf_anchor_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_udf_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_udf_id_value_set( (of_bsn_tlv_udf_id_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_udf_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_udf_id_value_get( (of_bsn_tlv_udf_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_udf_length_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_udf_length_value_set( (of_bsn_tlv_udf_length_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_udf_length_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_udf_length_value_get( (of_bsn_tlv_udf_length_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_udf_offset_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_udf_offset_value_set( (of_bsn_tlv_udf_offset_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_udf_offset_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_udf_offset_value_get( (of_bsn_tlv_udf_offset_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_udp_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_udp_dst_value_set( (of_bsn_tlv_udp_dst_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_udp_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_udp_dst_value_get( (of_bsn_tlv_udp_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_udp_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_udp_src_value_set( (of_bsn_tlv_udp_src_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_udp_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_udp_src_value_get( (of_bsn_tlv_udp_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_unicast_query_timeout_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_unicast_query_timeout_value_set( (of_bsn_tlv_unicast_query_timeout_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_unicast_query_timeout_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_unicast_query_timeout_value_get( (of_bsn_tlv_unicast_query_timeout_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_vlan_vid_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_tlv_vlan_vid_value_set( (of_bsn_tlv_vlan_vid_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_vlan_vid_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_tlv_vlan_vid_value_get( (of_bsn_tlv_vlan_vid_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_tlv_vrf_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_tlv_vrf_value_set( (of_bsn_tlv_vrf_t *) o, tmp);
	return;
}

void do_of_bsn_tlv_vrf_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_tlv_vrf_value_get( (of_bsn_tlv_vrf_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_entry_vlan_vid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vlan_counter_stats_entry_vlan_vid_set( (of_bsn_vlan_counter_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_entry_vlan_vid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vlan_counter_stats_entry_vlan_vid_get( (of_bsn_vlan_counter_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vlan_counter_stats_entry_values_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint64_t *tmp;
	tmp = of_bsn_vlan_counter_stats_entry_values_get( (of_bsn_vlan_counter_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_vlan_counter_stats_entry_values_set( (of_bsn_vlan_counter_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_vlan_counter_stats_entry_values_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint64_t *tmp;
	tmp = of_bsn_vlan_counter_stats_entry_values_get( (of_bsn_vlan_counter_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_vport_l2gre_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vport_l2gre_flags_set( (of_bsn_vport_l2gre_t *) o, tmp);
	return;
}

void do_of_bsn_vport_l2gre_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vport_l2gre_flags_get( (of_bsn_vport_l2gre_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_l2gre_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_vport_l2gre_port_no_set( (of_bsn_vport_l2gre_t *) o, tmp);
	return;
}

void do_of_bsn_vport_l2gre_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_vport_l2gre_port_no_get( (of_bsn_vport_l2gre_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_l2gre_loopback_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bsn_vport_l2gre_loopback_port_no_set( (of_bsn_vport_l2gre_t *) o, tmp);
	return;
}

void do_of_bsn_vport_l2gre_loopback_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bsn_vport_l2gre_loopback_port_no_get( (of_bsn_vport_l2gre_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_l2gre_src_ip_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_vport_l2gre_src_ip_set( (of_bsn_vport_l2gre_t *) o, tmp);
	return;
}

void do_of_bsn_vport_l2gre_src_ip_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_vport_l2gre_src_ip_get( (of_bsn_vport_l2gre_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_l2gre_dst_ip_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_bsn_vport_l2gre_dst_ip_set( (of_bsn_vport_l2gre_t *) o, tmp);
	return;
}

void do_of_bsn_vport_l2gre_dst_ip_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_bsn_vport_l2gre_dst_ip_get( (of_bsn_vport_l2gre_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_l2gre_dscp_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_vport_l2gre_dscp_set( (of_bsn_vport_l2gre_t *) o, tmp);
	return;
}

void do_of_bsn_vport_l2gre_dscp_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_vport_l2gre_dscp_get( (of_bsn_vport_l2gre_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_l2gre_ttl_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_bsn_vport_l2gre_ttl_set( (of_bsn_vport_l2gre_t *) o, tmp);
	return;
}

void do_of_bsn_vport_l2gre_ttl_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_bsn_vport_l2gre_ttl_get( (of_bsn_vport_l2gre_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_l2gre_vpn_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vport_l2gre_vpn_set( (of_bsn_vport_l2gre_t *) o, tmp);
	return;
}

void do_of_bsn_vport_l2gre_vpn_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vport_l2gre_vpn_get( (of_bsn_vport_l2gre_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_l2gre_rate_limit_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vport_l2gre_rate_limit_set( (of_bsn_vport_l2gre_t *) o, tmp);
	return;
}

void do_of_bsn_vport_l2gre_rate_limit_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vport_l2gre_rate_limit_get( (of_bsn_vport_l2gre_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_q_in_q_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vport_q_in_q_port_no_set( (of_bsn_vport_q_in_q_t *) o, tmp);
	return;
}

void do_of_bsn_vport_q_in_q_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vport_q_in_q_port_no_get( (of_bsn_vport_q_in_q_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_q_in_q_ingress_tpid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vport_q_in_q_ingress_tpid_set( (of_bsn_vport_q_in_q_t *) o, tmp);
	return;
}

void do_of_bsn_vport_q_in_q_ingress_tpid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vport_q_in_q_ingress_tpid_get( (of_bsn_vport_q_in_q_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_q_in_q_ingress_vlan_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vport_q_in_q_ingress_vlan_id_set( (of_bsn_vport_q_in_q_t *) o, tmp);
	return;
}

void do_of_bsn_vport_q_in_q_ingress_vlan_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vport_q_in_q_ingress_vlan_id_get( (of_bsn_vport_q_in_q_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_q_in_q_egress_tpid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vport_q_in_q_egress_tpid_set( (of_bsn_vport_q_in_q_t *) o, tmp);
	return;
}

void do_of_bsn_vport_q_in_q_egress_tpid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vport_q_in_q_egress_tpid_get( (of_bsn_vport_q_in_q_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vport_q_in_q_egress_vlan_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bsn_vport_q_in_q_egress_vlan_id_set( (of_bsn_vport_q_in_q_t *) o, tmp);
	return;
}

void do_of_bsn_vport_q_in_q_egress_vlan_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bsn_vport_q_in_q_egress_vlan_id_get( (of_bsn_vport_q_in_q_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_entry_vrf_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bsn_vrf_counter_stats_entry_vrf_set( (of_bsn_vrf_counter_stats_entry_t *) o, tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_entry_vrf_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bsn_vrf_counter_stats_entry_vrf_get( (of_bsn_vrf_counter_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bsn_vrf_counter_stats_entry_values_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint64_t *tmp;
	tmp = of_bsn_vrf_counter_stats_entry_values_get( (of_bsn_vrf_counter_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bsn_vrf_counter_stats_entry_values_set( (of_bsn_vrf_counter_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bsn_vrf_counter_stats_entry_values_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint64_t *tmp;
	tmp = of_bsn_vrf_counter_stats_entry_values_get( (of_bsn_vrf_counter_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bucket_weight_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_bucket_weight_set( (of_bucket_t *) o, tmp);
	return;
}

void do_of_bucket_weight_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_bucket_weight_get( (of_bucket_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bucket_watch_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_bucket_watch_port_set( (of_bucket_t *) o, tmp);
	return;
}

void do_of_bucket_watch_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_bucket_watch_port_get( (of_bucket_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bucket_watch_group_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_bucket_watch_group_set( (of_bucket_t *) o, tmp);
	return;
}

void do_of_bucket_watch_group_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_bucket_watch_group_get( (of_bucket_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bucket_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_bucket_actions_get( (of_bucket_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_bucket_actions_set( (of_bucket_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bucket_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_bucket_actions_get( (of_bucket_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_bucket_counter_packet_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bucket_counter_packet_count_set( (of_bucket_counter_t *) o, tmp);
	return;
}

void do_of_bucket_counter_packet_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bucket_counter_packet_count_get( (of_bucket_counter_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_bucket_counter_byte_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_bucket_counter_byte_count_set( (of_bucket_counter_t *) o, tmp);
	return;
}

void do_of_bucket_counter_byte_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_bucket_counter_byte_count_get( (of_bucket_counter_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_flow_stats_entry_table_id_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_flow_stats_entry_table_id_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_duration_sec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_stats_entry_duration_sec_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_duration_sec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_stats_entry_duration_sec_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_duration_nsec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_flow_stats_entry_duration_nsec_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_duration_nsec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_flow_stats_entry_duration_nsec_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_priority_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_stats_entry_priority_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_priority_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_stats_entry_priority_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_idle_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_stats_entry_idle_timeout_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_idle_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_stats_entry_idle_timeout_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_hard_timeout_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_stats_entry_hard_timeout_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_hard_timeout_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_stats_entry_hard_timeout_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_stats_entry_flags_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_stats_entry_flags_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_importance_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_flow_stats_entry_importance_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_importance_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_flow_stats_entry_importance_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_cookie_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_stats_entry_cookie_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_cookie_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_stats_entry_cookie_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_packet_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_stats_entry_packet_count_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_packet_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_stats_entry_packet_count_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_byte_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_flow_stats_entry_byte_count_set( (of_flow_stats_entry_t *) o, tmp);
	return;
}

void do_of_flow_stats_entry_byte_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_flow_stats_entry_byte_count_get( (of_flow_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_flow_stats_entry_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_stats_entry_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO: Support Match manipulation
	return;
}

void do_of_flow_stats_entry_instructions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_stats_entry_instructions_get( (of_flow_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_stats_entry_instructions_set( (of_flow_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_stats_entry_instructions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_instruction_t *tmp;
	tmp = of_flow_stats_entry_instructions_get( (of_flow_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_stats_entry_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_stats_entry_actions_get( (of_flow_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_flow_stats_entry_actions_set( (of_flow_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_flow_stats_entry_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_flow_stats_entry_actions_get( (of_flow_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_desc_stats_entry_group_type_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_group_desc_stats_entry_group_type_set( (of_group_desc_stats_entry_t *) o, tmp);
	return;
}

void do_of_group_desc_stats_entry_group_type_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_group_desc_stats_entry_group_type_get( (of_group_desc_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_desc_stats_entry_group_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_desc_stats_entry_group_id_set( (of_group_desc_stats_entry_t *) o, tmp);
	return;
}

void do_of_group_desc_stats_entry_group_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_desc_stats_entry_group_id_get( (of_group_desc_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_desc_stats_entry_buckets_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bucket_t *tmp;
	tmp = of_group_desc_stats_entry_buckets_get( (of_group_desc_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_group_desc_stats_entry_buckets_set( (of_group_desc_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_desc_stats_entry_buckets_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bucket_t *tmp;
	tmp = of_group_desc_stats_entry_buckets_get( (of_group_desc_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_stats_entry_group_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_stats_entry_group_id_set( (of_group_stats_entry_t *) o, tmp);
	return;
}

void do_of_group_stats_entry_group_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_stats_entry_group_id_get( (of_group_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_entry_ref_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_stats_entry_ref_count_set( (of_group_stats_entry_t *) o, tmp);
	return;
}

void do_of_group_stats_entry_ref_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_stats_entry_ref_count_get( (of_group_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_entry_packet_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_group_stats_entry_packet_count_set( (of_group_stats_entry_t *) o, tmp);
	return;
}

void do_of_group_stats_entry_packet_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_group_stats_entry_packet_count_get( (of_group_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_entry_byte_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_group_stats_entry_byte_count_set( (of_group_stats_entry_t *) o, tmp);
	return;
}

void do_of_group_stats_entry_byte_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_group_stats_entry_byte_count_get( (of_group_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_entry_duration_sec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_stats_entry_duration_sec_set( (of_group_stats_entry_t *) o, tmp);
	return;
}

void do_of_group_stats_entry_duration_sec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_stats_entry_duration_sec_get( (of_group_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_entry_duration_nsec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_group_stats_entry_duration_nsec_set( (of_group_stats_entry_t *) o, tmp);
	return;
}

void do_of_group_stats_entry_duration_nsec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_group_stats_entry_duration_nsec_get( (of_group_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_group_stats_entry_bucket_stats_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_bucket_counter_t *tmp;
	tmp = of_group_stats_entry_bucket_stats_get( (of_group_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_group_stats_entry_bucket_stats_set( (of_group_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_group_stats_entry_bucket_stats_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_bucket_counter_t *tmp;
	tmp = of_group_stats_entry_bucket_stats_get( (of_group_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_hello_elem_versionbitmap_bitmaps_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_hello_elem_versionbitmap_bitmaps_get( (of_hello_elem_versionbitmap_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_hello_elem_versionbitmap_bitmaps_set( (of_hello_elem_versionbitmap_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_hello_elem_versionbitmap_bitmaps_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_hello_elem_versionbitmap_bitmaps_get( (of_hello_elem_versionbitmap_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_instruction_apply_actions_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_instruction_apply_actions_actions_get( (of_instruction_apply_actions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_instruction_apply_actions_actions_set( (of_instruction_apply_actions_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_instruction_apply_actions_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_instruction_apply_actions_actions_get( (of_instruction_apply_actions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_instruction_bsn_arp_offload_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_arp_offload_experimenter_set( (of_instruction_bsn_arp_offload_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_arp_offload_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_arp_offload_experimenter_get( (of_instruction_bsn_arp_offload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_arp_offload_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_arp_offload_subtype_set( (of_instruction_bsn_arp_offload_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_arp_offload_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_arp_offload_subtype_get( (of_instruction_bsn_arp_offload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_auto_negotiation_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_auto_negotiation_experimenter_set( (of_instruction_bsn_auto_negotiation_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_auto_negotiation_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_auto_negotiation_experimenter_get( (of_instruction_bsn_auto_negotiation_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_auto_negotiation_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_auto_negotiation_subtype_set( (of_instruction_bsn_auto_negotiation_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_auto_negotiation_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_auto_negotiation_subtype_get( (of_instruction_bsn_auto_negotiation_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_deny_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_deny_experimenter_set( (of_instruction_bsn_deny_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_deny_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_deny_experimenter_get( (of_instruction_bsn_deny_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_deny_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_deny_subtype_set( (of_instruction_bsn_deny_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_deny_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_deny_subtype_get( (of_instruction_bsn_deny_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_dhcp_offload_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_dhcp_offload_experimenter_set( (of_instruction_bsn_dhcp_offload_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_dhcp_offload_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_dhcp_offload_experimenter_get( (of_instruction_bsn_dhcp_offload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_dhcp_offload_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_dhcp_offload_subtype_set( (of_instruction_bsn_dhcp_offload_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_dhcp_offload_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_dhcp_offload_subtype_get( (of_instruction_bsn_dhcp_offload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_disable_split_horizon_check_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_disable_split_horizon_check_experimenter_set( (of_instruction_bsn_disable_split_horizon_check_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_disable_split_horizon_check_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_disable_split_horizon_check_experimenter_get( (of_instruction_bsn_disable_split_horizon_check_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_disable_split_horizon_check_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_disable_split_horizon_check_subtype_set( (of_instruction_bsn_disable_split_horizon_check_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_disable_split_horizon_check_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_disable_split_horizon_check_subtype_get( (of_instruction_bsn_disable_split_horizon_check_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_disable_src_mac_check_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_disable_src_mac_check_experimenter_set( (of_instruction_bsn_disable_src_mac_check_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_disable_src_mac_check_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_disable_src_mac_check_experimenter_get( (of_instruction_bsn_disable_src_mac_check_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_disable_src_mac_check_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_disable_src_mac_check_subtype_set( (of_instruction_bsn_disable_src_mac_check_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_disable_src_mac_check_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_disable_src_mac_check_subtype_get( (of_instruction_bsn_disable_src_mac_check_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_disable_vlan_counters_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_disable_vlan_counters_experimenter_set( (of_instruction_bsn_disable_vlan_counters_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_disable_vlan_counters_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_disable_vlan_counters_experimenter_get( (of_instruction_bsn_disable_vlan_counters_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_disable_vlan_counters_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_disable_vlan_counters_subtype_set( (of_instruction_bsn_disable_vlan_counters_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_disable_vlan_counters_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_disable_vlan_counters_subtype_get( (of_instruction_bsn_disable_vlan_counters_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_packet_of_death_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_packet_of_death_experimenter_set( (of_instruction_bsn_packet_of_death_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_packet_of_death_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_packet_of_death_experimenter_get( (of_instruction_bsn_packet_of_death_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_packet_of_death_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_packet_of_death_subtype_set( (of_instruction_bsn_packet_of_death_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_packet_of_death_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_packet_of_death_subtype_get( (of_instruction_bsn_packet_of_death_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_permit_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_permit_experimenter_set( (of_instruction_bsn_permit_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_permit_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_permit_experimenter_get( (of_instruction_bsn_permit_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_permit_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_permit_subtype_set( (of_instruction_bsn_permit_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_permit_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_permit_subtype_get( (of_instruction_bsn_permit_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_prioritize_pdus_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_prioritize_pdus_experimenter_set( (of_instruction_bsn_prioritize_pdus_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_prioritize_pdus_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_prioritize_pdus_experimenter_get( (of_instruction_bsn_prioritize_pdus_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_prioritize_pdus_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_prioritize_pdus_subtype_set( (of_instruction_bsn_prioritize_pdus_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_prioritize_pdus_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_prioritize_pdus_subtype_get( (of_instruction_bsn_prioritize_pdus_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_require_vlan_xlate_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_require_vlan_xlate_experimenter_set( (of_instruction_bsn_require_vlan_xlate_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_require_vlan_xlate_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_require_vlan_xlate_experimenter_get( (of_instruction_bsn_require_vlan_xlate_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_require_vlan_xlate_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_require_vlan_xlate_subtype_set( (of_instruction_bsn_require_vlan_xlate_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_require_vlan_xlate_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_require_vlan_xlate_subtype_get( (of_instruction_bsn_require_vlan_xlate_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_span_destination_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_span_destination_experimenter_set( (of_instruction_bsn_span_destination_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_span_destination_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_span_destination_experimenter_get( (of_instruction_bsn_span_destination_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_bsn_span_destination_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_bsn_span_destination_subtype_set( (of_instruction_bsn_span_destination_t *) o, tmp);
	return;
}

void do_of_instruction_bsn_span_destination_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_bsn_span_destination_subtype_get( (of_instruction_bsn_span_destination_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_goto_table_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_instruction_goto_table_table_id_set( (of_instruction_goto_table_t *) o, tmp);
	return;
}

void do_of_instruction_goto_table_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_instruction_goto_table_table_id_get( (of_instruction_goto_table_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_arp_offload_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_arp_offload_experimenter_set( (of_instruction_id_bsn_arp_offload_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_arp_offload_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_arp_offload_experimenter_get( (of_instruction_id_bsn_arp_offload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_arp_offload_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_arp_offload_subtype_set( (of_instruction_id_bsn_arp_offload_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_arp_offload_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_arp_offload_subtype_get( (of_instruction_id_bsn_arp_offload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_auto_negotiation_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_auto_negotiation_experimenter_set( (of_instruction_id_bsn_auto_negotiation_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_auto_negotiation_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_auto_negotiation_experimenter_get( (of_instruction_id_bsn_auto_negotiation_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_auto_negotiation_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_auto_negotiation_subtype_set( (of_instruction_id_bsn_auto_negotiation_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_auto_negotiation_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_auto_negotiation_subtype_get( (of_instruction_id_bsn_auto_negotiation_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_deny_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_deny_experimenter_set( (of_instruction_id_bsn_deny_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_deny_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_deny_experimenter_get( (of_instruction_id_bsn_deny_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_deny_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_deny_subtype_set( (of_instruction_id_bsn_deny_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_deny_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_deny_subtype_get( (of_instruction_id_bsn_deny_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_dhcp_offload_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_dhcp_offload_experimenter_set( (of_instruction_id_bsn_dhcp_offload_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_dhcp_offload_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_dhcp_offload_experimenter_get( (of_instruction_id_bsn_dhcp_offload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_dhcp_offload_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_dhcp_offload_subtype_set( (of_instruction_id_bsn_dhcp_offload_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_dhcp_offload_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_dhcp_offload_subtype_get( (of_instruction_id_bsn_dhcp_offload_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_disable_split_horizon_check_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_disable_split_horizon_check_experimenter_set( (of_instruction_id_bsn_disable_split_horizon_check_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_disable_split_horizon_check_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_disable_split_horizon_check_experimenter_get( (of_instruction_id_bsn_disable_split_horizon_check_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_disable_split_horizon_check_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_disable_split_horizon_check_subtype_set( (of_instruction_id_bsn_disable_split_horizon_check_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_disable_split_horizon_check_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_disable_split_horizon_check_subtype_get( (of_instruction_id_bsn_disable_split_horizon_check_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_disable_src_mac_check_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_disable_src_mac_check_experimenter_set( (of_instruction_id_bsn_disable_src_mac_check_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_disable_src_mac_check_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_disable_src_mac_check_experimenter_get( (of_instruction_id_bsn_disable_src_mac_check_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_disable_src_mac_check_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_disable_src_mac_check_subtype_set( (of_instruction_id_bsn_disable_src_mac_check_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_disable_src_mac_check_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_disable_src_mac_check_subtype_get( (of_instruction_id_bsn_disable_src_mac_check_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_disable_vlan_counters_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_disable_vlan_counters_experimenter_set( (of_instruction_id_bsn_disable_vlan_counters_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_disable_vlan_counters_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_disable_vlan_counters_experimenter_get( (of_instruction_id_bsn_disable_vlan_counters_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_disable_vlan_counters_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_disable_vlan_counters_subtype_set( (of_instruction_id_bsn_disable_vlan_counters_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_disable_vlan_counters_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_disable_vlan_counters_subtype_get( (of_instruction_id_bsn_disable_vlan_counters_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_packet_of_death_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_packet_of_death_experimenter_set( (of_instruction_id_bsn_packet_of_death_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_packet_of_death_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_packet_of_death_experimenter_get( (of_instruction_id_bsn_packet_of_death_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_packet_of_death_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_packet_of_death_subtype_set( (of_instruction_id_bsn_packet_of_death_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_packet_of_death_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_packet_of_death_subtype_get( (of_instruction_id_bsn_packet_of_death_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_permit_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_permit_experimenter_set( (of_instruction_id_bsn_permit_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_permit_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_permit_experimenter_get( (of_instruction_id_bsn_permit_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_permit_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_permit_subtype_set( (of_instruction_id_bsn_permit_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_permit_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_permit_subtype_get( (of_instruction_id_bsn_permit_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_prioritize_pdus_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_prioritize_pdus_experimenter_set( (of_instruction_id_bsn_prioritize_pdus_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_prioritize_pdus_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_prioritize_pdus_experimenter_get( (of_instruction_id_bsn_prioritize_pdus_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_prioritize_pdus_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_prioritize_pdus_subtype_set( (of_instruction_id_bsn_prioritize_pdus_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_prioritize_pdus_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_prioritize_pdus_subtype_get( (of_instruction_id_bsn_prioritize_pdus_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_require_vlan_xlate_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_require_vlan_xlate_experimenter_set( (of_instruction_id_bsn_require_vlan_xlate_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_require_vlan_xlate_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_require_vlan_xlate_experimenter_get( (of_instruction_id_bsn_require_vlan_xlate_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_require_vlan_xlate_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_require_vlan_xlate_subtype_set( (of_instruction_id_bsn_require_vlan_xlate_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_require_vlan_xlate_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_require_vlan_xlate_subtype_get( (of_instruction_id_bsn_require_vlan_xlate_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_span_destination_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_span_destination_experimenter_set( (of_instruction_id_bsn_span_destination_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_span_destination_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_span_destination_experimenter_get( (of_instruction_id_bsn_span_destination_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_id_bsn_span_destination_subtype_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_id_bsn_span_destination_subtype_set( (of_instruction_id_bsn_span_destination_t *) o, tmp);
	return;
}

void do_of_instruction_id_bsn_span_destination_subtype_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_id_bsn_span_destination_subtype_get( (of_instruction_id_bsn_span_destination_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_meter_meter_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_instruction_meter_meter_id_set( (of_instruction_meter_t *) o, tmp);
	return;
}

void do_of_instruction_meter_meter_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_instruction_meter_meter_id_get( (of_instruction_meter_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_write_actions_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_instruction_write_actions_actions_get( (of_instruction_write_actions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_instruction_write_actions_actions_set( (of_instruction_write_actions_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_instruction_write_actions_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_t *tmp;
	tmp = of_instruction_write_actions_actions_get( (of_instruction_write_actions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_instruction_write_metadata_metadata_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_instruction_write_metadata_metadata_set( (of_instruction_write_metadata_t *) o, tmp);
	return;
}

void do_of_instruction_write_metadata_metadata_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_instruction_write_metadata_metadata_get( (of_instruction_write_metadata_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_instruction_write_metadata_metadata_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_instruction_write_metadata_metadata_mask_set( (of_instruction_write_metadata_t *) o, tmp);
	return;
}

void do_of_instruction_write_metadata_metadata_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_instruction_write_metadata_metadata_mask_get( (of_instruction_write_metadata_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_wildcards_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_wc_bmap_t tmp;
	tmp = val;
	of_match_v1_wildcards_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_wildcards_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_wc_bmap_t tmp;
	of_match_v1_wildcards_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_in_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_match_v1_in_port_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_in_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_match_v1_in_port_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_eth_src_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_match_v1_eth_src_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_eth_src_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_match_v1_eth_src_get( (of_match_v1_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_match_v1_eth_dst_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_match_v1_eth_dst_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_eth_dst_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_match_v1_eth_dst_get( (of_match_v1_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_match_v1_vlan_vid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_match_v1_vlan_vid_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_vlan_vid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_match_v1_vlan_vid_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_vlan_pcp_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_match_v1_vlan_pcp_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_vlan_pcp_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_match_v1_vlan_pcp_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_eth_type_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_match_v1_eth_type_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_eth_type_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_match_v1_eth_type_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_ip_dscp_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_match_v1_ip_dscp_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_ip_dscp_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_match_v1_ip_dscp_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_ip_proto_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_match_v1_ip_proto_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_ip_proto_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_match_v1_ip_proto_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_ipv4_src_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_match_v1_ipv4_src_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_ipv4_src_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_match_v1_ipv4_src_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_ipv4_dst_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_match_v1_ipv4_dst_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_ipv4_dst_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_match_v1_ipv4_dst_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_tcp_src_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_match_v1_tcp_src_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_tcp_src_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_match_v1_tcp_src_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v1_tcp_dst_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_match_v1_tcp_dst_set( (of_match_v1_t *) o, tmp);
	return;
}

void do_of_match_v1_tcp_dst_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_match_v1_tcp_dst_get( (of_match_v1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_in_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_match_v2_in_port_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_in_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_match_v2_in_port_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_wildcards_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_wc_bmap_t tmp;
	tmp = val;
	of_match_v2_wildcards_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_wildcards_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_wc_bmap_t tmp;
	of_match_v2_wildcards_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_eth_src_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_match_v2_eth_src_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_eth_src_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_match_v2_eth_src_get( (of_match_v2_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_match_v2_eth_src_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_match_v2_eth_src_mask_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_eth_src_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_match_v2_eth_src_mask_get( (of_match_v2_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_match_v2_eth_dst_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_match_v2_eth_dst_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_eth_dst_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_match_v2_eth_dst_get( (of_match_v2_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_match_v2_eth_dst_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_match_v2_eth_dst_mask_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_eth_dst_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_match_v2_eth_dst_mask_get( (of_match_v2_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_match_v2_vlan_vid_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//uint16_t tmp;
	//tmp = val;
	//of_match_v2_vlan_vid_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_vlan_vid_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_match_v2_vlan_vid_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_vlan_pcp_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_match_v2_vlan_pcp_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_vlan_pcp_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_match_v2_vlan_pcp_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_eth_type_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_match_v2_eth_type_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_eth_type_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_match_v2_eth_type_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_ip_dscp_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_match_v2_ip_dscp_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_ip_dscp_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_match_v2_ip_dscp_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_ip_proto_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_match_v2_ip_proto_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_ip_proto_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_match_v2_ip_proto_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_ipv4_src_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_match_v2_ipv4_src_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_ipv4_src_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_match_v2_ipv4_src_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_ipv4_src_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_match_v2_ipv4_src_mask_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_ipv4_src_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_match_v2_ipv4_src_mask_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_ipv4_dst_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_match_v2_ipv4_dst_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_ipv4_dst_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_match_v2_ipv4_dst_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_ipv4_dst_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_match_v2_ipv4_dst_mask_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_ipv4_dst_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_match_v2_ipv4_dst_mask_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_tcp_src_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_match_v2_tcp_src_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_tcp_src_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_match_v2_tcp_src_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_tcp_dst_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_match_v2_tcp_dst_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_tcp_dst_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_match_v2_tcp_dst_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_mpls_label_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_match_v2_mpls_label_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_mpls_label_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_match_v2_mpls_label_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_mpls_tc_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_match_v2_mpls_tc_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_mpls_tc_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_match_v2_mpls_tc_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_metadata_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_match_v2_metadata_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_metadata_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_match_v2_metadata_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v2_metadata_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_match_v2_metadata_mask_set( (of_match_v2_t *) o, tmp);
	return;
}

void do_of_match_v2_metadata_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_match_v2_metadata_mask_get( (of_match_v2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_match_v3_oxm_list_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_oxm_t *tmp;
	tmp = of_match_v3_oxm_list_get( (of_match_v3_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_match_v3_oxm_list_set( (of_match_v3_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_match_v3_oxm_list_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_oxm_t *tmp;
	tmp = of_match_v3_oxm_list_get( (of_match_v3_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_band_drop_rate_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_band_drop_rate_set( (of_meter_band_drop_t *) o, tmp);
	return;
}

void do_of_meter_band_drop_rate_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_band_drop_rate_get( (of_meter_band_drop_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_band_drop_burst_size_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_band_drop_burst_size_set( (of_meter_band_drop_t *) o, tmp);
	return;
}

void do_of_meter_band_drop_burst_size_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_band_drop_burst_size_get( (of_meter_band_drop_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_band_dscp_remark_rate_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_band_dscp_remark_rate_set( (of_meter_band_dscp_remark_t *) o, tmp);
	return;
}

void do_of_meter_band_dscp_remark_rate_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_band_dscp_remark_rate_get( (of_meter_band_dscp_remark_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_band_dscp_remark_burst_size_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_band_dscp_remark_burst_size_set( (of_meter_band_dscp_remark_t *) o, tmp);
	return;
}

void do_of_meter_band_dscp_remark_burst_size_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_band_dscp_remark_burst_size_get( (of_meter_band_dscp_remark_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_band_dscp_remark_prec_level_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_meter_band_dscp_remark_prec_level_set( (of_meter_band_dscp_remark_t *) o, tmp);
	return;
}

void do_of_meter_band_dscp_remark_prec_level_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_meter_band_dscp_remark_prec_level_get( (of_meter_band_dscp_remark_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_band_experimenter_rate_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_band_experimenter_rate_set( (of_meter_band_experimenter_t *) o, tmp);
	return;
}

void do_of_meter_band_experimenter_rate_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_band_experimenter_rate_get( (of_meter_band_experimenter_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_band_experimenter_burst_size_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_band_experimenter_burst_size_set( (of_meter_band_experimenter_t *) o, tmp);
	return;
}

void do_of_meter_band_experimenter_burst_size_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_band_experimenter_burst_size_get( (of_meter_band_experimenter_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_band_experimenter_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_band_experimenter_experimenter_set( (of_meter_band_experimenter_t *) o, tmp);
	return;
}

void do_of_meter_band_experimenter_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_band_experimenter_experimenter_get( (of_meter_band_experimenter_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_band_stats_packet_band_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_meter_band_stats_packet_band_count_set( (of_meter_band_stats_t *) o, tmp);
	return;
}

void do_of_meter_band_stats_packet_band_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_meter_band_stats_packet_band_count_get( (of_meter_band_stats_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_band_stats_byte_band_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_meter_band_stats_byte_band_count_set( (of_meter_band_stats_t *) o, tmp);
	return;
}

void do_of_meter_band_stats_byte_band_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_meter_band_stats_byte_band_count_get( (of_meter_band_stats_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_config_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_meter_config_flags_set( (of_meter_config_t *) o, tmp);
	return;
}

void do_of_meter_config_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_meter_config_flags_get( (of_meter_config_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_config_meter_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_config_meter_id_set( (of_meter_config_t *) o, tmp);
	return;
}

void do_of_meter_config_meter_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_config_meter_id_get( (of_meter_config_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_config_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_meter_band_t *tmp;
	tmp = of_meter_config_entries_get( (of_meter_config_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_meter_config_entries_set( (of_meter_config_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_config_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_meter_band_t *tmp;
	tmp = of_meter_config_entries_get( (of_meter_config_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_features_max_meter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_features_max_meter_set( (of_meter_features_t *) o, tmp);
	return;
}

void do_of_meter_features_max_meter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_features_max_meter_get( (of_meter_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_features_band_types_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_features_band_types_set( (of_meter_features_t *) o, tmp);
	return;
}

void do_of_meter_features_band_types_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_features_band_types_get( (of_meter_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_features_capabilities_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_features_capabilities_set( (of_meter_features_t *) o, tmp);
	return;
}

void do_of_meter_features_capabilities_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_features_capabilities_get( (of_meter_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_features_max_bands_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_meter_features_max_bands_set( (of_meter_features_t *) o, tmp);
	return;
}

void do_of_meter_features_max_bands_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_meter_features_max_bands_get( (of_meter_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_features_max_color_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_meter_features_max_color_set( (of_meter_features_t *) o, tmp);
	return;
}

void do_of_meter_features_max_color_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_meter_features_max_color_get( (of_meter_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_meter_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_stats_meter_id_set( (of_meter_stats_t *) o, tmp);
	return;
}

void do_of_meter_stats_meter_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_stats_meter_id_get( (of_meter_stats_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_flow_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_stats_flow_count_set( (of_meter_stats_t *) o, tmp);
	return;
}

void do_of_meter_stats_flow_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_stats_flow_count_get( (of_meter_stats_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_packet_in_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_meter_stats_packet_in_count_set( (of_meter_stats_t *) o, tmp);
	return;
}

void do_of_meter_stats_packet_in_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_meter_stats_packet_in_count_get( (of_meter_stats_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_byte_in_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_meter_stats_byte_in_count_set( (of_meter_stats_t *) o, tmp);
	return;
}

void do_of_meter_stats_byte_in_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_meter_stats_byte_in_count_get( (of_meter_stats_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_duration_sec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_stats_duration_sec_set( (of_meter_stats_t *) o, tmp);
	return;
}

void do_of_meter_stats_duration_sec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_stats_duration_sec_get( (of_meter_stats_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_duration_nsec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_meter_stats_duration_nsec_set( (of_meter_stats_t *) o, tmp);
	return;
}

void do_of_meter_stats_duration_nsec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_meter_stats_duration_nsec_get( (of_meter_stats_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_meter_stats_band_stats_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_meter_band_stats_t *tmp;
	tmp = of_meter_stats_band_stats_get( (of_meter_stats_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_meter_stats_band_stats_set( (of_meter_stats_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_meter_stats_band_stats_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_meter_band_stats_t *tmp;
	tmp = of_meter_stats_band_stats_get( (of_meter_stats_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_oxm_arp_op_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_arp_op_value_set( (of_oxm_arp_op_t *) o, tmp);
	return;
}

void do_of_oxm_arp_op_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_arp_op_value_get( (of_oxm_arp_op_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_arp_op_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_arp_op_masked_value_set( (of_oxm_arp_op_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_op_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_arp_op_masked_value_get( (of_oxm_arp_op_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_arp_op_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_arp_op_masked_value_mask_set( (of_oxm_arp_op_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_op_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_arp_op_masked_value_mask_get( (of_oxm_arp_op_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_arp_sha_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_oxm_arp_sha_value_set( (of_oxm_arp_sha_t *) o, tmp);
	return;
}

void do_of_oxm_arp_sha_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_oxm_arp_sha_value_get( (of_oxm_arp_sha_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_arp_sha_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_oxm_arp_sha_masked_value_set( (of_oxm_arp_sha_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_sha_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_oxm_arp_sha_masked_value_get( (of_oxm_arp_sha_masked_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_arp_sha_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//tmp = val;
	//of_oxm_arp_sha_masked_value_mask_set( (of_oxm_arp_sha_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_sha_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_mac_addr_t tmp;
	//of_oxm_arp_sha_masked_value_mask_get( (of_oxm_arp_sha_masked_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_arp_spa_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_arp_spa_value_set( (of_oxm_arp_spa_t *) o, tmp);
	return;
}

void do_of_oxm_arp_spa_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_arp_spa_value_get( (of_oxm_arp_spa_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_arp_spa_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_arp_spa_masked_value_set( (of_oxm_arp_spa_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_spa_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_arp_spa_masked_value_get( (of_oxm_arp_spa_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_arp_spa_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_arp_spa_masked_value_mask_set( (of_oxm_arp_spa_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_spa_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_arp_spa_masked_value_mask_get( (of_oxm_arp_spa_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_arp_tha_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr, &val, 6);
	of_oxm_arp_tha_value_set( (of_oxm_arp_tha_t *) o, tmp);
	return;
}

void do_of_oxm_arp_tha_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_arp_tha_value_get( (of_oxm_arp_tha_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_arp_tha_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr, &val, 6);
	of_oxm_arp_tha_masked_value_set( (of_oxm_arp_tha_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_tha_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_arp_tha_masked_value_get( (of_oxm_arp_tha_masked_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_arp_tha_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr, &val, 6);
	of_oxm_arp_tha_masked_value_mask_set( (of_oxm_arp_tha_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_tha_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_arp_tha_masked_value_mask_get( (of_oxm_arp_tha_masked_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_arp_tpa_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_arp_tpa_value_set( (of_oxm_arp_tpa_t *) o, tmp);
	return;
}

void do_of_oxm_arp_tpa_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_arp_tpa_value_get( (of_oxm_arp_tpa_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_arp_tpa_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_arp_tpa_masked_value_set( (of_oxm_arp_tpa_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_tpa_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_arp_tpa_masked_value_get( (of_oxm_arp_tpa_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_arp_tpa_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_arp_tpa_masked_value_mask_set( (of_oxm_arp_tpa_masked_t *) o, tmp);
	return;
}

void do_of_oxm_arp_tpa_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_arp_tpa_masked_value_mask_get( (of_oxm_arp_tpa_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_egr_port_group_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_egr_port_group_id_value_set( (of_oxm_bsn_egr_port_group_id_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_egr_port_group_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_egr_port_group_id_value_get( (of_oxm_bsn_egr_port_group_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_egr_port_group_id_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_egr_port_group_id_masked_value_set( (of_oxm_bsn_egr_port_group_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_egr_port_group_id_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_egr_port_group_id_masked_value_get( (of_oxm_bsn_egr_port_group_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_egr_port_group_id_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_egr_port_group_id_masked_value_mask_set( (of_oxm_bsn_egr_port_group_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_egr_port_group_id_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_egr_port_group_id_masked_value_mask_get( (of_oxm_bsn_egr_port_group_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_global_vrf_allowed_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_bsn_global_vrf_allowed_value_set( (of_oxm_bsn_global_vrf_allowed_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_global_vrf_allowed_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_bsn_global_vrf_allowed_value_get( (of_oxm_bsn_global_vrf_allowed_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_global_vrf_allowed_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_bsn_global_vrf_allowed_masked_value_set( (of_oxm_bsn_global_vrf_allowed_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_global_vrf_allowed_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_bsn_global_vrf_allowed_masked_value_get( (of_oxm_bsn_global_vrf_allowed_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_global_vrf_allowed_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_bsn_global_vrf_allowed_masked_value_mask_set( (of_oxm_bsn_global_vrf_allowed_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_global_vrf_allowed_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_bsn_global_vrf_allowed_masked_value_mask_get( (of_oxm_bsn_global_vrf_allowed_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_ingress_port_group_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_ingress_port_group_id_value_set( (of_oxm_bsn_ingress_port_group_id_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_ingress_port_group_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_ingress_port_group_id_value_get( (of_oxm_bsn_ingress_port_group_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_ingress_port_group_id_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_ingress_port_group_id_masked_value_set( (of_oxm_bsn_ingress_port_group_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_ingress_port_group_id_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_ingress_port_group_id_masked_value_get( (of_oxm_bsn_ingress_port_group_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_ingress_port_group_id_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_ingress_port_group_id_masked_value_mask_set( (of_oxm_bsn_ingress_port_group_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_ingress_port_group_id_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_ingress_port_group_id_masked_value_mask_get( (of_oxm_bsn_ingress_port_group_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l2_cache_hit_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_bsn_l2_cache_hit_value_set( (of_oxm_bsn_l2_cache_hit_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l2_cache_hit_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_bsn_l2_cache_hit_value_get( (of_oxm_bsn_l2_cache_hit_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l2_cache_hit_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_bsn_l2_cache_hit_masked_value_set( (of_oxm_bsn_l2_cache_hit_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l2_cache_hit_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_bsn_l2_cache_hit_masked_value_get( (of_oxm_bsn_l2_cache_hit_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l2_cache_hit_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_bsn_l2_cache_hit_masked_value_mask_set( (of_oxm_bsn_l2_cache_hit_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l2_cache_hit_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_bsn_l2_cache_hit_masked_value_mask_get( (of_oxm_bsn_l2_cache_hit_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l3_dst_class_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_l3_dst_class_id_value_set( (of_oxm_bsn_l3_dst_class_id_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l3_dst_class_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_l3_dst_class_id_value_get( (of_oxm_bsn_l3_dst_class_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l3_dst_class_id_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_l3_dst_class_id_masked_value_set( (of_oxm_bsn_l3_dst_class_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l3_dst_class_id_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_l3_dst_class_id_masked_value_get( (of_oxm_bsn_l3_dst_class_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l3_dst_class_id_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_l3_dst_class_id_masked_value_mask_set( (of_oxm_bsn_l3_dst_class_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l3_dst_class_id_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_l3_dst_class_id_masked_value_mask_get( (of_oxm_bsn_l3_dst_class_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l3_interface_class_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_l3_interface_class_id_value_set( (of_oxm_bsn_l3_interface_class_id_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l3_interface_class_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_l3_interface_class_id_value_get( (of_oxm_bsn_l3_interface_class_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l3_interface_class_id_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_l3_interface_class_id_masked_value_set( (of_oxm_bsn_l3_interface_class_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l3_interface_class_id_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_l3_interface_class_id_masked_value_get( (of_oxm_bsn_l3_interface_class_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l3_interface_class_id_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_l3_interface_class_id_masked_value_mask_set( (of_oxm_bsn_l3_interface_class_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l3_interface_class_id_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_l3_interface_class_id_masked_value_mask_get( (of_oxm_bsn_l3_interface_class_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l3_src_class_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_l3_src_class_id_value_set( (of_oxm_bsn_l3_src_class_id_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l3_src_class_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_l3_src_class_id_value_get( (of_oxm_bsn_l3_src_class_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l3_src_class_id_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_l3_src_class_id_masked_value_set( (of_oxm_bsn_l3_src_class_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l3_src_class_id_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_l3_src_class_id_masked_value_get( (of_oxm_bsn_l3_src_class_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_l3_src_class_id_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_l3_src_class_id_masked_value_mask_set( (of_oxm_bsn_l3_src_class_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_l3_src_class_id_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_l3_src_class_id_masked_value_mask_get( (of_oxm_bsn_l3_src_class_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_lag_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_lag_id_value_set( (of_oxm_bsn_lag_id_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_lag_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_lag_id_value_get( (of_oxm_bsn_lag_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_lag_id_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_lag_id_masked_value_set( (of_oxm_bsn_lag_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_lag_id_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_lag_id_masked_value_get( (of_oxm_bsn_lag_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_lag_id_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_lag_id_masked_value_mask_set( (of_oxm_bsn_lag_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_lag_id_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_lag_id_masked_value_mask_get( (of_oxm_bsn_lag_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_tcp_flags_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_bsn_tcp_flags_value_set( (of_oxm_bsn_tcp_flags_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_tcp_flags_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_bsn_tcp_flags_value_get( (of_oxm_bsn_tcp_flags_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_tcp_flags_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_bsn_tcp_flags_masked_value_set( (of_oxm_bsn_tcp_flags_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_tcp_flags_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_bsn_tcp_flags_masked_value_get( (of_oxm_bsn_tcp_flags_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_tcp_flags_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_bsn_tcp_flags_masked_value_mask_set( (of_oxm_bsn_tcp_flags_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_tcp_flags_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_bsn_tcp_flags_masked_value_mask_get( (of_oxm_bsn_tcp_flags_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf0_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf0_value_set( (of_oxm_bsn_udf0_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf0_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf0_value_get( (of_oxm_bsn_udf0_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf0_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf0_masked_value_set( (of_oxm_bsn_udf0_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf0_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf0_masked_value_get( (of_oxm_bsn_udf0_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf0_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf0_masked_value_mask_set( (of_oxm_bsn_udf0_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf0_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf0_masked_value_mask_get( (of_oxm_bsn_udf0_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf1_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf1_value_set( (of_oxm_bsn_udf1_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf1_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf1_value_get( (of_oxm_bsn_udf1_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf1_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf1_masked_value_set( (of_oxm_bsn_udf1_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf1_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf1_masked_value_get( (of_oxm_bsn_udf1_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf1_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf1_masked_value_mask_set( (of_oxm_bsn_udf1_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf1_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf1_masked_value_mask_get( (of_oxm_bsn_udf1_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf2_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf2_value_set( (of_oxm_bsn_udf2_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf2_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf2_value_get( (of_oxm_bsn_udf2_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf2_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf2_masked_value_set( (of_oxm_bsn_udf2_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf2_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf2_masked_value_get( (of_oxm_bsn_udf2_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf2_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf2_masked_value_mask_set( (of_oxm_bsn_udf2_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf2_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf2_masked_value_mask_get( (of_oxm_bsn_udf2_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf3_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf3_value_set( (of_oxm_bsn_udf3_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf3_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf3_value_get( (of_oxm_bsn_udf3_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf3_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf3_masked_value_set( (of_oxm_bsn_udf3_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf3_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf3_masked_value_get( (of_oxm_bsn_udf3_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf3_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf3_masked_value_mask_set( (of_oxm_bsn_udf3_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf3_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf3_masked_value_mask_get( (of_oxm_bsn_udf3_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf4_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf4_value_set( (of_oxm_bsn_udf4_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf4_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf4_value_get( (of_oxm_bsn_udf4_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf4_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf4_masked_value_set( (of_oxm_bsn_udf4_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf4_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf4_masked_value_get( (of_oxm_bsn_udf4_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf4_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf4_masked_value_mask_set( (of_oxm_bsn_udf4_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf4_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf4_masked_value_mask_get( (of_oxm_bsn_udf4_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf5_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf5_value_set( (of_oxm_bsn_udf5_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf5_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf5_value_get( (of_oxm_bsn_udf5_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf5_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf5_masked_value_set( (of_oxm_bsn_udf5_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf5_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf5_masked_value_get( (of_oxm_bsn_udf5_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf5_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf5_masked_value_mask_set( (of_oxm_bsn_udf5_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf5_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf5_masked_value_mask_get( (of_oxm_bsn_udf5_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf6_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf6_value_set( (of_oxm_bsn_udf6_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf6_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf6_value_get( (of_oxm_bsn_udf6_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf6_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf6_masked_value_set( (of_oxm_bsn_udf6_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf6_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf6_masked_value_get( (of_oxm_bsn_udf6_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf6_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf6_masked_value_mask_set( (of_oxm_bsn_udf6_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf6_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf6_masked_value_mask_get( (of_oxm_bsn_udf6_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf7_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf7_value_set( (of_oxm_bsn_udf7_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf7_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf7_value_get( (of_oxm_bsn_udf7_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf7_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf7_masked_value_set( (of_oxm_bsn_udf7_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf7_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf7_masked_value_get( (of_oxm_bsn_udf7_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_udf7_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_udf7_masked_value_mask_set( (of_oxm_bsn_udf7_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_udf7_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_udf7_masked_value_mask_get( (of_oxm_bsn_udf7_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_vlan_xlate_port_group_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_vlan_xlate_port_group_id_value_set( (of_oxm_bsn_vlan_xlate_port_group_id_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_vlan_xlate_port_group_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_vlan_xlate_port_group_id_value_get( (of_oxm_bsn_vlan_xlate_port_group_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_vlan_xlate_port_group_id_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_vlan_xlate_port_group_id_masked_value_set( (of_oxm_bsn_vlan_xlate_port_group_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_vlan_xlate_port_group_id_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_vlan_xlate_port_group_id_masked_value_get( (of_oxm_bsn_vlan_xlate_port_group_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_vlan_xlate_port_group_id_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_vlan_xlate_port_group_id_masked_value_mask_set( (of_oxm_bsn_vlan_xlate_port_group_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_vlan_xlate_port_group_id_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_vlan_xlate_port_group_id_masked_value_mask_get( (of_oxm_bsn_vlan_xlate_port_group_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_vrf_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_vrf_value_set( (of_oxm_bsn_vrf_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_vrf_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_vrf_value_get( (of_oxm_bsn_vrf_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_vrf_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_vrf_masked_value_set( (of_oxm_bsn_vrf_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_vrf_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_vrf_masked_value_get( (of_oxm_bsn_vrf_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_bsn_vrf_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_bsn_vrf_masked_value_mask_set( (of_oxm_bsn_vrf_masked_t *) o, tmp);
	return;
}

void do_of_oxm_bsn_vrf_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_bsn_vrf_masked_value_mask_get( (of_oxm_bsn_vrf_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_eth_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_eth_dst_value_set( (of_oxm_eth_dst_t *) o, tmp);
	return;
}

void do_of_oxm_eth_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_eth_dst_value_get( (of_oxm_eth_dst_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_eth_dst_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_eth_dst_masked_value_set( (of_oxm_eth_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_eth_dst_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_eth_dst_masked_value_get( (of_oxm_eth_dst_masked_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_eth_dst_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_eth_dst_masked_value_mask_set( (of_oxm_eth_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_eth_dst_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_eth_dst_masked_value_mask_get( (of_oxm_eth_dst_masked_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_eth_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_eth_src_value_set( (of_oxm_eth_src_t *) o, tmp);
	return;
}

void do_of_oxm_eth_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_eth_src_value_get( (of_oxm_eth_src_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_eth_src_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_eth_src_masked_value_set( (of_oxm_eth_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_eth_src_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_eth_src_masked_value_get( (of_oxm_eth_src_masked_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_eth_src_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_eth_src_masked_value_mask_set( (of_oxm_eth_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_eth_src_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_eth_src_masked_value_mask_get( (of_oxm_eth_src_masked_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_eth_type_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_eth_type_value_set( (of_oxm_eth_type_t *) o, tmp);
	return;
}

void do_of_oxm_eth_type_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_eth_type_value_get( (of_oxm_eth_type_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_eth_type_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_eth_type_masked_value_set( (of_oxm_eth_type_masked_t *) o, tmp);
	return;
}

void do_of_oxm_eth_type_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_eth_type_masked_value_get( (of_oxm_eth_type_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_eth_type_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_eth_type_masked_value_mask_set( (of_oxm_eth_type_masked_t *) o, tmp);
	return;
}

void do_of_oxm_eth_type_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_eth_type_masked_value_mask_get( (of_oxm_eth_type_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv4_code_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv4_code_value_set( (of_oxm_icmpv4_code_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv4_code_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv4_code_value_get( (of_oxm_icmpv4_code_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv4_code_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv4_code_masked_value_set( (of_oxm_icmpv4_code_masked_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv4_code_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv4_code_masked_value_get( (of_oxm_icmpv4_code_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv4_code_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv4_code_masked_value_mask_set( (of_oxm_icmpv4_code_masked_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv4_code_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv4_code_masked_value_mask_get( (of_oxm_icmpv4_code_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv4_type_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv4_type_value_set( (of_oxm_icmpv4_type_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv4_type_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv4_type_value_get( (of_oxm_icmpv4_type_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv4_type_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv4_type_masked_value_set( (of_oxm_icmpv4_type_masked_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv4_type_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv4_type_masked_value_get( (of_oxm_icmpv4_type_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv4_type_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv4_type_masked_value_mask_set( (of_oxm_icmpv4_type_masked_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv4_type_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv4_type_masked_value_mask_get( (of_oxm_icmpv4_type_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv6_code_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv6_code_value_set( (of_oxm_icmpv6_code_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv6_code_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv6_code_value_get( (of_oxm_icmpv6_code_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv6_code_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv6_code_masked_value_set( (of_oxm_icmpv6_code_masked_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv6_code_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv6_code_masked_value_get( (of_oxm_icmpv6_code_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv6_code_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv6_code_masked_value_mask_set( (of_oxm_icmpv6_code_masked_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv6_code_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv6_code_masked_value_mask_get( (of_oxm_icmpv6_code_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv6_type_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv6_type_value_set( (of_oxm_icmpv6_type_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv6_type_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv6_type_value_get( (of_oxm_icmpv6_type_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv6_type_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv6_type_masked_value_set( (of_oxm_icmpv6_type_masked_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv6_type_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv6_type_masked_value_get( (of_oxm_icmpv6_type_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_icmpv6_type_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_icmpv6_type_masked_value_mask_set( (of_oxm_icmpv6_type_masked_t *) o, tmp);
	return;
}

void do_of_oxm_icmpv6_type_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_icmpv6_type_masked_value_mask_get( (of_oxm_icmpv6_type_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_in_phy_port_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_oxm_in_phy_port_value_set( (of_oxm_in_phy_port_t *) o, tmp);
	return;
}

void do_of_oxm_in_phy_port_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_oxm_in_phy_port_value_get( (of_oxm_in_phy_port_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_in_phy_port_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_oxm_in_phy_port_masked_value_set( (of_oxm_in_phy_port_masked_t *) o, tmp);
	return;
}

void do_of_oxm_in_phy_port_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_oxm_in_phy_port_masked_value_get( (of_oxm_in_phy_port_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_in_phy_port_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_oxm_in_phy_port_masked_value_mask_set( (of_oxm_in_phy_port_masked_t *) o, tmp);
	return;
}

void do_of_oxm_in_phy_port_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_oxm_in_phy_port_masked_value_mask_get( (of_oxm_in_phy_port_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_in_port_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_oxm_in_port_value_set( (of_oxm_in_port_t *) o, tmp);
	return;
}

void do_of_oxm_in_port_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_oxm_in_port_value_get( (of_oxm_in_port_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_in_port_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_oxm_in_port_masked_value_set( (of_oxm_in_port_masked_t *) o, tmp);
	return;
}

void do_of_oxm_in_port_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_oxm_in_port_masked_value_get( (of_oxm_in_port_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_in_port_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_oxm_in_port_masked_value_mask_set( (of_oxm_in_port_masked_t *) o, tmp);
	return;
}

void do_of_oxm_in_port_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_oxm_in_port_masked_value_mask_get( (of_oxm_in_port_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ip_dscp_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_ip_dscp_value_set( (of_oxm_ip_dscp_t *) o, tmp);
	return;
}

void do_of_oxm_ip_dscp_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_ip_dscp_value_get( (of_oxm_ip_dscp_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ip_dscp_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_ip_dscp_masked_value_set( (of_oxm_ip_dscp_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ip_dscp_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_ip_dscp_masked_value_get( (of_oxm_ip_dscp_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ip_dscp_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_ip_dscp_masked_value_mask_set( (of_oxm_ip_dscp_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ip_dscp_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_ip_dscp_masked_value_mask_get( (of_oxm_ip_dscp_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ip_ecn_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_ip_ecn_value_set( (of_oxm_ip_ecn_t *) o, tmp);
	return;
}

void do_of_oxm_ip_ecn_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_ip_ecn_value_get( (of_oxm_ip_ecn_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ip_ecn_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_ip_ecn_masked_value_set( (of_oxm_ip_ecn_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ip_ecn_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_ip_ecn_masked_value_get( (of_oxm_ip_ecn_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ip_ecn_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_ip_ecn_masked_value_mask_set( (of_oxm_ip_ecn_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ip_ecn_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_ip_ecn_masked_value_mask_get( (of_oxm_ip_ecn_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ip_proto_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_ip_proto_value_set( (of_oxm_ip_proto_t *) o, tmp);
	return;
}

void do_of_oxm_ip_proto_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_ip_proto_value_get( (of_oxm_ip_proto_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ip_proto_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_ip_proto_masked_value_set( (of_oxm_ip_proto_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ip_proto_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_ip_proto_masked_value_get( (of_oxm_ip_proto_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ip_proto_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_ip_proto_masked_value_mask_set( (of_oxm_ip_proto_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ip_proto_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_ip_proto_masked_value_mask_get( (of_oxm_ip_proto_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv4_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_ipv4_dst_value_set( (of_oxm_ipv4_dst_t *) o, tmp);
	return;
}

void do_of_oxm_ipv4_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_ipv4_dst_value_get( (of_oxm_ipv4_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv4_dst_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_ipv4_dst_masked_value_set( (of_oxm_ipv4_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv4_dst_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_ipv4_dst_masked_value_get( (of_oxm_ipv4_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv4_dst_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_ipv4_dst_masked_value_mask_set( (of_oxm_ipv4_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv4_dst_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_ipv4_dst_masked_value_mask_get( (of_oxm_ipv4_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv4_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_ipv4_src_value_set( (of_oxm_ipv4_src_t *) o, tmp);
	return;
}

void do_of_oxm_ipv4_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_ipv4_src_value_get( (of_oxm_ipv4_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv4_src_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_ipv4_src_masked_value_set( (of_oxm_ipv4_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv4_src_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_ipv4_src_masked_value_get( (of_oxm_ipv4_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv4_src_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_ipv4_src_masked_value_mask_set( (of_oxm_ipv4_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv4_src_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_ipv4_src_masked_value_mask_get( (of_oxm_ipv4_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv6_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//tmp = val;
	//of_oxm_ipv6_dst_value_set( (of_oxm_ipv6_dst_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//of_oxm_ipv6_dst_value_get( (of_oxm_ipv6_dst_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_ipv6_dst_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//tmp = val;
	//of_oxm_ipv6_dst_masked_value_set( (of_oxm_ipv6_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_dst_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//of_oxm_ipv6_dst_masked_value_get( (of_oxm_ipv6_dst_masked_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_ipv6_dst_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//tmp = val;
	//of_oxm_ipv6_dst_masked_value_mask_set( (of_oxm_ipv6_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_dst_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//of_oxm_ipv6_dst_masked_value_mask_get( (of_oxm_ipv6_dst_masked_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_ipv6_exthdr_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_ipv6_exthdr_value_set( (of_oxm_ipv6_exthdr_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_exthdr_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_ipv6_exthdr_value_get( (of_oxm_ipv6_exthdr_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv6_exthdr_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_ipv6_exthdr_masked_value_set( (of_oxm_ipv6_exthdr_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_exthdr_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_ipv6_exthdr_masked_value_get( (of_oxm_ipv6_exthdr_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv6_exthdr_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_ipv6_exthdr_masked_value_mask_set( (of_oxm_ipv6_exthdr_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_exthdr_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_ipv6_exthdr_masked_value_mask_get( (of_oxm_ipv6_exthdr_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv6_flabel_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_ipv6_flabel_value_set( (of_oxm_ipv6_flabel_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_flabel_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_ipv6_flabel_value_get( (of_oxm_ipv6_flabel_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv6_flabel_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_ipv6_flabel_masked_value_set( (of_oxm_ipv6_flabel_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_flabel_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_ipv6_flabel_masked_value_get( (of_oxm_ipv6_flabel_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv6_flabel_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_ipv6_flabel_masked_value_mask_set( (of_oxm_ipv6_flabel_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_flabel_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_ipv6_flabel_masked_value_mask_get( (of_oxm_ipv6_flabel_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_ipv6_nd_sll_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_ipv6_nd_sll_value_set( (of_oxm_ipv6_nd_sll_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_nd_sll_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_ipv6_nd_sll_value_get( (of_oxm_ipv6_nd_sll_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_ipv6_nd_sll_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_ipv6_nd_sll_masked_value_set( (of_oxm_ipv6_nd_sll_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_nd_sll_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_ipv6_nd_sll_masked_value_get( (of_oxm_ipv6_nd_sll_masked_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_ipv6_nd_sll_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_ipv6_nd_sll_masked_value_mask_set( (of_oxm_ipv6_nd_sll_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_nd_sll_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_ipv6_nd_sll_masked_value_mask_get( (of_oxm_ipv6_nd_sll_masked_t *) o, &tmp);
	memcpy(val,&tmp,6);
	return;
}

void do_of_oxm_ipv6_nd_target_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//tmp = val;
	//of_oxm_ipv6_nd_target_value_set( (of_oxm_ipv6_nd_target_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_nd_target_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//of_oxm_ipv6_nd_target_value_get( (of_oxm_ipv6_nd_target_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_ipv6_nd_target_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//tmp = val;
	//of_oxm_ipv6_nd_target_masked_value_set( (of_oxm_ipv6_nd_target_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_nd_target_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//of_oxm_ipv6_nd_target_masked_value_get( (of_oxm_ipv6_nd_target_masked_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_ipv6_nd_target_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//tmp = val;
	//of_oxm_ipv6_nd_target_masked_value_mask_set( (of_oxm_ipv6_nd_target_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_nd_target_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//of_oxm_ipv6_nd_target_masked_value_mask_get( (of_oxm_ipv6_nd_target_masked_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_ipv6_nd_tll_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_ipv6_nd_tll_value_set( (of_oxm_ipv6_nd_tll_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_nd_tll_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_ipv6_nd_tll_value_get( (of_oxm_ipv6_nd_tll_t *) o, &tmp);
	memcpy(val,&tmp, 6);
	return;
}

void do_of_oxm_ipv6_nd_tll_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_ipv6_nd_tll_masked_value_set( (of_oxm_ipv6_nd_tll_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_nd_tll_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_ipv6_nd_tll_masked_value_get( (of_oxm_ipv6_nd_tll_masked_t *) o, &tmp);
	memcpy(val,&tmp, 6);
	return;
}

void do_of_oxm_ipv6_nd_tll_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_oxm_ipv6_nd_tll_masked_value_mask_set( (of_oxm_ipv6_nd_tll_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_nd_tll_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_oxm_ipv6_nd_tll_masked_value_mask_get( (of_oxm_ipv6_nd_tll_masked_t *) o, &tmp);
	memcpy(val,&tmp, 6);
	return;
}

void do_of_oxm_ipv6_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//tmp = val;
	//of_oxm_ipv6_src_value_set( (of_oxm_ipv6_src_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//of_oxm_ipv6_src_value_get( (of_oxm_ipv6_src_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_ipv6_src_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//tmp = val;
	//of_oxm_ipv6_src_masked_value_set( (of_oxm_ipv6_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_src_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//of_oxm_ipv6_src_masked_value_get( (of_oxm_ipv6_src_masked_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_ipv6_src_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//tmp = val;
	//of_oxm_ipv6_src_masked_value_mask_set( (of_oxm_ipv6_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_ipv6_src_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_ipv6_t tmp;
	//of_oxm_ipv6_src_masked_value_mask_get( (of_oxm_ipv6_src_masked_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_oxm_metadata_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_oxm_metadata_value_set( (of_oxm_metadata_t *) o, tmp);
	return;
}

void do_of_oxm_metadata_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_oxm_metadata_value_get( (of_oxm_metadata_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_metadata_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_oxm_metadata_masked_value_set( (of_oxm_metadata_masked_t *) o, tmp);
	return;
}

void do_of_oxm_metadata_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_oxm_metadata_masked_value_get( (of_oxm_metadata_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_metadata_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_oxm_metadata_masked_value_mask_set( (of_oxm_metadata_masked_t *) o, tmp);
	return;
}

void do_of_oxm_metadata_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_oxm_metadata_masked_value_mask_get( (of_oxm_metadata_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_mpls_bos_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_mpls_bos_value_set( (of_oxm_mpls_bos_t *) o, tmp);
	return;
}

void do_of_oxm_mpls_bos_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_mpls_bos_value_get( (of_oxm_mpls_bos_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_mpls_bos_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_mpls_bos_masked_value_set( (of_oxm_mpls_bos_masked_t *) o, tmp);
	return;
}

void do_of_oxm_mpls_bos_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_mpls_bos_masked_value_get( (of_oxm_mpls_bos_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_mpls_bos_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_mpls_bos_masked_value_mask_set( (of_oxm_mpls_bos_masked_t *) o, tmp);
	return;
}

void do_of_oxm_mpls_bos_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_mpls_bos_masked_value_mask_get( (of_oxm_mpls_bos_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_mpls_label_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_mpls_label_value_set( (of_oxm_mpls_label_t *) o, tmp);
	return;
}

void do_of_oxm_mpls_label_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_mpls_label_value_get( (of_oxm_mpls_label_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_mpls_label_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_mpls_label_masked_value_set( (of_oxm_mpls_label_masked_t *) o, tmp);
	return;
}

void do_of_oxm_mpls_label_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_mpls_label_masked_value_get( (of_oxm_mpls_label_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_mpls_label_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_oxm_mpls_label_masked_value_mask_set( (of_oxm_mpls_label_masked_t *) o, tmp);
	return;
}

void do_of_oxm_mpls_label_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_oxm_mpls_label_masked_value_mask_get( (of_oxm_mpls_label_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_mpls_tc_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_mpls_tc_value_set( (of_oxm_mpls_tc_t *) o, tmp);
	return;
}

void do_of_oxm_mpls_tc_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_mpls_tc_value_get( (of_oxm_mpls_tc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_mpls_tc_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_mpls_tc_masked_value_set( (of_oxm_mpls_tc_masked_t *) o, tmp);
	return;
}

void do_of_oxm_mpls_tc_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_mpls_tc_masked_value_get( (of_oxm_mpls_tc_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_mpls_tc_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_mpls_tc_masked_value_mask_set( (of_oxm_mpls_tc_masked_t *) o, tmp);
	return;
}

void do_of_oxm_mpls_tc_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_mpls_tc_masked_value_mask_get( (of_oxm_mpls_tc_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_pbb_uca_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_pbb_uca_value_set( (of_oxm_pbb_uca_t *) o, tmp);
	return;
}

void do_of_oxm_pbb_uca_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_pbb_uca_value_get( (of_oxm_pbb_uca_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_pbb_uca_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_pbb_uca_masked_value_set( (of_oxm_pbb_uca_masked_t *) o, tmp);
	return;
}

void do_of_oxm_pbb_uca_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_pbb_uca_masked_value_get( (of_oxm_pbb_uca_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_pbb_uca_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_pbb_uca_masked_value_mask_set( (of_oxm_pbb_uca_masked_t *) o, tmp);
	return;
}

void do_of_oxm_pbb_uca_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_pbb_uca_masked_value_mask_get( (of_oxm_pbb_uca_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_sctp_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_sctp_dst_value_set( (of_oxm_sctp_dst_t *) o, tmp);
	return;
}

void do_of_oxm_sctp_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_sctp_dst_value_get( (of_oxm_sctp_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_sctp_dst_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_sctp_dst_masked_value_set( (of_oxm_sctp_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_sctp_dst_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_sctp_dst_masked_value_get( (of_oxm_sctp_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_sctp_dst_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_sctp_dst_masked_value_mask_set( (of_oxm_sctp_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_sctp_dst_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_sctp_dst_masked_value_mask_get( (of_oxm_sctp_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_sctp_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_sctp_src_value_set( (of_oxm_sctp_src_t *) o, tmp);
	return;
}

void do_of_oxm_sctp_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_sctp_src_value_get( (of_oxm_sctp_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_sctp_src_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_sctp_src_masked_value_set( (of_oxm_sctp_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_sctp_src_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_sctp_src_masked_value_get( (of_oxm_sctp_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_sctp_src_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_sctp_src_masked_value_mask_set( (of_oxm_sctp_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_sctp_src_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_sctp_src_masked_value_mask_get( (of_oxm_sctp_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tcp_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_tcp_dst_value_set( (of_oxm_tcp_dst_t *) o, tmp);
	return;
}

void do_of_oxm_tcp_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_tcp_dst_value_get( (of_oxm_tcp_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tcp_dst_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_tcp_dst_masked_value_set( (of_oxm_tcp_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tcp_dst_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_tcp_dst_masked_value_get( (of_oxm_tcp_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tcp_dst_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_tcp_dst_masked_value_mask_set( (of_oxm_tcp_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tcp_dst_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_tcp_dst_masked_value_mask_get( (of_oxm_tcp_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tcp_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_tcp_src_value_set( (of_oxm_tcp_src_t *) o, tmp);
	return;
}

void do_of_oxm_tcp_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_tcp_src_value_get( (of_oxm_tcp_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tcp_src_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_tcp_src_masked_value_set( (of_oxm_tcp_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tcp_src_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_tcp_src_masked_value_get( (of_oxm_tcp_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tcp_src_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_tcp_src_masked_value_mask_set( (of_oxm_tcp_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tcp_src_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_tcp_src_masked_value_mask_get( (of_oxm_tcp_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tunnel_id_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_oxm_tunnel_id_value_set( (of_oxm_tunnel_id_t *) o, tmp);
	return;
}

void do_of_oxm_tunnel_id_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_oxm_tunnel_id_value_get( (of_oxm_tunnel_id_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tunnel_id_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_oxm_tunnel_id_masked_value_set( (of_oxm_tunnel_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tunnel_id_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_oxm_tunnel_id_masked_value_get( (of_oxm_tunnel_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tunnel_id_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_oxm_tunnel_id_masked_value_mask_set( (of_oxm_tunnel_id_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tunnel_id_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_oxm_tunnel_id_masked_value_mask_get( (of_oxm_tunnel_id_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tunnel_ipv4_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_tunnel_ipv4_dst_value_set( (of_oxm_tunnel_ipv4_dst_t *) o, tmp);
	return;
}

void do_of_oxm_tunnel_ipv4_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_tunnel_ipv4_dst_value_get( (of_oxm_tunnel_ipv4_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tunnel_ipv4_dst_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_tunnel_ipv4_dst_masked_value_set( (of_oxm_tunnel_ipv4_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tunnel_ipv4_dst_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_tunnel_ipv4_dst_masked_value_get( (of_oxm_tunnel_ipv4_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tunnel_ipv4_dst_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_tunnel_ipv4_dst_masked_value_mask_set( (of_oxm_tunnel_ipv4_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tunnel_ipv4_dst_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_tunnel_ipv4_dst_masked_value_mask_get( (of_oxm_tunnel_ipv4_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tunnel_ipv4_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_tunnel_ipv4_src_value_set( (of_oxm_tunnel_ipv4_src_t *) o, tmp);
	return;
}

void do_of_oxm_tunnel_ipv4_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_tunnel_ipv4_src_value_get( (of_oxm_tunnel_ipv4_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tunnel_ipv4_src_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_tunnel_ipv4_src_masked_value_set( (of_oxm_tunnel_ipv4_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tunnel_ipv4_src_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_tunnel_ipv4_src_masked_value_get( (of_oxm_tunnel_ipv4_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_tunnel_ipv4_src_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	tmp = val;
	of_oxm_tunnel_ipv4_src_masked_value_mask_set( (of_oxm_tunnel_ipv4_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_tunnel_ipv4_src_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_ipv4_t tmp;
	of_oxm_tunnel_ipv4_src_masked_value_mask_get( (of_oxm_tunnel_ipv4_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_udp_dst_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_udp_dst_value_set( (of_oxm_udp_dst_t *) o, tmp);
	return;
}

void do_of_oxm_udp_dst_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_udp_dst_value_get( (of_oxm_udp_dst_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_udp_dst_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_udp_dst_masked_value_set( (of_oxm_udp_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_udp_dst_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_udp_dst_masked_value_get( (of_oxm_udp_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_udp_dst_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_udp_dst_masked_value_mask_set( (of_oxm_udp_dst_masked_t *) o, tmp);
	return;
}

void do_of_oxm_udp_dst_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_udp_dst_masked_value_mask_get( (of_oxm_udp_dst_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_udp_src_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_udp_src_value_set( (of_oxm_udp_src_t *) o, tmp);
	return;
}

void do_of_oxm_udp_src_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_udp_src_value_get( (of_oxm_udp_src_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_udp_src_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_udp_src_masked_value_set( (of_oxm_udp_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_udp_src_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_udp_src_masked_value_get( (of_oxm_udp_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_udp_src_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_udp_src_masked_value_mask_set( (of_oxm_udp_src_masked_t *) o, tmp);
	return;
}

void do_of_oxm_udp_src_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_udp_src_masked_value_mask_get( (of_oxm_udp_src_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_vlan_pcp_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_vlan_pcp_value_set( (of_oxm_vlan_pcp_t *) o, tmp);
	return;
}

void do_of_oxm_vlan_pcp_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_vlan_pcp_value_get( (of_oxm_vlan_pcp_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_vlan_pcp_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_vlan_pcp_masked_value_set( (of_oxm_vlan_pcp_masked_t *) o, tmp);
	return;
}

void do_of_oxm_vlan_pcp_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_vlan_pcp_masked_value_get( (of_oxm_vlan_pcp_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_vlan_pcp_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_oxm_vlan_pcp_masked_value_mask_set( (of_oxm_vlan_pcp_masked_t *) o, tmp);
	return;
}

void do_of_oxm_vlan_pcp_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_oxm_vlan_pcp_masked_value_mask_get( (of_oxm_vlan_pcp_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_vlan_vid_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_vlan_vid_value_set( (of_oxm_vlan_vid_t *) o, tmp);
	return;
}

void do_of_oxm_vlan_vid_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_vlan_vid_value_get( (of_oxm_vlan_vid_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_vlan_vid_masked_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_vlan_vid_masked_value_set( (of_oxm_vlan_vid_masked_t *) o, tmp);
	return;
}

void do_of_oxm_vlan_vid_masked_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_vlan_vid_masked_value_get( (of_oxm_vlan_vid_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_oxm_vlan_vid_masked_value_mask_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_oxm_vlan_vid_masked_value_mask_set( (of_oxm_vlan_vid_masked_t *) o, tmp);
	return;
}

void do_of_oxm_vlan_vid_masked_value_mask_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_oxm_vlan_vid_masked_value_mask_get( (of_oxm_vlan_vid_masked_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_queue_queue_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_packet_queue_queue_id_set( (of_packet_queue_t *) o, tmp);
	return;
}

void do_of_packet_queue_queue_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_packet_queue_queue_id_get( (of_packet_queue_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_queue_port_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_packet_queue_port_set( (of_packet_queue_t *) o, tmp);
	return;
}

void do_of_packet_queue_port_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_packet_queue_port_get( (of_packet_queue_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_packet_queue_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_queue_prop_t *tmp;
	tmp = of_packet_queue_properties_get( (of_packet_queue_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_packet_queue_properties_set( (of_packet_queue_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_packet_queue_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_queue_prop_t *tmp;
	tmp = of_packet_queue_properties_get( (of_packet_queue_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_desc_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_port_desc_port_no_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_port_desc_port_no_get( (of_port_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_hw_addr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	memcpy(tmp.addr,&val,6);
	of_port_desc_hw_addr_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_hw_addr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_mac_addr_t tmp;
	of_port_desc_hw_addr_get( (of_port_desc_t *) o, &tmp);
	memcpy(val,&tmp, 6);
	return;
}

void do_of_port_desc_name_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_port_name_t tmp;
	//tmp = val;
	//of_port_desc_name_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_name_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_port_name_t tmp;
	//of_port_desc_name_get( (of_port_desc_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_port_desc_config_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_config_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_config_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_config_get( (of_port_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_state_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_state_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_state_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_state_get( (of_port_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_port_desc_prop_t *tmp;
	tmp = of_port_desc_properties_get( (of_port_desc_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_port_desc_properties_set( (of_port_desc_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_desc_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_port_desc_prop_t *tmp;
	tmp = of_port_desc_properties_get( (of_port_desc_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_desc_curr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_curr_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_curr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_curr_get( (of_port_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_advertised_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_advertised_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_advertised_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_advertised_get( (of_port_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_supported_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_supported_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_supported_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_supported_get( (of_port_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_peer_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_peer_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_peer_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_peer_get( (of_port_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_curr_speed_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_curr_speed_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_curr_speed_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_curr_speed_get( (of_port_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_max_speed_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_max_speed_set( (of_port_desc_t *) o, tmp);
	return;
}

void do_of_port_desc_max_speed_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_max_speed_get( (of_port_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_bsn_uplink_experimenter_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_bsn_uplink_experimenter_set( (of_port_desc_prop_bsn_uplink_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_bsn_uplink_experimenter_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_bsn_uplink_experimenter_get( (of_port_desc_prop_bsn_uplink_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_bsn_uplink_exp_type_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_bsn_uplink_exp_type_set( (of_port_desc_prop_bsn_uplink_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_bsn_uplink_exp_type_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_bsn_uplink_exp_type_get( (of_port_desc_prop_bsn_uplink_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_ethernet_curr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_ethernet_curr_set( (of_port_desc_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_ethernet_curr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_ethernet_curr_get( (of_port_desc_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_ethernet_advertised_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_ethernet_advertised_set( (of_port_desc_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_ethernet_advertised_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_ethernet_advertised_get( (of_port_desc_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_ethernet_supported_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_ethernet_supported_set( (of_port_desc_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_ethernet_supported_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_ethernet_supported_get( (of_port_desc_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_ethernet_peer_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_ethernet_peer_set( (of_port_desc_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_ethernet_peer_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_ethernet_peer_get( (of_port_desc_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_ethernet_curr_speed_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_ethernet_curr_speed_set( (of_port_desc_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_ethernet_curr_speed_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_ethernet_curr_speed_get( (of_port_desc_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_ethernet_max_speed_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_ethernet_max_speed_set( (of_port_desc_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_ethernet_max_speed_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_ethernet_max_speed_get( (of_port_desc_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_optical_supported_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_optical_supported_set( (of_port_desc_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_optical_supported_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_optical_supported_get( (of_port_desc_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_optical_tx_min_freq_lmda_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_optical_tx_min_freq_lmda_set( (of_port_desc_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_optical_tx_min_freq_lmda_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_optical_tx_min_freq_lmda_get( (of_port_desc_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_optical_tx_max_freq_lmda_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_optical_tx_max_freq_lmda_set( (of_port_desc_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_optical_tx_max_freq_lmda_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_optical_tx_max_freq_lmda_get( (of_port_desc_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_optical_tx_grid_freq_lmda_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_optical_tx_grid_freq_lmda_set( (of_port_desc_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_optical_tx_grid_freq_lmda_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_optical_tx_grid_freq_lmda_get( (of_port_desc_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_optical_rx_min_freq_lmda_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_optical_rx_min_freq_lmda_set( (of_port_desc_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_optical_rx_min_freq_lmda_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_optical_rx_min_freq_lmda_get( (of_port_desc_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_optical_rx_max_freq_lmda_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_optical_rx_max_freq_lmda_set( (of_port_desc_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_optical_rx_max_freq_lmda_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_optical_rx_max_freq_lmda_get( (of_port_desc_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_optical_rx_grid_freq_lmda_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_optical_rx_grid_freq_lmda_set( (of_port_desc_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_optical_rx_grid_freq_lmda_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_optical_rx_grid_freq_lmda_get( (of_port_desc_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_optical_tx_pwr_min_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_optical_tx_pwr_min_set( (of_port_desc_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_optical_tx_pwr_min_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_optical_tx_pwr_min_get( (of_port_desc_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_desc_prop_optical_tx_pwr_max_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_desc_prop_optical_tx_pwr_max_set( (of_port_desc_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_desc_prop_optical_tx_pwr_max_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_desc_prop_optical_tx_pwr_max_get( (of_port_desc_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_prop_ethernet_advertise_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_prop_ethernet_advertise_set( (of_port_mod_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_mod_prop_ethernet_advertise_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_prop_ethernet_advertise_get( (of_port_mod_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_prop_optical_configure_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_prop_optical_configure_set( (of_port_mod_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_mod_prop_optical_configure_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_prop_optical_configure_get( (of_port_mod_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_prop_optical_freq_ldma_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_prop_optical_freq_ldma_set( (of_port_mod_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_mod_prop_optical_freq_ldma_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_prop_optical_freq_ldma_get( (of_port_mod_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_prop_optical_fl_offset_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_prop_optical_fl_offset_set( (of_port_mod_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_mod_prop_optical_fl_offset_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_prop_optical_fl_offset_get( (of_port_mod_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_prop_optical_grid_span_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_prop_optical_grid_span_set( (of_port_mod_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_mod_prop_optical_grid_span_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_prop_optical_grid_span_get( (of_port_mod_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_mod_prop_optical_tx_pwr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_mod_prop_optical_tx_pwr_set( (of_port_mod_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_mod_prop_optical_tx_pwr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_mod_prop_optical_tx_pwr_get( (of_port_mod_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_port_stats_entry_port_no_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_port_stats_entry_port_no_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_duration_sec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_entry_duration_sec_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_duration_sec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_entry_duration_sec_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_duration_nsec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_entry_duration_nsec_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_duration_nsec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_entry_duration_nsec_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_rx_packets_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_rx_packets_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_rx_packets_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_rx_packets_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_tx_packets_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_tx_packets_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_tx_packets_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_tx_packets_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_rx_bytes_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_rx_bytes_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_rx_bytes_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_rx_bytes_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_tx_bytes_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_tx_bytes_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_tx_bytes_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_tx_bytes_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_rx_dropped_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_rx_dropped_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_rx_dropped_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_rx_dropped_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_tx_dropped_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_tx_dropped_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_tx_dropped_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_tx_dropped_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_rx_errors_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_rx_errors_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_rx_errors_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_rx_errors_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_tx_errors_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_tx_errors_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_tx_errors_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_tx_errors_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_port_stats_prop_t *tmp;
	tmp = of_port_stats_entry_properties_get( (of_port_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_port_stats_entry_properties_set( (of_port_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_stats_entry_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_port_stats_prop_t *tmp;
	tmp = of_port_stats_entry_properties_get( (of_port_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_port_stats_entry_rx_frame_err_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_rx_frame_err_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_rx_frame_err_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_rx_frame_err_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_rx_over_err_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_rx_over_err_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_rx_over_err_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_rx_over_err_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_rx_crc_err_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_rx_crc_err_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_rx_crc_err_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_rx_crc_err_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_entry_collisions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_entry_collisions_set( (of_port_stats_entry_t *) o, tmp);
	return;
}

void do_of_port_stats_entry_collisions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_entry_collisions_get( (of_port_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_ethernet_rx_frame_err_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_prop_ethernet_rx_frame_err_set( (of_port_stats_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_ethernet_rx_frame_err_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_prop_ethernet_rx_frame_err_get( (of_port_stats_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_ethernet_rx_over_err_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_prop_ethernet_rx_over_err_set( (of_port_stats_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_ethernet_rx_over_err_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_prop_ethernet_rx_over_err_get( (of_port_stats_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_ethernet_rx_crc_err_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_prop_ethernet_rx_crc_err_set( (of_port_stats_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_ethernet_rx_crc_err_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_prop_ethernet_rx_crc_err_get( (of_port_stats_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_ethernet_collisions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_port_stats_prop_ethernet_collisions_set( (of_port_stats_prop_ethernet_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_ethernet_collisions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_port_stats_prop_ethernet_collisions_get( (of_port_stats_prop_ethernet_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_prop_optical_flags_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_prop_optical_flags_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_tx_freq_lmda_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_prop_optical_tx_freq_lmda_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_tx_freq_lmda_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_prop_optical_tx_freq_lmda_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_tx_offset_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_prop_optical_tx_offset_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_tx_offset_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_prop_optical_tx_offset_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_tx_grid_span_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_prop_optical_tx_grid_span_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_tx_grid_span_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_prop_optical_tx_grid_span_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_rx_freq_lmda_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_prop_optical_rx_freq_lmda_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_rx_freq_lmda_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_prop_optical_rx_freq_lmda_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_rx_offset_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_prop_optical_rx_offset_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_rx_offset_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_prop_optical_rx_offset_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_rx_grid_span_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_port_stats_prop_optical_rx_grid_span_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_rx_grid_span_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_port_stats_prop_optical_rx_grid_span_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_tx_pwr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_port_stats_prop_optical_tx_pwr_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_tx_pwr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_port_stats_prop_optical_tx_pwr_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_rx_pwr_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_port_stats_prop_optical_rx_pwr_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_rx_pwr_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_port_stats_prop_optical_rx_pwr_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_bias_current_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_port_stats_prop_optical_bias_current_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_bias_current_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_port_stats_prop_optical_bias_current_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_port_stats_prop_optical_temperature_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_port_stats_prop_optical_temperature_set( (of_port_stats_prop_optical_t *) o, tmp);
	return;
}

void do_of_port_stats_prop_optical_temperature_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_port_stats_prop_optical_temperature_get( (of_port_stats_prop_optical_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_desc_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_desc_port_no_set( (of_queue_desc_t *) o, tmp);
	return;
}

void do_of_queue_desc_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_desc_port_no_get( (of_queue_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_desc_queue_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_desc_queue_id_set( (of_queue_desc_t *) o, tmp);
	return;
}

void do_of_queue_desc_queue_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_desc_queue_id_get( (of_queue_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_desc_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_queue_desc_prop_t *tmp;
	tmp = of_queue_desc_properties_get( (of_queue_desc_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_queue_desc_properties_set( (of_queue_desc_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_desc_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_queue_desc_prop_t *tmp;
	tmp = of_queue_desc_properties_get( (of_queue_desc_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_desc_prop_max_rate_rate_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_queue_desc_prop_max_rate_rate_set( (of_queue_desc_prop_max_rate_t *) o, tmp);
	return;
}

void do_of_queue_desc_prop_max_rate_rate_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_queue_desc_prop_max_rate_rate_get( (of_queue_desc_prop_max_rate_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_desc_prop_min_rate_rate_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_queue_desc_prop_min_rate_rate_set( (of_queue_desc_prop_min_rate_t *) o, tmp);
	return;
}

void do_of_queue_desc_prop_min_rate_rate_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_queue_desc_prop_min_rate_rate_get( (of_queue_desc_prop_min_rate_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_prop_max_rate_rate_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_queue_prop_max_rate_rate_set( (of_queue_prop_max_rate_t *) o, tmp);
	return;
}

void do_of_queue_prop_max_rate_rate_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_queue_prop_max_rate_rate_get( (of_queue_prop_max_rate_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_prop_min_rate_rate_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint16_t tmp;
	tmp = val;
	of_queue_prop_min_rate_rate_set( (of_queue_prop_min_rate_t *) o, tmp);
	return;
}

void do_of_queue_prop_min_rate_rate_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint16_t tmp;
	of_queue_prop_min_rate_rate_get( (of_queue_prop_min_rate_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_entry_port_no_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_port_no_t tmp;
	tmp = val;
	of_queue_stats_entry_port_no_set( (of_queue_stats_entry_t *) o, tmp);
	return;
}

void do_of_queue_stats_entry_port_no_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_port_no_t tmp;
	of_queue_stats_entry_port_no_get( (of_queue_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_entry_queue_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_stats_entry_queue_id_set( (of_queue_stats_entry_t *) o, tmp);
	return;
}

void do_of_queue_stats_entry_queue_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_stats_entry_queue_id_get( (of_queue_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_entry_tx_bytes_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_queue_stats_entry_tx_bytes_set( (of_queue_stats_entry_t *) o, tmp);
	return;
}

void do_of_queue_stats_entry_tx_bytes_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_queue_stats_entry_tx_bytes_get( (of_queue_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_entry_tx_packets_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_queue_stats_entry_tx_packets_set( (of_queue_stats_entry_t *) o, tmp);
	return;
}

void do_of_queue_stats_entry_tx_packets_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_queue_stats_entry_tx_packets_get( (of_queue_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_entry_tx_errors_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_queue_stats_entry_tx_errors_set( (of_queue_stats_entry_t *) o, tmp);
	return;
}

void do_of_queue_stats_entry_tx_errors_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_queue_stats_entry_tx_errors_get( (of_queue_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_entry_duration_sec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_stats_entry_duration_sec_set( (of_queue_stats_entry_t *) o, tmp);
	return;
}

void do_of_queue_stats_entry_duration_sec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_stats_entry_duration_sec_get( (of_queue_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_entry_duration_nsec_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_queue_stats_entry_duration_nsec_set( (of_queue_stats_entry_t *) o, tmp);
	return;
}

void do_of_queue_stats_entry_duration_nsec_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_queue_stats_entry_duration_nsec_get( (of_queue_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_queue_stats_entry_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_queue_stats_prop_t *tmp;
	tmp = of_queue_stats_entry_properties_get( (of_queue_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_queue_stats_entry_properties_set( (of_queue_stats_entry_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_queue_stats_entry_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_queue_stats_prop_t *tmp;
	tmp = of_queue_stats_entry_properties_get( (of_queue_stats_entry_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_desc_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_table_desc_table_id_set( (of_table_desc_t *) o, tmp);
	return;
}

void do_of_table_desc_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_table_desc_table_id_get( (of_table_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_desc_config_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_desc_config_set( (of_table_desc_t *) o, tmp);
	return;
}

void do_of_table_desc_config_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_desc_config_get( (of_table_desc_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_feature_prop_apply_actions_action_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_id_t *tmp;
	tmp = of_table_feature_prop_apply_actions_action_ids_get( (of_table_feature_prop_apply_actions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_apply_actions_action_ids_set( (of_table_feature_prop_apply_actions_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_apply_actions_action_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_id_t *tmp;
	tmp = of_table_feature_prop_apply_actions_action_ids_get( (of_table_feature_prop_apply_actions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_apply_actions_miss_action_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_id_t *tmp;
	tmp = of_table_feature_prop_apply_actions_miss_action_ids_get( (of_table_feature_prop_apply_actions_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_apply_actions_miss_action_ids_set( (of_table_feature_prop_apply_actions_miss_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_apply_actions_miss_action_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_id_t *tmp;
	tmp = of_table_feature_prop_apply_actions_miss_action_ids_get( (of_table_feature_prop_apply_actions_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_apply_setfield_oxm_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_apply_setfield_oxm_ids_get( (of_table_feature_prop_apply_setfield_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_apply_setfield_oxm_ids_set( (of_table_feature_prop_apply_setfield_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_apply_setfield_oxm_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_apply_setfield_oxm_ids_get( (of_table_feature_prop_apply_setfield_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_apply_setfield_miss_oxm_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_apply_setfield_miss_oxm_ids_get( (of_table_feature_prop_apply_setfield_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_apply_setfield_miss_oxm_ids_set( (of_table_feature_prop_apply_setfield_miss_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_apply_setfield_miss_oxm_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_apply_setfield_miss_oxm_ids_get( (of_table_feature_prop_apply_setfield_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_instructions_instruction_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_instruction_id_t *tmp;
	tmp = of_table_feature_prop_instructions_instruction_ids_get( (of_table_feature_prop_instructions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_instructions_instruction_ids_set( (of_table_feature_prop_instructions_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_instructions_instruction_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_instruction_id_t *tmp;
	tmp = of_table_feature_prop_instructions_instruction_ids_get( (of_table_feature_prop_instructions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_instructions_miss_instruction_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_instruction_id_t *tmp;
	tmp = of_table_feature_prop_instructions_miss_instruction_ids_get( (of_table_feature_prop_instructions_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_instructions_miss_instruction_ids_set( (of_table_feature_prop_instructions_miss_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_instructions_miss_instruction_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_instruction_id_t *tmp;
	tmp = of_table_feature_prop_instructions_miss_instruction_ids_get( (of_table_feature_prop_instructions_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_match_oxm_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_match_oxm_ids_get( (of_table_feature_prop_match_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_match_oxm_ids_set( (of_table_feature_prop_match_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_match_oxm_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_match_oxm_ids_get( (of_table_feature_prop_match_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_next_tables_next_table_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint8_t *tmp;
	tmp = of_table_feature_prop_next_tables_next_table_ids_get( (of_table_feature_prop_next_tables_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_next_tables_next_table_ids_set( (of_table_feature_prop_next_tables_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_next_tables_next_table_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint8_t *tmp;
	tmp = of_table_feature_prop_next_tables_next_table_ids_get( (of_table_feature_prop_next_tables_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_next_tables_miss_next_table_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint8_t *tmp;
	tmp = of_table_feature_prop_next_tables_miss_next_table_ids_get( (of_table_feature_prop_next_tables_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_next_tables_miss_next_table_ids_set( (of_table_feature_prop_next_tables_miss_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_next_tables_miss_next_table_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint8_t *tmp;
	tmp = of_table_feature_prop_next_tables_miss_next_table_ids_get( (of_table_feature_prop_next_tables_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_table_sync_from_table_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint8_t *tmp;
	tmp = of_table_feature_prop_table_sync_from_table_ids_get( (of_table_feature_prop_table_sync_from_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_table_sync_from_table_ids_set( (of_table_feature_prop_table_sync_from_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_table_sync_from_table_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint8_t *tmp;
	tmp = of_table_feature_prop_table_sync_from_table_ids_get( (of_table_feature_prop_table_sync_from_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_wildcards_oxm_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_wildcards_oxm_ids_get( (of_table_feature_prop_wildcards_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_wildcards_oxm_ids_set( (of_table_feature_prop_wildcards_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_wildcards_oxm_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_wildcards_oxm_ids_get( (of_table_feature_prop_wildcards_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_write_actions_action_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_id_t *tmp;
	tmp = of_table_feature_prop_write_actions_action_ids_get( (of_table_feature_prop_write_actions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_write_actions_action_ids_set( (of_table_feature_prop_write_actions_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_write_actions_action_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_id_t *tmp;
	tmp = of_table_feature_prop_write_actions_action_ids_get( (of_table_feature_prop_write_actions_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_write_actions_miss_action_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_action_id_t *tmp;
	tmp = of_table_feature_prop_write_actions_miss_action_ids_get( (of_table_feature_prop_write_actions_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_write_actions_miss_action_ids_set( (of_table_feature_prop_write_actions_miss_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_write_actions_miss_action_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_action_id_t *tmp;
	tmp = of_table_feature_prop_write_actions_miss_action_ids_get( (of_table_feature_prop_write_actions_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_write_setfield_oxm_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_write_setfield_oxm_ids_get( (of_table_feature_prop_write_setfield_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_write_setfield_oxm_ids_set( (of_table_feature_prop_write_setfield_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_write_setfield_oxm_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_write_setfield_oxm_ids_get( (of_table_feature_prop_write_setfield_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_write_setfield_miss_oxm_ids_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_write_setfield_miss_oxm_ids_get( (of_table_feature_prop_write_setfield_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_feature_prop_write_setfield_miss_oxm_ids_set( (of_table_feature_prop_write_setfield_miss_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_feature_prop_write_setfield_miss_oxm_ids_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_uint32_t *tmp;
	tmp = of_table_feature_prop_write_setfield_miss_oxm_ids_get( (of_table_feature_prop_write_setfield_miss_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_features_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_table_features_table_id_set( (of_table_features_t *) o, tmp);
	return;
}

void do_of_table_features_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_table_features_table_id_get( (of_table_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_name_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_table_name_t tmp;
	//tmp = val;
	//of_table_features_name_set( (of_table_features_t *) o, tmp);
	return;
}

void do_of_table_features_name_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_table_name_t tmp;
	//of_table_features_name_get( (of_table_features_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_table_features_metadata_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_table_features_metadata_match_set( (of_table_features_t *) o, tmp);
	return;
}

void do_of_table_features_metadata_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_table_features_metadata_match_get( (of_table_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_metadata_write_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_table_features_metadata_write_set( (of_table_features_t *) o, tmp);
	return;
}

void do_of_table_features_metadata_write_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_table_features_metadata_write_get( (of_table_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_config_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_features_config_set( (of_table_features_t *) o, tmp);
	return;
}

void do_of_table_features_config_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_features_config_get( (of_table_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_max_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_features_max_entries_set( (of_table_features_t *) o, tmp);
	return;
}

void do_of_table_features_max_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_features_max_entries_get( (of_table_features_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_features_properties_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_list_table_feature_prop_t *tmp;
	tmp = of_table_features_properties_get( (of_table_features_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	set_field((of_object_t*)tmp, val, f, l);
	if (of_table_features_properties_set( (of_table_features_t *) o, tmp)) {
		//nothing
	}
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_features_properties_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_list_table_feature_prop_t *tmp;
	tmp = of_table_features_properties_get( (of_table_features_t *) o);
	if (!tmp) {
		return;
	}
	l++;
	get_field((of_object_t*)tmp, val, f, l);
	of_object_delete((of_object_t*)tmp);
	return;
}

void do_of_table_mod_prop_eviction_flags_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_mod_prop_eviction_flags_set( (of_table_mod_prop_eviction_t *) o, tmp);
	return;
}

void do_of_table_mod_prop_eviction_flags_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_mod_prop_eviction_flags_get( (of_table_mod_prop_eviction_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_mod_prop_vacancy_vacancy_down_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_table_mod_prop_vacancy_vacancy_down_set( (of_table_mod_prop_vacancy_t *) o, tmp);
	return;
}

void do_of_table_mod_prop_vacancy_vacancy_down_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_table_mod_prop_vacancy_vacancy_down_get( (of_table_mod_prop_vacancy_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_mod_prop_vacancy_vacancy_up_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_table_mod_prop_vacancy_vacancy_up_set( (of_table_mod_prop_vacancy_t *) o, tmp);
	return;
}

void do_of_table_mod_prop_vacancy_vacancy_up_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_table_mod_prop_vacancy_vacancy_up_get( (of_table_mod_prop_vacancy_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_mod_prop_vacancy_vacancy_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_table_mod_prop_vacancy_vacancy_set( (of_table_mod_prop_vacancy_t *) o, tmp);
	return;
}

void do_of_table_mod_prop_vacancy_vacancy_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_table_mod_prop_vacancy_vacancy_get( (of_table_mod_prop_vacancy_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_table_id_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_table_stats_entry_table_id_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_table_id_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_table_stats_entry_table_id_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_active_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_stats_entry_active_count_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_active_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_stats_entry_active_count_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_lookup_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_table_stats_entry_lookup_count_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_lookup_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_table_stats_entry_lookup_count_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_matched_count_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_table_stats_entry_matched_count_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_matched_count_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_table_stats_entry_matched_count_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_name_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	//TODO
	//of_table_name_t tmp;
	//tmp = val;
	//of_table_stats_entry_name_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_name_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	//TODO
	//of_table_name_t tmp;
	//of_table_stats_entry_name_get( (of_table_stats_entry_t *) o, &tmp);
	//*val = tmp;
	return;
}

void do_of_table_stats_entry_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_match_bmap_t tmp;
	tmp = val;
	of_table_stats_entry_match_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_match_bmap_t tmp;
	of_table_stats_entry_match_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_wildcards_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	of_wc_bmap_t tmp;
	tmp = val;
	of_table_stats_entry_wildcards_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_wildcards_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	of_wc_bmap_t tmp;
	of_table_stats_entry_wildcards_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_write_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_stats_entry_write_actions_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_write_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_stats_entry_write_actions_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_apply_actions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_stats_entry_apply_actions_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_apply_actions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_stats_entry_apply_actions_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_write_setfields_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_table_stats_entry_write_setfields_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_write_setfields_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_table_stats_entry_write_setfields_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_apply_setfields_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_table_stats_entry_apply_setfields_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_apply_setfields_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_table_stats_entry_apply_setfields_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_metadata_match_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_table_stats_entry_metadata_match_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_metadata_match_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_table_stats_entry_metadata_match_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_metadata_write_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_table_stats_entry_metadata_write_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_metadata_write_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_table_stats_entry_metadata_write_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_instructions_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_stats_entry_instructions_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_instructions_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_stats_entry_instructions_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_config_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_stats_entry_config_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_config_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_stats_entry_config_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_table_stats_entry_max_entries_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_table_stats_entry_max_entries_set( (of_table_stats_entry_t *) o, tmp);
	return;
}

void do_of_table_stats_entry_max_entries_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_table_stats_entry_max_entries_get( (of_table_stats_entry_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_uint32_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint32_t tmp;
	tmp = val;
	of_uint32_value_set( (of_uint32_t *) o, tmp);
	return;
}

void do_of_uint32_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint32_t tmp;
	of_uint32_value_get( (of_uint32_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_uint64_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint64_t tmp;
	tmp = val;
	of_uint64_value_set( (of_uint64_t *) o, tmp);
	return;
}

void do_of_uint64_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint64_t tmp;
	of_uint64_value_get( (of_uint64_t *) o, &tmp);
	*val = tmp;
	return;
}

void do_of_uint8_value_set(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	uint8_t tmp;
	tmp = val;
	of_uint8_value_set( (of_uint8_t *) o, tmp);
	return;
}

void do_of_uint8_value_get(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	uint8_t tmp;
	of_uint8_value_get( (of_uint8_t *) o, &tmp);
	*val = tmp;
	return;
}

void of_aggregate_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_aggregate_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_aggregate_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_aggregate_stats_reply_packet_count_get(o, val,f , l);
	break;
case 4:
	do_of_aggregate_stats_reply_byte_count_get(o, val,f , l);
	break;
case 5:
	do_of_aggregate_stats_reply_flow_count_get(o, val,f , l);
	break;
}
}
void of_aggregate_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_aggregate_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_aggregate_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_aggregate_stats_reply_packet_count_set(o, val, f, l);
	break;
case 4:
	do_of_aggregate_stats_reply_byte_count_set(o, val, f, l);
	break;
case 5:
	do_of_aggregate_stats_reply_flow_count_set(o, val, f, l);
	break;
}
}
void of_aggregate_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_aggregate_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_aggregate_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_aggregate_stats_request_table_id_get(o, val,f , l);
	break;
case 4:
	do_of_aggregate_stats_request_out_port_get(o, val,f , l);
	break;
case 5:
	do_of_aggregate_stats_request_out_group_get(o, val,f , l);
	break;
case 6:
	do_of_aggregate_stats_request_cookie_get(o, val,f , l);
	break;
case 7:
	do_of_aggregate_stats_request_cookie_mask_get(o, val,f , l);
	break;
case 8:
	do_of_aggregate_stats_request_match_get(o, val,f , l);
	break;
}
}
void of_aggregate_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_aggregate_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_aggregate_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_aggregate_stats_request_table_id_set(o, val, f, l);
	break;
case 4:
	do_of_aggregate_stats_request_out_port_set(o, val, f, l);
	break;
case 5:
	do_of_aggregate_stats_request_out_group_set(o, val, f, l);
	break;
case 6:
	do_of_aggregate_stats_request_cookie_set(o, val, f, l);
	break;
case 7:
	do_of_aggregate_stats_request_cookie_mask_set(o, val, f, l);
	break;
case 8:
	do_of_aggregate_stats_request_match_set(o, val, f, l);
	break;
}
}
void of_async_config_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_async_config_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_async_config_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_async_config_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_async_config_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_async_config_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_async_get_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_get_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_async_get_reply_properties_get(o, val,f , l);
	break;
case 3:
	do_of_async_get_reply_packet_in_mask_equal_master_get(o, val,f , l);
	break;
case 4:
	do_of_async_get_reply_packet_in_mask_slave_get(o, val,f , l);
	break;
case 5:
	do_of_async_get_reply_port_status_mask_equal_master_get(o, val,f , l);
	break;
case 6:
	do_of_async_get_reply_port_status_mask_slave_get(o, val,f , l);
	break;
case 7:
	do_of_async_get_reply_flow_removed_mask_equal_master_get(o, val,f , l);
	break;
case 8:
	do_of_async_get_reply_flow_removed_mask_slave_get(o, val,f , l);
	break;
}
}
void of_async_get_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_get_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_async_get_reply_properties_set(o, val, f, l);
	break;
case 3:
	do_of_async_get_reply_packet_in_mask_equal_master_set(o, val, f, l);
	break;
case 4:
	do_of_async_get_reply_packet_in_mask_slave_set(o, val, f, l);
	break;
case 5:
	do_of_async_get_reply_port_status_mask_equal_master_set(o, val, f, l);
	break;
case 6:
	do_of_async_get_reply_port_status_mask_slave_set(o, val, f, l);
	break;
case 7:
	do_of_async_get_reply_flow_removed_mask_equal_master_set(o, val, f, l);
	break;
case 8:
	do_of_async_get_reply_flow_removed_mask_slave_set(o, val, f, l);
	break;
}
}
void of_async_get_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_get_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_async_get_request_properties_get(o, val,f , l);
	break;
case 3:
	do_of_async_get_request_packet_in_mask_equal_master_get(o, val,f , l);
	break;
case 4:
	do_of_async_get_request_packet_in_mask_slave_get(o, val,f , l);
	break;
case 5:
	do_of_async_get_request_port_status_mask_equal_master_get(o, val,f , l);
	break;
case 6:
	do_of_async_get_request_port_status_mask_slave_get(o, val,f , l);
	break;
case 7:
	do_of_async_get_request_flow_removed_mask_equal_master_get(o, val,f , l);
	break;
case 8:
	do_of_async_get_request_flow_removed_mask_slave_get(o, val,f , l);
	break;
}
}
void of_async_get_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_get_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_async_get_request_properties_set(o, val, f, l);
	break;
case 3:
	do_of_async_get_request_packet_in_mask_equal_master_set(o, val, f, l);
	break;
case 4:
	do_of_async_get_request_packet_in_mask_slave_set(o, val, f, l);
	break;
case 5:
	do_of_async_get_request_port_status_mask_equal_master_set(o, val, f, l);
	break;
case 6:
	do_of_async_get_request_port_status_mask_slave_set(o, val, f, l);
	break;
case 7:
	do_of_async_get_request_flow_removed_mask_equal_master_set(o, val, f, l);
	break;
case 8:
	do_of_async_get_request_flow_removed_mask_slave_set(o, val, f, l);
	break;
}
}
void of_async_set_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_set_xid_get(o, val,f , l);
	break;
case 2:
	do_of_async_set_properties_get(o, val,f , l);
	break;
case 3:
	do_of_async_set_packet_in_mask_equal_master_get(o, val,f , l);
	break;
case 4:
	do_of_async_set_packet_in_mask_slave_get(o, val,f , l);
	break;
case 5:
	do_of_async_set_port_status_mask_equal_master_get(o, val,f , l);
	break;
case 6:
	do_of_async_set_port_status_mask_slave_get(o, val,f , l);
	break;
case 7:
	do_of_async_set_flow_removed_mask_equal_master_get(o, val,f , l);
	break;
case 8:
	do_of_async_set_flow_removed_mask_slave_get(o, val,f , l);
	break;
}
}
void of_async_set_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_set_xid_set(o, val, f, l);
	break;
case 2:
	do_of_async_set_properties_set(o, val, f, l);
	break;
case 3:
	do_of_async_set_packet_in_mask_equal_master_set(o, val, f, l);
	break;
case 4:
	do_of_async_set_packet_in_mask_slave_set(o, val, f, l);
	break;
case 5:
	do_of_async_set_port_status_mask_equal_master_set(o, val, f, l);
	break;
case 6:
	do_of_async_set_port_status_mask_slave_set(o, val, f, l);
	break;
case 7:
	do_of_async_set_flow_removed_mask_equal_master_set(o, val, f, l);
	break;
case 8:
	do_of_async_set_flow_removed_mask_slave_set(o, val, f, l);
	break;
}
}
void of_bad_action_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_action_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bad_action_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_bad_action_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_bad_action_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_action_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bad_action_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_bad_action_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_bad_instruction_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_instruction_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bad_instruction_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_bad_instruction_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_bad_instruction_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_instruction_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bad_instruction_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_bad_instruction_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_bad_match_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_match_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bad_match_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_bad_match_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_bad_match_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_match_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bad_match_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_bad_match_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_bad_property_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_property_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bad_property_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_bad_property_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_bad_property_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_property_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bad_property_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_bad_property_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_bad_request_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_request_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bad_request_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_bad_request_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_bad_request_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bad_request_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bad_request_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_bad_request_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_barrier_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_barrier_reply_xid_get(o, val,f , l);
	break;
}
}
void of_barrier_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_barrier_reply_xid_set(o, val, f, l);
	break;
}
}
void of_barrier_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_barrier_request_xid_get(o, val,f , l);
	break;
}
}
void of_barrier_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_barrier_request_xid_set(o, val, f, l);
	break;
}
}
void of_bsn_arp_idle_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_arp_idle_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_arp_idle_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_arp_idle_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_arp_idle_vlan_vid_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_arp_idle_ipv4_addr_get(o, val,f , l);
	break;
}
}
void of_bsn_arp_idle_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_arp_idle_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_arp_idle_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_arp_idle_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_arp_idle_vlan_vid_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_arp_idle_ipv4_addr_set(o, val, f, l);
	break;
}
}
void of_bsn_bw_clear_data_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_clear_data_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_bw_clear_data_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_bw_clear_data_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_bw_clear_data_reply_status_get(o, val,f , l);
	break;
}
}
void of_bsn_bw_clear_data_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_clear_data_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_bw_clear_data_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_bw_clear_data_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_bw_clear_data_reply_status_set(o, val, f, l);
	break;
}
}
void of_bsn_bw_clear_data_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_clear_data_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_bw_clear_data_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_bw_clear_data_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_bw_clear_data_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_clear_data_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_bw_clear_data_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_bw_clear_data_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_bw_enable_get_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_enable_get_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_bw_enable_get_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_bw_enable_get_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_bw_enable_get_reply_enabled_get(o, val,f , l);
	break;
}
}
void of_bsn_bw_enable_get_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_enable_get_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_bw_enable_get_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_bw_enable_get_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_bw_enable_get_reply_enabled_set(o, val, f, l);
	break;
}
}
void of_bsn_bw_enable_get_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_enable_get_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_bw_enable_get_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_bw_enable_get_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_bw_enable_get_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_enable_get_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_bw_enable_get_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_bw_enable_get_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_bw_enable_set_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_enable_set_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_bw_enable_set_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_bw_enable_set_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_bw_enable_set_reply_enable_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_bw_enable_set_reply_status_get(o, val,f , l);
	break;
}
}
void of_bsn_bw_enable_set_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_enable_set_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_bw_enable_set_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_bw_enable_set_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_bw_enable_set_reply_enable_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_bw_enable_set_reply_status_set(o, val, f, l);
	break;
}
}
void of_bsn_bw_enable_set_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_enable_set_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_bw_enable_set_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_bw_enable_set_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_bw_enable_set_request_enable_get(o, val,f , l);
	break;
}
}
void of_bsn_bw_enable_set_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_bw_enable_set_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_bw_enable_set_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_bw_enable_set_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_bw_enable_set_request_enable_set(o, val, f, l);
	break;
}
}
void of_bsn_controller_connections_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_controller_connections_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_controller_connections_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_controller_connections_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_controller_connections_reply_connections_get(o, val,f , l);
	break;
}
}
void of_bsn_controller_connections_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_controller_connections_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_controller_connections_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_controller_connections_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_controller_connections_reply_connections_set(o, val, f, l);
	break;
}
}
void of_bsn_controller_connections_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_controller_connections_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_controller_connections_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_controller_connections_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_controller_connections_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_controller_connections_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_controller_connections_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_controller_connections_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_debug_counter_desc_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_desc_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_debug_counter_desc_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_debug_counter_desc_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_debug_counter_desc_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_debug_counter_desc_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_debug_counter_desc_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_desc_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_debug_counter_desc_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_debug_counter_desc_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_debug_counter_desc_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_debug_counter_desc_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_debug_counter_desc_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_desc_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_debug_counter_desc_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_debug_counter_desc_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_debug_counter_desc_stats_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_debug_counter_desc_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_desc_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_debug_counter_desc_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_debug_counter_desc_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_debug_counter_desc_stats_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_debug_counter_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_debug_counter_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_debug_counter_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_debug_counter_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_debug_counter_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_debug_counter_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_debug_counter_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_debug_counter_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_debug_counter_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_debug_counter_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_debug_counter_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_debug_counter_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_debug_counter_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_debug_counter_stats_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_debug_counter_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_debug_counter_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_debug_counter_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_debug_counter_stats_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_flow_checksum_bucket_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_checksum_bucket_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_flow_checksum_bucket_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_flow_checksum_bucket_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_flow_checksum_bucket_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_flow_checksum_bucket_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_flow_checksum_bucket_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_checksum_bucket_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_flow_checksum_bucket_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_flow_checksum_bucket_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_flow_checksum_bucket_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_flow_checksum_bucket_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_flow_checksum_bucket_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_checksum_bucket_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_flow_checksum_bucket_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_flow_checksum_bucket_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_flow_checksum_bucket_stats_request_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_flow_checksum_bucket_stats_request_table_id_get(o, val,f , l);
	break;
}
}
void of_bsn_flow_checksum_bucket_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_checksum_bucket_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_flow_checksum_bucket_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_flow_checksum_bucket_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_flow_checksum_bucket_stats_request_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_flow_checksum_bucket_stats_request_table_id_set(o, val, f, l);
	break;
}
}
void of_bsn_flow_idle_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_flow_idle_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_flow_idle_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_flow_idle_cookie_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_flow_idle_priority_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_flow_idle_table_id_get(o, val,f , l);
	break;
case 7:
	do_of_bsn_flow_idle_match_get(o, val,f , l);
	break;
}
}
void of_bsn_flow_idle_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_flow_idle_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_flow_idle_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_flow_idle_cookie_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_flow_idle_priority_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_flow_idle_table_id_set(o, val, f, l);
	break;
case 7:
	do_of_bsn_flow_idle_match_set(o, val, f, l);
	break;
}
}
void of_bsn_flow_idle_enable_get_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_enable_get_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_flow_idle_enable_get_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_flow_idle_enable_get_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_flow_idle_enable_get_reply_enabled_get(o, val,f , l);
	break;
}
}
void of_bsn_flow_idle_enable_get_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_enable_get_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_flow_idle_enable_get_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_flow_idle_enable_get_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_flow_idle_enable_get_reply_enabled_set(o, val, f, l);
	break;
}
}
void of_bsn_flow_idle_enable_get_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_enable_get_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_flow_idle_enable_get_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_flow_idle_enable_get_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_flow_idle_enable_get_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_enable_get_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_flow_idle_enable_get_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_flow_idle_enable_get_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_flow_idle_enable_set_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_enable_set_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_flow_idle_enable_set_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_flow_idle_enable_set_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_flow_idle_enable_set_reply_enable_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_flow_idle_enable_set_reply_status_get(o, val,f , l);
	break;
}
}
void of_bsn_flow_idle_enable_set_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_enable_set_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_flow_idle_enable_set_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_flow_idle_enable_set_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_flow_idle_enable_set_reply_enable_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_flow_idle_enable_set_reply_status_set(o, val, f, l);
	break;
}
}
void of_bsn_flow_idle_enable_set_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_enable_set_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_flow_idle_enable_set_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_flow_idle_enable_set_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_flow_idle_enable_set_request_enable_get(o, val,f , l);
	break;
}
}
void of_bsn_flow_idle_enable_set_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_idle_enable_set_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_flow_idle_enable_set_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_flow_idle_enable_set_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_flow_idle_enable_set_request_enable_set(o, val, f, l);
	break;
}
}
void of_bsn_generic_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_generic_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_generic_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_generic_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_generic_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_generic_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_generic_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_generic_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_generic_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_generic_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_generic_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_generic_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_generic_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_generic_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_generic_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_generic_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_generic_stats_request_subtype_get(o, val,f , l);
	break;
case 5:
	//do_of_bsn_generic_stats_request_name_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_generic_stats_request_tlvs_get(o, val,f , l);
	break;
}
}
void of_bsn_generic_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_generic_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_generic_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_generic_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_generic_stats_request_subtype_set(o, val, f, l);
	break;
case 5:
	//do_of_bsn_generic_stats_request_name_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_generic_stats_request_tlvs_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_bucket_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_bucket_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_bucket_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_bucket_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_bucket_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_bucket_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_bucket_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_bucket_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_bucket_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_bucket_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_bucket_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_bucket_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_bucket_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_bucket_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_bucket_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_bucket_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_bucket_stats_request_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_bucket_stats_request_table_id_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_bucket_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_bucket_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_bucket_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_bucket_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_bucket_stats_request_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_bucket_stats_request_table_id_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_clear_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_clear_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_clear_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_clear_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_clear_reply_table_id_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_clear_reply_deleted_count_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_gentable_clear_reply_error_count_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_clear_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_clear_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_clear_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_clear_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_clear_reply_table_id_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_clear_reply_deleted_count_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_gentable_clear_reply_error_count_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_clear_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_clear_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_clear_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_clear_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_clear_request_table_id_get(o, val,f , l);
	break;
case 5:
	//do_of_bsn_gentable_clear_request_checksum_get(o, val,f , l);
	break;
case 6:
	//do_of_bsn_gentable_clear_request_checksum_mask_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_clear_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_clear_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_clear_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_clear_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_clear_request_table_id_set(o, val, f, l);
	break;
case 5:
	//do_of_bsn_gentable_clear_request_checksum_set(o, val, f, l);
	break;
case 6:
	//do_of_bsn_gentable_clear_request_checksum_mask_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_desc_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_desc_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_desc_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_desc_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_desc_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_desc_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_desc_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_desc_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_desc_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_desc_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_desc_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_desc_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_desc_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_desc_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_desc_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_desc_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_desc_stats_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_desc_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_desc_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_desc_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_desc_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_desc_stats_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_entry_add_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_add_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_entry_add_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_entry_add_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_entry_add_table_id_get(o, val,f , l);
	break;
case 5:
	//do_of_bsn_gentable_entry_add_checksum_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_gentable_entry_add_key_get(o, val,f , l);
	break;
case 7:
	do_of_bsn_gentable_entry_add_value_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_entry_add_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_add_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_entry_add_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_entry_add_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_entry_add_table_id_set(o, val, f, l);
	break;
case 5:
	//do_of_bsn_gentable_entry_add_checksum_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_gentable_entry_add_key_set(o, val, f, l);
	break;
case 7:
	do_of_bsn_gentable_entry_add_value_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_entry_delete_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_delete_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_entry_delete_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_entry_delete_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_entry_delete_table_id_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_entry_delete_key_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_entry_delete_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_delete_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_entry_delete_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_entry_delete_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_entry_delete_table_id_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_entry_delete_key_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_entry_desc_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_desc_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_entry_desc_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_entry_desc_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_entry_desc_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_entry_desc_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_entry_desc_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_desc_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_entry_desc_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_entry_desc_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_entry_desc_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_entry_desc_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_entry_desc_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_desc_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_entry_desc_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_entry_desc_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_entry_desc_stats_request_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_entry_desc_stats_request_table_id_get(o, val,f , l);
	break;
case 6:
	//do_of_bsn_gentable_entry_desc_stats_request_checksum_get(o, val,f , l);
	break;
case 7:
	//do_of_bsn_gentable_entry_desc_stats_request_checksum_mask_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_entry_desc_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_desc_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_entry_desc_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_entry_desc_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_entry_desc_stats_request_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_entry_desc_stats_request_table_id_set(o, val, f, l);
	break;
case 6:
	//do_of_bsn_gentable_entry_desc_stats_request_checksum_set(o, val, f, l);
	break;
case 7:
	//do_of_bsn_gentable_entry_desc_stats_request_checksum_mask_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_entry_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_entry_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_entry_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_entry_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_entry_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_entry_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_entry_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_entry_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_entry_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_entry_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_entry_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_entry_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_entry_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_entry_stats_request_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_entry_stats_request_table_id_get(o, val,f , l);
	break;
case 6:
	//do_of_bsn_gentable_entry_stats_request_checksum_get(o, val,f , l);
	break;
case 7:
	//do_of_bsn_gentable_entry_stats_request_checksum_mask_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_entry_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_entry_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_entry_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_entry_stats_request_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_entry_stats_request_table_id_set(o, val, f, l);
	break;
case 6:
	//do_of_bsn_gentable_entry_stats_request_checksum_set(o, val, f, l);
	break;
case 7:
	//do_of_bsn_gentable_entry_stats_request_checksum_mask_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_set_buckets_size_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_set_buckets_size_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_set_buckets_size_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_set_buckets_size_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_set_buckets_size_table_id_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_set_buckets_size_buckets_size_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_set_buckets_size_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_set_buckets_size_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_set_buckets_size_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_set_buckets_size_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_set_buckets_size_table_id_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_set_buckets_size_buckets_size_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_gentable_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_gentable_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_stats_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_stats_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_get_interfaces_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_interfaces_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_interfaces_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_interfaces_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_get_interfaces_reply_interfaces_get(o, val,f , l);
	break;
}
}
void of_bsn_get_interfaces_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_interfaces_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_interfaces_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_interfaces_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_get_interfaces_reply_interfaces_set(o, val, f, l);
	break;
}
}
void of_bsn_get_interfaces_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_interfaces_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_interfaces_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_interfaces_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_get_interfaces_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_interfaces_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_interfaces_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_interfaces_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_get_ip_mask_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_ip_mask_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_ip_mask_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_ip_mask_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_get_ip_mask_reply_index_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_get_ip_mask_reply_mask_get(o, val,f , l);
	break;
}
}
void of_bsn_get_ip_mask_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_ip_mask_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_ip_mask_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_ip_mask_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_get_ip_mask_reply_index_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_get_ip_mask_reply_mask_set(o, val, f, l);
	break;
}
}
void of_bsn_get_ip_mask_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_ip_mask_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_ip_mask_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_ip_mask_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_get_ip_mask_request_index_get(o, val,f , l);
	break;
}
}
void of_bsn_get_ip_mask_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_ip_mask_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_ip_mask_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_ip_mask_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_get_ip_mask_request_index_set(o, val, f, l);
	break;
}
}
void of_bsn_get_l2_table_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_l2_table_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_l2_table_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_l2_table_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_get_l2_table_reply_l2_table_enable_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_get_l2_table_reply_l2_table_priority_get(o, val,f , l);
	break;
}
}
void of_bsn_get_l2_table_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_l2_table_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_l2_table_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_l2_table_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_get_l2_table_reply_l2_table_enable_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_get_l2_table_reply_l2_table_priority_set(o, val, f, l);
	break;
}
}
void of_bsn_get_l2_table_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_l2_table_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_l2_table_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_l2_table_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_get_l2_table_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_l2_table_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_l2_table_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_l2_table_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_get_mirroring_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_mirroring_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_mirroring_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_mirroring_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_get_mirroring_reply_report_mirror_ports_get(o, val,f , l);
	break;
}
}
void of_bsn_get_mirroring_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_mirroring_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_mirroring_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_mirroring_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_get_mirroring_reply_report_mirror_ports_set(o, val, f, l);
	break;
}
}
void of_bsn_get_mirroring_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_mirroring_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_mirroring_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_mirroring_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_get_mirroring_request_report_mirror_ports_get(o, val,f , l);
	break;
}
}
void of_bsn_get_mirroring_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_mirroring_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_mirroring_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_mirroring_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_get_mirroring_request_report_mirror_ports_set(o, val, f, l);
	break;
}
}
void of_bsn_get_switch_pipeline_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_switch_pipeline_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_switch_pipeline_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_switch_pipeline_reply_subtype_get(o, val,f , l);
	break;
case 4:
	//do_of_bsn_get_switch_pipeline_reply_pipeline_get(o, val,f , l);
	break;
}
}
void of_bsn_get_switch_pipeline_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_switch_pipeline_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_switch_pipeline_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_switch_pipeline_reply_subtype_set(o, val, f, l);
	break;
case 4:
	//do_of_bsn_get_switch_pipeline_reply_pipeline_set(o, val, f, l);
	break;
}
}
void of_bsn_get_switch_pipeline_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_switch_pipeline_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_get_switch_pipeline_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_get_switch_pipeline_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_get_switch_pipeline_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_get_switch_pipeline_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_get_switch_pipeline_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_get_switch_pipeline_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_hybrid_get_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_hybrid_get_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_hybrid_get_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_hybrid_get_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_hybrid_get_reply_hybrid_enable_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_hybrid_get_reply_hybrid_version_get(o, val,f , l);
	break;
}
}
void of_bsn_hybrid_get_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_hybrid_get_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_hybrid_get_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_hybrid_get_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_hybrid_get_reply_hybrid_enable_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_hybrid_get_reply_hybrid_version_set(o, val, f, l);
	break;
}
}
void of_bsn_hybrid_get_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_hybrid_get_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_hybrid_get_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_hybrid_get_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_hybrid_get_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_hybrid_get_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_hybrid_get_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_hybrid_get_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_image_desc_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_image_desc_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_image_desc_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_image_desc_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_image_desc_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	//do_of_bsn_image_desc_stats_reply_image_checksum_get(o, val,f , l);
	break;
case 6:
	//do_of_bsn_image_desc_stats_reply_startup_config_checksum_get(o, val,f , l);
	break;
}
}
void of_bsn_image_desc_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_image_desc_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_image_desc_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_image_desc_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_image_desc_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	//do_of_bsn_image_desc_stats_reply_image_checksum_set(o, val, f, l);
	break;
case 6:
	//do_of_bsn_image_desc_stats_reply_startup_config_checksum_set(o, val, f, l);
	break;
}
}
void of_bsn_image_desc_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_image_desc_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_image_desc_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_image_desc_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_image_desc_stats_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_image_desc_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_image_desc_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_image_desc_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_image_desc_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_image_desc_stats_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_lacp_convergence_notif_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lacp_convergence_notif_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_lacp_convergence_notif_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_lacp_convergence_notif_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_lacp_convergence_notif_convergence_status_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_lacp_convergence_notif_port_no_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_lacp_convergence_notif_actor_sys_priority_get(o, val,f , l);
	break;
case 7:
	//do_of_bsn_lacp_convergence_notif_actor_sys_mac_get(o, val,f , l);
	break;
case 8:
	do_of_bsn_lacp_convergence_notif_actor_port_priority_get(o, val,f , l);
	break;
case 9:
	do_of_bsn_lacp_convergence_notif_actor_port_num_get(o, val,f , l);
	break;
case 10:
	do_of_bsn_lacp_convergence_notif_actor_key_get(o, val,f , l);
	break;
case 11:
	do_of_bsn_lacp_convergence_notif_partner_sys_priority_get(o, val,f , l);
	break;
case 12:
	//do_of_bsn_lacp_convergence_notif_partner_sys_mac_get(o, val,f , l);
	break;
case 13:
	do_of_bsn_lacp_convergence_notif_partner_port_priority_get(o, val,f , l);
	break;
case 14:
	do_of_bsn_lacp_convergence_notif_partner_port_num_get(o, val,f , l);
	break;
case 15:
	do_of_bsn_lacp_convergence_notif_partner_key_get(o, val,f , l);
	break;
}
}
void of_bsn_lacp_convergence_notif_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lacp_convergence_notif_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_lacp_convergence_notif_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_lacp_convergence_notif_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_lacp_convergence_notif_convergence_status_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_lacp_convergence_notif_port_no_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_lacp_convergence_notif_actor_sys_priority_set(o, val, f, l);
	break;
case 7:
	//do_of_bsn_lacp_convergence_notif_actor_sys_mac_set(o, val, f, l);
	break;
case 8:
	do_of_bsn_lacp_convergence_notif_actor_port_priority_set(o, val, f, l);
	break;
case 9:
	do_of_bsn_lacp_convergence_notif_actor_port_num_set(o, val, f, l);
	break;
case 10:
	do_of_bsn_lacp_convergence_notif_actor_key_set(o, val, f, l);
	break;
case 11:
	do_of_bsn_lacp_convergence_notif_partner_sys_priority_set(o, val, f, l);
	break;
case 12:
	//do_of_bsn_lacp_convergence_notif_partner_sys_mac_set(o, val, f, l);
	break;
case 13:
	do_of_bsn_lacp_convergence_notif_partner_port_priority_set(o, val, f, l);
	break;
case 14:
	do_of_bsn_lacp_convergence_notif_partner_port_num_set(o, val, f, l);
	break;
case 15:
	do_of_bsn_lacp_convergence_notif_partner_key_set(o, val, f, l);
	break;
}
}
void of_bsn_lacp_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lacp_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_lacp_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_lacp_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_lacp_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_lacp_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_lacp_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lacp_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_lacp_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_lacp_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_lacp_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_lacp_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_lacp_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lacp_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_lacp_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_lacp_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_lacp_stats_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_lacp_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lacp_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_lacp_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_lacp_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_lacp_stats_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_log_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_log_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_log_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_log_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_log_loglevel_get(o, val,f , l);
	break;
case 5:
	//do_of_bsn_log_data_get(o, val,f , l);
	break;
}
}
void of_bsn_log_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_log_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_log_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_log_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_log_loglevel_set(o, val, f, l);
	break;
case 5:
	//do_of_bsn_log_data_set(o, val, f, l);
	break;
}
}
void of_bsn_lua_command_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lua_command_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_lua_command_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_lua_command_reply_subtype_get(o, val,f , l);
	break;
case 4:
	//do_of_bsn_lua_command_reply_data_get(o, val,f , l);
	break;
}
}
void of_bsn_lua_command_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lua_command_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_lua_command_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_lua_command_reply_subtype_set(o, val, f, l);
	break;
case 4:
	//do_of_bsn_lua_command_reply_data_set(o, val, f, l);
	break;
}
}
void of_bsn_lua_command_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lua_command_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_lua_command_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_lua_command_request_subtype_get(o, val,f , l);
	break;
case 4:
	//do_of_bsn_lua_command_request_data_get(o, val,f , l);
	break;
}
}
void of_bsn_lua_command_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lua_command_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_lua_command_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_lua_command_request_subtype_set(o, val, f, l);
	break;
case 4:
	//do_of_bsn_lua_command_request_data_set(o, val, f, l);
	break;
}
}
void of_bsn_lua_notification_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lua_notification_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_lua_notification_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_lua_notification_subtype_get(o, val,f , l);
	break;
case 4:
	//do_of_bsn_lua_notification_data_get(o, val,f , l);
	break;
}
}
void of_bsn_lua_notification_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lua_notification_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_lua_notification_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_lua_notification_subtype_set(o, val, f, l);
	break;
case 4:
	//do_of_bsn_lua_notification_data_set(o, val, f, l);
	break;
}
}
void of_bsn_lua_upload_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lua_upload_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_lua_upload_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_lua_upload_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_lua_upload_flags_get(o, val,f , l);
	break;
case 5:
	//do_of_bsn_lua_upload_filename_get(o, val,f , l);
	break;
case 6:
	//do_of_bsn_lua_upload_data_get(o, val,f , l);
	break;
}
}
void of_bsn_lua_upload_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lua_upload_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_lua_upload_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_lua_upload_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_lua_upload_flags_set(o, val, f, l);
	break;
case 5:
	//do_of_bsn_lua_upload_filename_set(o, val, f, l);
	break;
case 6:
	//do_of_bsn_lua_upload_data_set(o, val, f, l);
	break;
}
}
void of_bsn_pdu_rx_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_rx_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_pdu_rx_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_pdu_rx_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_pdu_rx_reply_status_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_pdu_rx_reply_port_no_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_pdu_rx_reply_slot_num_get(o, val,f , l);
	break;
}
}
void of_bsn_pdu_rx_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_rx_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_pdu_rx_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_pdu_rx_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_pdu_rx_reply_status_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_pdu_rx_reply_port_no_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_pdu_rx_reply_slot_num_set(o, val, f, l);
	break;
}
}
void of_bsn_pdu_rx_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_rx_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_pdu_rx_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_pdu_rx_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_pdu_rx_request_timeout_ms_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_pdu_rx_request_port_no_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_pdu_rx_request_slot_num_get(o, val,f , l);
	break;
case 7:
	//do_of_bsn_pdu_rx_request_data_get(o, val,f , l);
	break;
}
}
void of_bsn_pdu_rx_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_rx_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_pdu_rx_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_pdu_rx_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_pdu_rx_request_timeout_ms_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_pdu_rx_request_port_no_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_pdu_rx_request_slot_num_set(o, val, f, l);
	break;
case 7:
	//do_of_bsn_pdu_rx_request_data_set(o, val, f, l);
	break;
}
}
void of_bsn_pdu_rx_timeout_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_rx_timeout_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_pdu_rx_timeout_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_pdu_rx_timeout_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_pdu_rx_timeout_port_no_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_pdu_rx_timeout_slot_num_get(o, val,f , l);
	break;
}
}
void of_bsn_pdu_rx_timeout_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_rx_timeout_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_pdu_rx_timeout_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_pdu_rx_timeout_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_pdu_rx_timeout_port_no_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_pdu_rx_timeout_slot_num_set(o, val, f, l);
	break;
}
}
void of_bsn_pdu_tx_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_tx_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_pdu_tx_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_pdu_tx_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_pdu_tx_reply_status_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_pdu_tx_reply_port_no_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_pdu_tx_reply_slot_num_get(o, val,f , l);
	break;
}
}
void of_bsn_pdu_tx_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_tx_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_pdu_tx_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_pdu_tx_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_pdu_tx_reply_status_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_pdu_tx_reply_port_no_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_pdu_tx_reply_slot_num_set(o, val, f, l);
	break;
}
}
void of_bsn_pdu_tx_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_tx_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_pdu_tx_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_pdu_tx_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_pdu_tx_request_tx_interval_ms_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_pdu_tx_request_port_no_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_pdu_tx_request_slot_num_get(o, val,f , l);
	break;
case 7:
	//do_of_bsn_pdu_tx_request_data_get(o, val,f , l);
	break;
}
}
void of_bsn_pdu_tx_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_pdu_tx_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_pdu_tx_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_pdu_tx_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_pdu_tx_request_tx_interval_ms_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_pdu_tx_request_port_no_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_pdu_tx_request_slot_num_set(o, val, f, l);
	break;
case 7:
	//do_of_bsn_pdu_tx_request_data_set(o, val, f, l);
	break;
}
}
void of_bsn_port_counter_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_port_counter_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_port_counter_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_port_counter_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_port_counter_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_port_counter_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_port_counter_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_port_counter_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_port_counter_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_port_counter_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_port_counter_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_port_counter_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_port_counter_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_port_counter_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_port_counter_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_port_counter_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_port_counter_stats_request_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_port_counter_stats_request_port_no_get(o, val,f , l);
	break;
}
}
void of_bsn_port_counter_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_port_counter_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_port_counter_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_port_counter_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_port_counter_stats_request_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_port_counter_stats_request_port_no_set(o, val, f, l);
	break;
}
}
void of_bsn_role_status_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_role_status_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_role_status_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_role_status_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_role_status_role_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_role_status_reason_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_role_status_generation_id_get(o, val,f , l);
	break;
}
}
void of_bsn_role_status_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_role_status_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_role_status_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_role_status_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_role_status_role_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_role_status_reason_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_role_status_generation_id_set(o, val, f, l);
	break;
}
}
void of_bsn_set_aux_cxns_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_aux_cxns_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_aux_cxns_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_aux_cxns_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_aux_cxns_reply_num_aux_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_set_aux_cxns_reply_status_get(o, val,f , l);
	break;
}
}
void of_bsn_set_aux_cxns_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_aux_cxns_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_aux_cxns_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_aux_cxns_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_aux_cxns_reply_num_aux_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_set_aux_cxns_reply_status_set(o, val, f, l);
	break;
}
}
void of_bsn_set_aux_cxns_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_aux_cxns_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_aux_cxns_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_aux_cxns_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_aux_cxns_request_num_aux_get(o, val,f , l);
	break;
}
}
void of_bsn_set_aux_cxns_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_aux_cxns_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_aux_cxns_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_aux_cxns_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_aux_cxns_request_num_aux_set(o, val, f, l);
	break;
}
}
void of_bsn_set_ip_mask_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_ip_mask_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_ip_mask_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_ip_mask_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_ip_mask_index_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_set_ip_mask_mask_get(o, val,f , l);
	break;
}
}
void of_bsn_set_ip_mask_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_ip_mask_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_ip_mask_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_ip_mask_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_ip_mask_index_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_set_ip_mask_mask_set(o, val, f, l);
	break;
}
}
void of_bsn_set_l2_table_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_l2_table_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_l2_table_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_l2_table_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_l2_table_reply_l2_table_enable_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_set_l2_table_reply_l2_table_priority_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_set_l2_table_reply_status_get(o, val,f , l);
	break;
}
}
void of_bsn_set_l2_table_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_l2_table_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_l2_table_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_l2_table_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_l2_table_reply_l2_table_enable_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_set_l2_table_reply_l2_table_priority_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_set_l2_table_reply_status_set(o, val, f, l);
	break;
}
}
void of_bsn_set_l2_table_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_l2_table_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_l2_table_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_l2_table_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_l2_table_request_l2_table_enable_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_set_l2_table_request_l2_table_priority_get(o, val,f , l);
	break;
}
}
void of_bsn_set_l2_table_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_l2_table_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_l2_table_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_l2_table_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_l2_table_request_l2_table_enable_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_set_l2_table_request_l2_table_priority_set(o, val, f, l);
	break;
}
}
void of_bsn_set_lacp_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_lacp_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_lacp_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_lacp_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_lacp_reply_status_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_set_lacp_reply_port_no_get(o, val,f , l);
	break;
}
}
void of_bsn_set_lacp_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_lacp_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_lacp_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_lacp_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_lacp_reply_status_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_set_lacp_reply_port_no_set(o, val, f, l);
	break;
}
}
void of_bsn_set_lacp_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_lacp_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_lacp_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_lacp_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_lacp_request_enabled_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_set_lacp_request_port_no_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_set_lacp_request_actor_sys_priority_get(o, val,f , l);
	break;
case 7:
	//do_of_bsn_set_lacp_request_actor_sys_mac_get(o, val,f , l);
	break;
case 8:
	do_of_bsn_set_lacp_request_actor_port_priority_get(o, val,f , l);
	break;
case 9:
	do_of_bsn_set_lacp_request_actor_port_num_get(o, val,f , l);
	break;
case 10:
	do_of_bsn_set_lacp_request_actor_key_get(o, val,f , l);
	break;
}
}
void of_bsn_set_lacp_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_lacp_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_lacp_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_lacp_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_lacp_request_enabled_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_set_lacp_request_port_no_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_set_lacp_request_actor_sys_priority_set(o, val, f, l);
	break;
case 7:
	//do_of_bsn_set_lacp_request_actor_sys_mac_set(o, val, f, l);
	break;
case 8:
	do_of_bsn_set_lacp_request_actor_port_priority_set(o, val, f, l);
	break;
case 9:
	do_of_bsn_set_lacp_request_actor_port_num_set(o, val, f, l);
	break;
case 10:
	do_of_bsn_set_lacp_request_actor_key_set(o, val, f, l);
	break;
}
}
void of_bsn_set_mirroring_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_mirroring_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_mirroring_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_mirroring_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_mirroring_report_mirror_ports_get(o, val,f , l);
	break;
}
}
void of_bsn_set_mirroring_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_mirroring_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_mirroring_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_mirroring_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_mirroring_report_mirror_ports_set(o, val, f, l);
	break;
}
}
void of_bsn_set_pktin_suppression_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_pktin_suppression_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_pktin_suppression_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_pktin_suppression_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_pktin_suppression_reply_status_get(o, val,f , l);
	break;
}
}
void of_bsn_set_pktin_suppression_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_pktin_suppression_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_pktin_suppression_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_pktin_suppression_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_pktin_suppression_reply_status_set(o, val, f, l);
	break;
}
}
void of_bsn_set_pktin_suppression_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_pktin_suppression_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_pktin_suppression_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_pktin_suppression_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_pktin_suppression_request_enabled_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_set_pktin_suppression_request_idle_timeout_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_set_pktin_suppression_request_hard_timeout_get(o, val,f , l);
	break;
case 7:
	do_of_bsn_set_pktin_suppression_request_priority_get(o, val,f , l);
	break;
case 8:
	do_of_bsn_set_pktin_suppression_request_cookie_get(o, val,f , l);
	break;
}
}
void of_bsn_set_pktin_suppression_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_pktin_suppression_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_pktin_suppression_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_pktin_suppression_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_pktin_suppression_request_enabled_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_set_pktin_suppression_request_idle_timeout_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_set_pktin_suppression_request_hard_timeout_set(o, val, f, l);
	break;
case 7:
	do_of_bsn_set_pktin_suppression_request_priority_set(o, val, f, l);
	break;
case 8:
	do_of_bsn_set_pktin_suppression_request_cookie_set(o, val, f, l);
	break;
}
}
void of_bsn_set_switch_pipeline_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_switch_pipeline_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_switch_pipeline_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_switch_pipeline_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_set_switch_pipeline_reply_status_get(o, val,f , l);
	break;
}
}
void of_bsn_set_switch_pipeline_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_switch_pipeline_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_switch_pipeline_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_switch_pipeline_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_set_switch_pipeline_reply_status_set(o, val, f, l);
	break;
}
}
void of_bsn_set_switch_pipeline_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_switch_pipeline_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_set_switch_pipeline_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_set_switch_pipeline_request_subtype_get(o, val,f , l);
	break;
case 4:
	//do_of_bsn_set_switch_pipeline_request_pipeline_get(o, val,f , l);
	break;
}
}
void of_bsn_set_switch_pipeline_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_set_switch_pipeline_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_set_switch_pipeline_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_set_switch_pipeline_request_subtype_set(o, val, f, l);
	break;
case 4:
	//do_of_bsn_set_switch_pipeline_request_pipeline_set(o, val, f, l);
	break;
}
}
void of_bsn_shell_command_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_shell_command_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_shell_command_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_shell_command_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_shell_command_service_get(o, val,f , l);
	break;
case 5:
	//do_of_bsn_shell_command_data_get(o, val,f , l);
	break;
}
}
void of_bsn_shell_command_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_shell_command_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_shell_command_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_shell_command_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_shell_command_service_set(o, val, f, l);
	break;
case 5:
	//do_of_bsn_shell_command_data_set(o, val, f, l);
	break;
}
}
void of_bsn_shell_output_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_shell_output_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_shell_output_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_shell_output_subtype_get(o, val,f , l);
	break;
case 4:
	//do_of_bsn_shell_output_data_get(o, val,f , l);
	break;
}
}
void of_bsn_shell_output_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_shell_output_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_shell_output_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_shell_output_subtype_set(o, val, f, l);
	break;
case 4:
	//do_of_bsn_shell_output_data_set(o, val, f, l);
	break;
}
}
void of_bsn_shell_status_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_shell_status_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_shell_status_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_shell_status_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_shell_status_status_get(o, val,f , l);
	break;
}
}
void of_bsn_shell_status_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_shell_status_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_shell_status_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_shell_status_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_shell_status_status_set(o, val, f, l);
	break;
}
}
void of_bsn_switch_pipeline_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_switch_pipeline_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_switch_pipeline_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_switch_pipeline_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_switch_pipeline_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_switch_pipeline_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_switch_pipeline_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_switch_pipeline_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_switch_pipeline_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_switch_pipeline_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_switch_pipeline_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_switch_pipeline_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_switch_pipeline_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_switch_pipeline_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_switch_pipeline_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_switch_pipeline_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_switch_pipeline_stats_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_switch_pipeline_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_switch_pipeline_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_switch_pipeline_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_switch_pipeline_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_switch_pipeline_stats_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_table_checksum_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_table_checksum_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_table_checksum_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_table_checksum_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_table_checksum_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_table_checksum_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_table_checksum_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_table_checksum_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_table_checksum_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_table_checksum_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_table_checksum_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_table_checksum_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_table_checksum_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_table_checksum_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_table_checksum_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_table_checksum_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_table_checksum_stats_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_table_checksum_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_table_checksum_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_table_checksum_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_table_checksum_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_table_checksum_stats_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_table_set_buckets_size_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_table_set_buckets_size_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_table_set_buckets_size_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_table_set_buckets_size_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_table_set_buckets_size_table_id_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_table_set_buckets_size_buckets_size_get(o, val,f , l);
	break;
}
}
void of_bsn_table_set_buckets_size_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_table_set_buckets_size_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_table_set_buckets_size_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_table_set_buckets_size_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_table_set_buckets_size_table_id_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_table_set_buckets_size_buckets_size_set(o, val, f, l);
	break;
}
}
void of_bsn_time_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_time_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_time_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_time_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_time_reply_time_ms_get(o, val,f , l);
	break;
}
}
void of_bsn_time_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_time_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_time_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_time_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_time_reply_time_ms_set(o, val, f, l);
	break;
}
}
void of_bsn_time_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_time_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_time_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_time_request_subtype_get(o, val,f , l);
	break;
}
}
void of_bsn_time_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_time_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_time_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_time_request_subtype_set(o, val, f, l);
	break;
}
}
void of_bsn_virtual_port_create_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_virtual_port_create_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_virtual_port_create_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_virtual_port_create_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_virtual_port_create_reply_status_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_virtual_port_create_reply_vport_no_get(o, val,f , l);
	break;
}
}
void of_bsn_virtual_port_create_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_virtual_port_create_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_virtual_port_create_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_virtual_port_create_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_virtual_port_create_reply_status_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_virtual_port_create_reply_vport_no_set(o, val, f, l);
	break;
}
}
void of_bsn_virtual_port_create_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_virtual_port_create_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_virtual_port_create_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_virtual_port_create_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_virtual_port_create_request_vport_get(o, val,f , l);
	break;
}
}
void of_bsn_virtual_port_create_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_virtual_port_create_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_virtual_port_create_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_virtual_port_create_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_virtual_port_create_request_vport_set(o, val, f, l);
	break;
}
}
void of_bsn_virtual_port_remove_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_virtual_port_remove_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_virtual_port_remove_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_virtual_port_remove_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_virtual_port_remove_reply_status_get(o, val,f , l);
	break;
}
}
void of_bsn_virtual_port_remove_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_virtual_port_remove_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_virtual_port_remove_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_virtual_port_remove_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_virtual_port_remove_reply_status_set(o, val, f, l);
	break;
}
}
void of_bsn_virtual_port_remove_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_virtual_port_remove_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_virtual_port_remove_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_virtual_port_remove_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_virtual_port_remove_request_vport_no_get(o, val,f , l);
	break;
}
}
void of_bsn_virtual_port_remove_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_virtual_port_remove_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_virtual_port_remove_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_virtual_port_remove_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_virtual_port_remove_request_vport_no_set(o, val, f, l);
	break;
}
}
void of_bsn_vlan_counter_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vlan_counter_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_vlan_counter_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_vlan_counter_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_vlan_counter_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_vlan_counter_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_vlan_counter_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vlan_counter_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_vlan_counter_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_vlan_counter_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_vlan_counter_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_vlan_counter_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_vlan_counter_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vlan_counter_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_vlan_counter_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_vlan_counter_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_vlan_counter_stats_request_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_vlan_counter_stats_request_vlan_vid_get(o, val,f , l);
	break;
}
}
void of_bsn_vlan_counter_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vlan_counter_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_vlan_counter_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_vlan_counter_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_vlan_counter_stats_request_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_vlan_counter_stats_request_vlan_vid_set(o, val, f, l);
	break;
}
}
void of_bsn_vrf_counter_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vrf_counter_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_vrf_counter_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_vrf_counter_stats_reply_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_vrf_counter_stats_reply_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_vrf_counter_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_vrf_counter_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vrf_counter_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_vrf_counter_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_vrf_counter_stats_reply_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_vrf_counter_stats_reply_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_vrf_counter_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_vrf_counter_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vrf_counter_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_vrf_counter_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_vrf_counter_stats_request_experimenter_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_vrf_counter_stats_request_subtype_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_vrf_counter_stats_request_vrf_get(o, val,f , l);
	break;
}
}
void of_bsn_vrf_counter_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vrf_counter_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_vrf_counter_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_vrf_counter_stats_request_experimenter_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_vrf_counter_stats_request_subtype_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_vrf_counter_stats_request_vrf_set(o, val, f, l);
	break;
}
}
void of_bundle_add_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bundle_add_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bundle_add_msg_bundle_id_get(o, val,f , l);
	break;
case 3:
	do_of_bundle_add_msg_flags_get(o, val,f , l);
	break;
case 4:
	//do_of_bundle_add_msg_data_get(o, val,f , l);
	break;
}
}
void of_bundle_add_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bundle_add_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bundle_add_msg_bundle_id_set(o, val, f, l);
	break;
case 3:
	do_of_bundle_add_msg_flags_set(o, val, f, l);
	break;
case 4:
	//do_of_bundle_add_msg_data_set(o, val, f, l);
	break;
}
}
void of_bundle_ctrl_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bundle_ctrl_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bundle_ctrl_msg_bundle_id_get(o, val,f , l);
	break;
case 3:
	do_of_bundle_ctrl_msg_bundle_ctrl_type_get(o, val,f , l);
	break;
case 4:
	do_of_bundle_ctrl_msg_flags_get(o, val,f , l);
	break;
case 5:
	do_of_bundle_ctrl_msg_properties_get(o, val,f , l);
	break;
}
}
void of_bundle_ctrl_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bundle_ctrl_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bundle_ctrl_msg_bundle_id_set(o, val, f, l);
	break;
case 3:
	do_of_bundle_ctrl_msg_bundle_ctrl_type_set(o, val, f, l);
	break;
case 4:
	do_of_bundle_ctrl_msg_flags_set(o, val, f, l);
	break;
case 5:
	do_of_bundle_ctrl_msg_properties_set(o, val, f, l);
	break;
}
}
void of_bundle_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bundle_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_bundle_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_bundle_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_bundle_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bundle_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_bundle_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_bundle_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_desc_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_desc_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_desc_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_desc_stats_reply_mfr_desc_get(o, val,f , l);
	break;
case 4:
	do_of_desc_stats_reply_hw_desc_get(o, val,f , l);
	break;
case 5:
	do_of_desc_stats_reply_sw_desc_get(o, val,f , l);
	break;
case 6:
	do_of_desc_stats_reply_serial_num_get(o, val,f , l);
	break;
case 7:
	do_of_desc_stats_reply_dp_desc_get(o, val,f , l);
	break;
}
}
void of_desc_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_desc_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_desc_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_desc_stats_reply_mfr_desc_set(o, val, f, l);
	break;
case 4:
	do_of_desc_stats_reply_hw_desc_set(o, val, f, l);
	break;
case 5:
	do_of_desc_stats_reply_sw_desc_set(o, val, f, l);
	break;
case 6:
	do_of_desc_stats_reply_serial_num_set(o, val, f, l);
	break;
case 7:
	do_of_desc_stats_reply_dp_desc_set(o, val, f, l);
	break;
}
}
void of_desc_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_desc_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_desc_stats_request_flags_get(o, val,f , l);
	break;
}
}
void of_desc_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_desc_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_desc_stats_request_flags_set(o, val, f, l);
	break;
}
}
void of_echo_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_echo_reply_xid_get(o, val,f , l);
	break;
case 2:
	//do_of_echo_reply_data_get(o, val,f , l);
	break;
}
}
void of_echo_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_echo_reply_xid_set(o, val, f, l);
	break;
case 2:
	//do_of_echo_reply_data_set(o, val, f, l);
	break;
}
}
void of_echo_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_echo_request_xid_get(o, val,f , l);
	break;
case 2:
	//do_of_echo_request_data_get(o, val,f , l);
	break;
}
}
void of_echo_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_echo_request_xid_set(o, val, f, l);
	break;
case 2:
	//do_of_echo_request_data_set(o, val, f, l);
	break;
}
}
void of_experimenter_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_experimenter_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_experimenter_error_msg_subtype_get(o, val,f , l);
	break;
case 3:
	do_of_experimenter_error_msg_experimenter_get(o, val,f , l);
	break;
case 4:
	//do_of_experimenter_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_experimenter_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_experimenter_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_experimenter_error_msg_subtype_set(o, val, f, l);
	break;
case 3:
	do_of_experimenter_error_msg_experimenter_set(o, val, f, l);
	break;
case 4:
	//do_of_experimenter_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_features_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_features_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_features_reply_datapath_id_get(o, val,f , l);
	break;
case 3:
	do_of_features_reply_n_buffers_get(o, val,f , l);
	break;
case 4:
	do_of_features_reply_n_tables_get(o, val,f , l);
	break;
case 5:
	do_of_features_reply_auxiliary_id_get(o, val,f , l);
	break;
case 6:
	do_of_features_reply_capabilities_get(o, val,f , l);
	break;
case 7:
	do_of_features_reply_reserved_get(o, val,f , l);
	break;
case 8:
	do_of_features_reply_ports_get(o, val,f , l);
	break;
case 9:
	do_of_features_reply_actions_get(o, val,f , l);
	break;
}
}
void of_features_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_features_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_features_reply_datapath_id_set(o, val, f, l);
	break;
case 3:
	do_of_features_reply_n_buffers_set(o, val, f, l);
	break;
case 4:
	do_of_features_reply_n_tables_set(o, val, f, l);
	break;
case 5:
	do_of_features_reply_auxiliary_id_set(o, val, f, l);
	break;
case 6:
	do_of_features_reply_capabilities_set(o, val, f, l);
	break;
case 7:
	do_of_features_reply_reserved_set(o, val, f, l);
	break;
case 8:
	do_of_features_reply_ports_set(o, val, f, l);
	break;
case 9:
	do_of_features_reply_actions_set(o, val, f, l);
	break;
}
}
void of_features_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_features_request_xid_get(o, val,f , l);
	break;
}
}
void of_features_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_features_request_xid_set(o, val, f, l);
	break;
}
}
void of_flow_add_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_add_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_add_cookie_get(o, val,f , l);
	break;
case 3:
	do_of_flow_add_cookie_mask_get(o, val,f , l);
	break;
case 4:
	do_of_flow_add_table_id_get(o, val,f , l);
	break;
case 5:
	do_of_flow_add_idle_timeout_get(o, val,f , l);
	break;
case 6:
	do_of_flow_add_hard_timeout_get(o, val,f , l);
	break;
case 7:
	do_of_flow_add_priority_get(o, val,f , l);
	break;
case 8:
	do_of_flow_add_buffer_id_get(o, val,f , l);
	break;
case 9:
	do_of_flow_add_out_port_get(o, val,f , l);
	break;
case 10:
	do_of_flow_add_out_group_get(o, val,f , l);
	break;
case 11:
	do_of_flow_add_flags_get(o, val,f , l);
	break;
case 12:
	do_of_flow_add_importance_get(o, val,f , l);
	break;
case 13:
	do_of_flow_add_match_get(o, val,f , l);
	break;
case 14:
	do_of_flow_add_instructions_get(o, val,f , l);
	break;
case 15:
	do_of_flow_add_actions_get(o, val,f , l);
	break;
}
}
void of_flow_add_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_add_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_add_cookie_set(o, val, f, l);
	break;
case 3:
	do_of_flow_add_cookie_mask_set(o, val, f, l);
	break;
case 4:
	do_of_flow_add_table_id_set(o, val, f, l);
	break;
case 5:
	do_of_flow_add_idle_timeout_set(o, val, f, l);
	break;
case 6:
	do_of_flow_add_hard_timeout_set(o, val, f, l);
	break;
case 7:
	do_of_flow_add_priority_set(o, val, f, l);
	break;
case 8:
	do_of_flow_add_buffer_id_set(o, val, f, l);
	break;
case 9:
	do_of_flow_add_out_port_set(o, val, f, l);
	break;
case 10:
	do_of_flow_add_out_group_set(o, val, f, l);
	break;
case 11:
	do_of_flow_add_flags_set(o, val, f, l);
	break;
case 12:
	do_of_flow_add_importance_set(o, val, f, l);
	break;
case 13:
	do_of_flow_add_match_set(o, val, f, l);
	break;
case 14:
	do_of_flow_add_instructions_set(o, val, f, l);
	break;
case 15:
	do_of_flow_add_actions_set(o, val, f, l);
	break;
}
}
void of_flow_delete_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_delete_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_delete_cookie_get(o, val,f , l);
	break;
case 3:
	do_of_flow_delete_cookie_mask_get(o, val,f , l);
	break;
case 4:
	do_of_flow_delete_table_id_get(o, val,f , l);
	break;
case 5:
	do_of_flow_delete_idle_timeout_get(o, val,f , l);
	break;
case 6:
	do_of_flow_delete_hard_timeout_get(o, val,f , l);
	break;
case 7:
	do_of_flow_delete_priority_get(o, val,f , l);
	break;
case 8:
	do_of_flow_delete_buffer_id_get(o, val,f , l);
	break;
case 9:
	do_of_flow_delete_out_port_get(o, val,f , l);
	break;
case 10:
	do_of_flow_delete_out_group_get(o, val,f , l);
	break;
case 11:
	do_of_flow_delete_flags_get(o, val,f , l);
	break;
case 12:
	do_of_flow_delete_importance_get(o, val,f , l);
	break;
case 13:
	do_of_flow_delete_match_get(o, val,f , l);
	break;
case 14:
	do_of_flow_delete_instructions_get(o, val,f , l);
	break;
case 15:
	do_of_flow_delete_actions_get(o, val,f , l);
	break;
}
}
void of_flow_delete_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_delete_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_delete_cookie_set(o, val, f, l);
	break;
case 3:
	do_of_flow_delete_cookie_mask_set(o, val, f, l);
	break;
case 4:
	do_of_flow_delete_table_id_set(o, val, f, l);
	break;
case 5:
	do_of_flow_delete_idle_timeout_set(o, val, f, l);
	break;
case 6:
	do_of_flow_delete_hard_timeout_set(o, val, f, l);
	break;
case 7:
	do_of_flow_delete_priority_set(o, val, f, l);
	break;
case 8:
	do_of_flow_delete_buffer_id_set(o, val, f, l);
	break;
case 9:
	do_of_flow_delete_out_port_set(o, val, f, l);
	break;
case 10:
	do_of_flow_delete_out_group_set(o, val, f, l);
	break;
case 11:
	do_of_flow_delete_flags_set(o, val, f, l);
	break;
case 12:
	do_of_flow_delete_importance_set(o, val, f, l);
	break;
case 13:
	do_of_flow_delete_match_set(o, val, f, l);
	break;
case 14:
	do_of_flow_delete_instructions_set(o, val, f, l);
	break;
case 15:
	do_of_flow_delete_actions_set(o, val, f, l);
	break;
}
}
void of_flow_delete_strict_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_delete_strict_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_delete_strict_cookie_get(o, val,f , l);
	break;
case 3:
	do_of_flow_delete_strict_cookie_mask_get(o, val,f , l);
	break;
case 4:
	do_of_flow_delete_strict_table_id_get(o, val,f , l);
	break;
case 5:
	do_of_flow_delete_strict_idle_timeout_get(o, val,f , l);
	break;
case 6:
	do_of_flow_delete_strict_hard_timeout_get(o, val,f , l);
	break;
case 7:
	do_of_flow_delete_strict_priority_get(o, val,f , l);
	break;
case 8:
	do_of_flow_delete_strict_buffer_id_get(o, val,f , l);
	break;
case 9:
	do_of_flow_delete_strict_out_port_get(o, val,f , l);
	break;
case 10:
	do_of_flow_delete_strict_out_group_get(o, val,f , l);
	break;
case 11:
	do_of_flow_delete_strict_flags_get(o, val,f , l);
	break;
case 12:
	do_of_flow_delete_strict_importance_get(o, val,f , l);
	break;
case 13:
	do_of_flow_delete_strict_match_get(o, val,f , l);
	break;
case 14:
	do_of_flow_delete_strict_instructions_get(o, val,f , l);
	break;
case 15:
	do_of_flow_delete_strict_actions_get(o, val,f , l);
	break;
}
}
void of_flow_delete_strict_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_delete_strict_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_delete_strict_cookie_set(o, val, f, l);
	break;
case 3:
	do_of_flow_delete_strict_cookie_mask_set(o, val, f, l);
	break;
case 4:
	do_of_flow_delete_strict_table_id_set(o, val, f, l);
	break;
case 5:
	do_of_flow_delete_strict_idle_timeout_set(o, val, f, l);
	break;
case 6:
	do_of_flow_delete_strict_hard_timeout_set(o, val, f, l);
	break;
case 7:
	do_of_flow_delete_strict_priority_set(o, val, f, l);
	break;
case 8:
	do_of_flow_delete_strict_buffer_id_set(o, val, f, l);
	break;
case 9:
	do_of_flow_delete_strict_out_port_set(o, val, f, l);
	break;
case 10:
	do_of_flow_delete_strict_out_group_set(o, val, f, l);
	break;
case 11:
	do_of_flow_delete_strict_flags_set(o, val, f, l);
	break;
case 12:
	do_of_flow_delete_strict_importance_set(o, val, f, l);
	break;
case 13:
	do_of_flow_delete_strict_match_set(o, val, f, l);
	break;
case 14:
	do_of_flow_delete_strict_instructions_set(o, val, f, l);
	break;
case 15:
	do_of_flow_delete_strict_actions_set(o, val, f, l);
	break;
}
}
void of_flow_mod_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_mod_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_mod_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_flow_mod_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_flow_mod_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_mod_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_mod_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_flow_mod_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_flow_modify_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_modify_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_modify_cookie_get(o, val,f , l);
	break;
case 3:
	do_of_flow_modify_cookie_mask_get(o, val,f , l);
	break;
case 4:
	do_of_flow_modify_table_id_get(o, val,f , l);
	break;
case 5:
	do_of_flow_modify_idle_timeout_get(o, val,f , l);
	break;
case 6:
	do_of_flow_modify_hard_timeout_get(o, val,f , l);
	break;
case 7:
	do_of_flow_modify_priority_get(o, val,f , l);
	break;
case 8:
	do_of_flow_modify_buffer_id_get(o, val,f , l);
	break;
case 9:
	do_of_flow_modify_out_port_get(o, val,f , l);
	break;
case 10:
	do_of_flow_modify_out_group_get(o, val,f , l);
	break;
case 11:
	do_of_flow_modify_flags_get(o, val,f , l);
	break;
case 12:
	do_of_flow_modify_importance_get(o, val,f , l);
	break;
case 13:
	do_of_flow_modify_match_get(o, val,f , l);
	break;
case 14:
	do_of_flow_modify_instructions_get(o, val,f , l);
	break;
case 15:
	do_of_flow_modify_actions_get(o, val,f , l);
	break;
}
}
void of_flow_modify_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_modify_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_modify_cookie_set(o, val, f, l);
	break;
case 3:
	do_of_flow_modify_cookie_mask_set(o, val, f, l);
	break;
case 4:
	do_of_flow_modify_table_id_set(o, val, f, l);
	break;
case 5:
	do_of_flow_modify_idle_timeout_set(o, val, f, l);
	break;
case 6:
	do_of_flow_modify_hard_timeout_set(o, val, f, l);
	break;
case 7:
	do_of_flow_modify_priority_set(o, val, f, l);
	break;
case 8:
	do_of_flow_modify_buffer_id_set(o, val, f, l);
	break;
case 9:
	do_of_flow_modify_out_port_set(o, val, f, l);
	break;
case 10:
	do_of_flow_modify_out_group_set(o, val, f, l);
	break;
case 11:
	do_of_flow_modify_flags_set(o, val, f, l);
	break;
case 12:
	do_of_flow_modify_importance_set(o, val, f, l);
	break;
case 13:
	do_of_flow_modify_match_set(o, val, f, l);
	break;
case 14:
	do_of_flow_modify_instructions_set(o, val, f, l);
	break;
case 15:
	do_of_flow_modify_actions_set(o, val, f, l);
	break;
}
}
void of_flow_modify_strict_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_modify_strict_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_modify_strict_cookie_get(o, val,f , l);
	break;
case 3:
	do_of_flow_modify_strict_cookie_mask_get(o, val,f , l);
	break;
case 4:
	do_of_flow_modify_strict_table_id_get(o, val,f , l);
	break;
case 5:
	do_of_flow_modify_strict_idle_timeout_get(o, val,f , l);
	break;
case 6:
	do_of_flow_modify_strict_hard_timeout_get(o, val,f , l);
	break;
case 7:
	do_of_flow_modify_strict_priority_get(o, val,f , l);
	break;
case 8:
	do_of_flow_modify_strict_buffer_id_get(o, val,f , l);
	break;
case 9:
	do_of_flow_modify_strict_out_port_get(o, val,f , l);
	break;
case 10:
	do_of_flow_modify_strict_out_group_get(o, val,f , l);
	break;
case 11:
	do_of_flow_modify_strict_flags_get(o, val,f , l);
	break;
case 12:
	do_of_flow_modify_strict_importance_get(o, val,f , l);
	break;
case 13:
	do_of_flow_modify_strict_match_get(o, val,f , l);
	break;
case 14:
	do_of_flow_modify_strict_instructions_get(o, val,f , l);
	break;
case 15:
	do_of_flow_modify_strict_actions_get(o, val,f , l);
	break;
}
}
void of_flow_modify_strict_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_modify_strict_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_modify_strict_cookie_set(o, val, f, l);
	break;
case 3:
	do_of_flow_modify_strict_cookie_mask_set(o, val, f, l);
	break;
case 4:
	do_of_flow_modify_strict_table_id_set(o, val, f, l);
	break;
case 5:
	do_of_flow_modify_strict_idle_timeout_set(o, val, f, l);
	break;
case 6:
	do_of_flow_modify_strict_hard_timeout_set(o, val, f, l);
	break;
case 7:
	do_of_flow_modify_strict_priority_set(o, val, f, l);
	break;
case 8:
	do_of_flow_modify_strict_buffer_id_set(o, val, f, l);
	break;
case 9:
	do_of_flow_modify_strict_out_port_set(o, val, f, l);
	break;
case 10:
	do_of_flow_modify_strict_out_group_set(o, val, f, l);
	break;
case 11:
	do_of_flow_modify_strict_flags_set(o, val, f, l);
	break;
case 12:
	do_of_flow_modify_strict_importance_set(o, val, f, l);
	break;
case 13:
	do_of_flow_modify_strict_match_set(o, val, f, l);
	break;
case 14:
	do_of_flow_modify_strict_instructions_set(o, val, f, l);
	break;
case 15:
	do_of_flow_modify_strict_actions_set(o, val, f, l);
	break;
}
}
void of_flow_monitor_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_monitor_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_monitor_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_flow_monitor_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_flow_monitor_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_monitor_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_monitor_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_flow_monitor_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_flow_removed_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_removed_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_removed_cookie_get(o, val,f , l);
	break;
case 3:
	do_of_flow_removed_priority_get(o, val,f , l);
	break;
case 4:
	do_of_flow_removed_reason_get(o, val,f , l);
	break;
case 5:
	do_of_flow_removed_table_id_get(o, val,f , l);
	break;
case 6:
	do_of_flow_removed_duration_sec_get(o, val,f , l);
	break;
case 7:
	do_of_flow_removed_duration_nsec_get(o, val,f , l);
	break;
case 8:
	do_of_flow_removed_idle_timeout_get(o, val,f , l);
	break;
case 9:
	do_of_flow_removed_hard_timeout_get(o, val,f , l);
	break;
case 10:
	do_of_flow_removed_packet_count_get(o, val,f , l);
	break;
case 11:
	do_of_flow_removed_byte_count_get(o, val,f , l);
	break;
case 12:
	do_of_flow_removed_match_get(o, val,f , l);
	break;
}
}
void of_flow_removed_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_removed_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_removed_cookie_set(o, val, f, l);
	break;
case 3:
	do_of_flow_removed_priority_set(o, val, f, l);
	break;
case 4:
	do_of_flow_removed_reason_set(o, val, f, l);
	break;
case 5:
	do_of_flow_removed_table_id_set(o, val, f, l);
	break;
case 6:
	do_of_flow_removed_duration_sec_set(o, val, f, l);
	break;
case 7:
	do_of_flow_removed_duration_nsec_set(o, val, f, l);
	break;
case 8:
	do_of_flow_removed_idle_timeout_set(o, val, f, l);
	break;
case 9:
	do_of_flow_removed_hard_timeout_set(o, val, f, l);
	break;
case 10:
	do_of_flow_removed_packet_count_set(o, val, f, l);
	break;
case 11:
	do_of_flow_removed_byte_count_set(o, val, f, l);
	break;
case 12:
	do_of_flow_removed_match_set(o, val, f, l);
	break;
}
}
void of_flow_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_flow_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_flow_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_flow_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_flow_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_flow_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_flow_stats_request_table_id_get(o, val,f , l);
	break;
case 4:
	do_of_flow_stats_request_out_port_get(o, val,f , l);
	break;
case 5:
	do_of_flow_stats_request_out_group_get(o, val,f , l);
	break;
case 6:
	do_of_flow_stats_request_cookie_get(o, val,f , l);
	break;
case 7:
	do_of_flow_stats_request_cookie_mask_get(o, val,f , l);
	break;
case 8:
	do_of_flow_stats_request_match_get(o, val,f , l);
	break;
}
}
void of_flow_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_flow_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_flow_stats_request_table_id_set(o, val, f, l);
	break;
case 4:
	do_of_flow_stats_request_out_port_set(o, val, f, l);
	break;
case 5:
	do_of_flow_stats_request_out_group_set(o, val, f, l);
	break;
case 6:
	do_of_flow_stats_request_cookie_set(o, val, f, l);
	break;
case 7:
	do_of_flow_stats_request_cookie_mask_set(o, val, f, l);
	break;
case 8:
	do_of_flow_stats_request_match_set(o, val, f, l);
	break;
}
}
void of_get_config_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_get_config_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_get_config_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_get_config_reply_miss_send_len_get(o, val,f , l);
	break;
}
}
void of_get_config_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_get_config_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_get_config_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_get_config_reply_miss_send_len_set(o, val, f, l);
	break;
}
}
void of_get_config_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_get_config_request_xid_get(o, val,f , l);
	break;
}
}
void of_get_config_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_get_config_request_xid_set(o, val, f, l);
	break;
}
}
void of_group_add_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_add_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_add_group_type_get(o, val,f , l);
	break;
case 3:
	do_of_group_add_group_id_get(o, val,f , l);
	break;
case 4:
	do_of_group_add_buckets_get(o, val,f , l);
	break;
}
}
void of_group_add_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_add_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_add_group_type_set(o, val, f, l);
	break;
case 3:
	do_of_group_add_group_id_set(o, val, f, l);
	break;
case 4:
	do_of_group_add_buckets_set(o, val, f, l);
	break;
}
}
void of_group_delete_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_delete_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_delete_group_type_get(o, val,f , l);
	break;
case 3:
	do_of_group_delete_group_id_get(o, val,f , l);
	break;
case 4:
	do_of_group_delete_buckets_get(o, val,f , l);
	break;
}
}
void of_group_delete_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_delete_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_delete_group_type_set(o, val, f, l);
	break;
case 3:
	do_of_group_delete_group_id_set(o, val, f, l);
	break;
case 4:
	do_of_group_delete_buckets_set(o, val, f, l);
	break;
}
}
void of_group_desc_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_desc_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_desc_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_group_desc_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_group_desc_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_desc_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_desc_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_group_desc_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_group_desc_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_desc_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_desc_stats_request_flags_get(o, val,f , l);
	break;
}
}
void of_group_desc_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_desc_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_desc_stats_request_flags_set(o, val, f, l);
	break;
}
}
void of_group_features_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_features_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_features_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_group_features_stats_reply_types_get(o, val,f , l);
	break;
case 4:
	do_of_group_features_stats_reply_capabilities_get(o, val,f , l);
	break;
case 5:
	do_of_group_features_stats_reply_max_groups_all_get(o, val,f , l);
	break;
case 6:
	do_of_group_features_stats_reply_max_groups_select_get(o, val,f , l);
	break;
case 7:
	do_of_group_features_stats_reply_max_groups_indirect_get(o, val,f , l);
	break;
case 8:
	do_of_group_features_stats_reply_max_groups_ff_get(o, val,f , l);
	break;
case 9:
	do_of_group_features_stats_reply_actions_all_get(o, val,f , l);
	break;
case 10:
	do_of_group_features_stats_reply_actions_select_get(o, val,f , l);
	break;
case 11:
	do_of_group_features_stats_reply_actions_indirect_get(o, val,f , l);
	break;
case 12:
	do_of_group_features_stats_reply_actions_ff_get(o, val,f , l);
	break;
}
}
void of_group_features_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_features_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_features_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_group_features_stats_reply_types_set(o, val, f, l);
	break;
case 4:
	do_of_group_features_stats_reply_capabilities_set(o, val, f, l);
	break;
case 5:
	do_of_group_features_stats_reply_max_groups_all_set(o, val, f, l);
	break;
case 6:
	do_of_group_features_stats_reply_max_groups_select_set(o, val, f, l);
	break;
case 7:
	do_of_group_features_stats_reply_max_groups_indirect_set(o, val, f, l);
	break;
case 8:
	do_of_group_features_stats_reply_max_groups_ff_set(o, val, f, l);
	break;
case 9:
	do_of_group_features_stats_reply_actions_all_set(o, val, f, l);
	break;
case 10:
	do_of_group_features_stats_reply_actions_select_set(o, val, f, l);
	break;
case 11:
	do_of_group_features_stats_reply_actions_indirect_set(o, val, f, l);
	break;
case 12:
	do_of_group_features_stats_reply_actions_ff_set(o, val, f, l);
	break;
}
}
void of_group_features_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_features_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_features_stats_request_flags_get(o, val,f , l);
	break;
}
}
void of_group_features_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_features_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_features_stats_request_flags_set(o, val, f, l);
	break;
}
}
void of_group_mod_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_mod_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_mod_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_group_mod_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_group_mod_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_mod_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_mod_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_group_mod_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_group_modify_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_modify_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_modify_group_type_get(o, val,f , l);
	break;
case 3:
	do_of_group_modify_group_id_get(o, val,f , l);
	break;
case 4:
	do_of_group_modify_buckets_get(o, val,f , l);
	break;
}
}
void of_group_modify_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_modify_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_modify_group_type_set(o, val, f, l);
	break;
case 3:
	do_of_group_modify_group_id_set(o, val, f, l);
	break;
case 4:
	do_of_group_modify_buckets_set(o, val, f, l);
	break;
}
}
void of_group_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_group_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_group_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_group_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_group_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_group_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_group_stats_request_group_id_get(o, val,f , l);
	break;
}
}
void of_group_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_group_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_group_stats_request_group_id_set(o, val, f, l);
	break;
}
}
void of_hello_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_hello_xid_get(o, val,f , l);
	break;
case 2:
	do_of_hello_elements_get(o, val,f , l);
	break;
}
}
void of_hello_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_hello_xid_set(o, val, f, l);
	break;
case 2:
	do_of_hello_elements_set(o, val, f, l);
	break;
}
}
void of_hello_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_hello_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_hello_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_hello_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_hello_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_hello_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_hello_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_hello_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_meter_config_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_config_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_meter_config_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_meter_config_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_meter_config_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_config_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_meter_config_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_meter_config_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_meter_config_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_config_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_meter_config_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_meter_config_stats_request_meter_id_get(o, val,f , l);
	break;
}
}
void of_meter_config_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_config_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_meter_config_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_meter_config_stats_request_meter_id_set(o, val, f, l);
	break;
}
}
void of_meter_features_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_features_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_meter_features_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_meter_features_stats_reply_features_get(o, val,f , l);
	break;
}
}
void of_meter_features_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_features_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_meter_features_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_meter_features_stats_reply_features_set(o, val, f, l);
	break;
}
}
void of_meter_features_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_features_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_meter_features_stats_request_flags_get(o, val,f , l);
	break;
}
}
void of_meter_features_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_features_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_meter_features_stats_request_flags_set(o, val, f, l);
	break;
}
}
void of_meter_mod_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_mod_xid_get(o, val,f , l);
	break;
case 2:
	do_of_meter_mod_flags_get(o, val,f , l);
	break;
case 3:
	do_of_meter_mod_meter_id_get(o, val,f , l);
	break;
case 4:
	do_of_meter_mod_bands_get(o, val,f , l);
	break;
case 5:
	do_of_meter_mod_meters_get(o, val,f , l);
	break;
}
}
void of_meter_mod_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_mod_xid_set(o, val, f, l);
	break;
case 2:
	do_of_meter_mod_flags_set(o, val, f, l);
	break;
case 3:
	do_of_meter_mod_meter_id_set(o, val, f, l);
	break;
case 4:
	do_of_meter_mod_bands_set(o, val, f, l);
	break;
case 5:
	do_of_meter_mod_meters_set(o, val, f, l);
	break;
}
}
void of_meter_mod_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_mod_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_meter_mod_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_meter_mod_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_meter_mod_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_mod_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_meter_mod_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_meter_mod_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_meter_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_meter_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_meter_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_meter_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_meter_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_meter_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_meter_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_meter_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_meter_stats_request_meter_id_get(o, val,f , l);
	break;
}
}
void of_meter_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_meter_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_meter_stats_request_meter_id_set(o, val, f, l);
	break;
}
}
void of_nicira_controller_role_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_nicira_controller_role_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_nicira_controller_role_reply_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_nicira_controller_role_reply_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_nicira_controller_role_reply_role_get(o, val,f , l);
	break;
}
}
void of_nicira_controller_role_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_nicira_controller_role_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_nicira_controller_role_reply_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_nicira_controller_role_reply_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_nicira_controller_role_reply_role_set(o, val, f, l);
	break;
}
}
void of_nicira_controller_role_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_nicira_controller_role_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_nicira_controller_role_request_experimenter_get(o, val,f , l);
	break;
case 3:
	do_of_nicira_controller_role_request_subtype_get(o, val,f , l);
	break;
case 4:
	do_of_nicira_controller_role_request_role_get(o, val,f , l);
	break;
}
}
void of_nicira_controller_role_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_nicira_controller_role_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_nicira_controller_role_request_experimenter_set(o, val, f, l);
	break;
case 3:
	do_of_nicira_controller_role_request_subtype_set(o, val, f, l);
	break;
case 4:
	do_of_nicira_controller_role_request_role_set(o, val, f, l);
	break;
}
}
void of_packet_in_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_packet_in_xid_get(o, val,f , l);
	break;
case 2:
	do_of_packet_in_buffer_id_get(o, val,f , l);
	break;
case 3:
	do_of_packet_in_total_len_get(o, val,f , l);
	break;
case 4:
	do_of_packet_in_reason_get(o, val,f , l);
	break;
case 5:
	do_of_packet_in_table_id_get(o, val,f , l);
	break;
case 6:
	do_of_packet_in_cookie_get(o, val,f , l);
	break;
case 7:
	do_of_packet_in_match_get(o, val,f , l);
	break;
case 8:
	//do_of_packet_in_data_get(o, val,f , l);
	break;
case 9:
	do_of_packet_in_in_port_get(o, val,f , l);
	break;
case 10:
	do_of_packet_in_in_phy_port_get(o, val,f , l);
	break;
}
}
void of_packet_in_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_packet_in_xid_set(o, val, f, l);
	break;
case 2:
	do_of_packet_in_buffer_id_set(o, val, f, l);
	break;
case 3:
	do_of_packet_in_total_len_set(o, val, f, l);
	break;
case 4:
	do_of_packet_in_reason_set(o, val, f, l);
	break;
case 5:
	do_of_packet_in_table_id_set(o, val, f, l);
	break;
case 6:
	do_of_packet_in_cookie_set(o, val, f, l);
	break;
case 7:
	do_of_packet_in_match_set(o, val, f, l);
	break;
case 8:
	//do_of_packet_in_data_set(o, val, f, l);
	break;
case 9:
	do_of_packet_in_in_port_set(o, val, f, l);
	break;
case 10:
	do_of_packet_in_in_phy_port_set(o, val, f, l);
	break;
}
}
void of_packet_out_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_packet_out_xid_get(o, val,f , l);
	break;
case 2:
	do_of_packet_out_buffer_id_get(o, val,f , l);
	break;
case 3:
	do_of_packet_out_in_port_get(o, val,f , l);
	break;
case 4:
	do_of_packet_out_actions_get(o, val,f , l);
	break;
case 5:
	//do_of_packet_out_data_get(o, val,f , l);
	break;
}
}
void of_packet_out_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_packet_out_xid_set(o, val, f, l);
	break;
case 2:
	do_of_packet_out_buffer_id_set(o, val, f, l);
	break;
case 3:
	do_of_packet_out_in_port_set(o, val, f, l);
	break;
case 4:
	do_of_packet_out_actions_set(o, val, f, l);
	break;
case 5:
	//do_of_packet_out_data_set(o, val, f, l);
	break;
}
}
void of_port_desc_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_port_desc_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_port_desc_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_port_desc_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_port_desc_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_port_desc_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_port_desc_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_port_desc_stats_request_flags_get(o, val,f , l);
	break;
}
}
void of_port_desc_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_port_desc_stats_request_flags_set(o, val, f, l);
	break;
}
}
void of_port_mod_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_mod_xid_get(o, val,f , l);
	break;
case 2:
	do_of_port_mod_port_no_get(o, val,f , l);
	break;
case 3:
	do_of_port_mod_hw_addr_get(o, val,f , l);
	break;
case 4:
	do_of_port_mod_config_get(o, val,f , l);
	break;
case 5:
	do_of_port_mod_mask_get(o, val,f , l);
	break;
case 6:
	do_of_port_mod_properties_get(o, val,f , l);
	break;
case 7:
	do_of_port_mod_advertise_get(o, val,f , l);
	break;
}
}
void of_port_mod_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_mod_xid_set(o, val, f, l);
	break;
case 2:
	do_of_port_mod_port_no_set(o, val, f, l);
	break;
case 3:
	do_of_port_mod_hw_addr_set(o, val, f, l);
	break;
case 4:
	do_of_port_mod_config_set(o, val, f, l);
	break;
case 5:
	do_of_port_mod_mask_set(o, val, f, l);
	break;
case 6:
	do_of_port_mod_properties_set(o, val, f, l);
	break;
case 7:
	do_of_port_mod_advertise_set(o, val, f, l);
	break;
}
}
void of_port_mod_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_mod_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_port_mod_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_port_mod_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_port_mod_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_mod_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_port_mod_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_port_mod_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_port_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_port_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_port_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_port_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_port_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_port_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_port_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_port_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_port_stats_request_port_no_get(o, val,f , l);
	break;
}
}
void of_port_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_port_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_port_stats_request_port_no_set(o, val, f, l);
	break;
}
}
void of_port_status_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_status_xid_get(o, val,f , l);
	break;
case 2:
	do_of_port_status_reason_get(o, val,f , l);
	break;
case 3:
	do_of_port_status_desc_get(o, val,f , l);
	break;
}
}
void of_port_status_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_status_xid_set(o, val, f, l);
	break;
case 2:
	do_of_port_status_reason_set(o, val, f, l);
	break;
case 3:
	do_of_port_status_desc_set(o, val, f, l);
	break;
}
}
void of_queue_desc_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_queue_desc_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_queue_desc_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_queue_desc_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_queue_desc_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_queue_desc_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_queue_desc_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_queue_desc_stats_request_flags_get(o, val,f , l);
	break;
}
}
void of_queue_desc_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_queue_desc_stats_request_flags_set(o, val, f, l);
	break;
}
}
void of_queue_get_config_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_get_config_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_queue_get_config_reply_port_get(o, val,f , l);
	break;
case 3:
	do_of_queue_get_config_reply_queues_get(o, val,f , l);
	break;
}
}
void of_queue_get_config_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_get_config_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_queue_get_config_reply_port_set(o, val, f, l);
	break;
case 3:
	do_of_queue_get_config_reply_queues_set(o, val, f, l);
	break;
}
}
void of_queue_get_config_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_get_config_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_queue_get_config_request_port_get(o, val,f , l);
	break;
}
}
void of_queue_get_config_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_get_config_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_queue_get_config_request_port_set(o, val, f, l);
	break;
}
}
void of_queue_op_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_op_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_queue_op_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_queue_op_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_queue_op_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_op_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_queue_op_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_queue_op_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_queue_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_queue_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_queue_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_queue_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_queue_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_queue_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_queue_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_queue_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_queue_stats_request_port_no_get(o, val,f , l);
	break;
case 4:
	do_of_queue_stats_request_queue_id_get(o, val,f , l);
	break;
}
}
void of_queue_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_queue_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_queue_stats_request_port_no_set(o, val, f, l);
	break;
case 4:
	do_of_queue_stats_request_queue_id_set(o, val, f, l);
	break;
}
}
void of_requestforward_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_requestforward_xid_get(o, val,f , l);
	break;
case 2:
	do_of_requestforward_role_get(o, val,f , l);
	break;
case 3:
	//do_of_requestforward_data_get(o, val,f , l);
	break;
}
}
void of_requestforward_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_requestforward_xid_set(o, val, f, l);
	break;
case 2:
	do_of_requestforward_role_set(o, val, f, l);
	break;
case 3:
	//do_of_requestforward_data_set(o, val, f, l);
	break;
}
}
void of_role_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_role_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_role_reply_role_get(o, val,f , l);
	break;
case 3:
	do_of_role_reply_generation_id_get(o, val,f , l);
	break;
}
}
void of_role_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_role_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_role_reply_role_set(o, val, f, l);
	break;
case 3:
	do_of_role_reply_generation_id_set(o, val, f, l);
	break;
}
}
void of_role_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_role_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_role_request_role_get(o, val,f , l);
	break;
case 3:
	do_of_role_request_generation_id_get(o, val,f , l);
	break;
}
}
void of_role_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_role_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_role_request_role_set(o, val, f, l);
	break;
case 3:
	do_of_role_request_generation_id_set(o, val, f, l);
	break;
}
}
void of_role_request_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_role_request_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_role_request_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_role_request_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_role_request_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_role_request_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_role_request_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_role_request_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_role_status_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_role_status_xid_get(o, val,f , l);
	break;
case 2:
	do_of_role_status_role_get(o, val,f , l);
	break;
case 3:
	do_of_role_status_reason_get(o, val,f , l);
	break;
case 4:
	do_of_role_status_generation_id_get(o, val,f , l);
	break;
case 5:
	do_of_role_status_properties_get(o, val,f , l);
	break;
}
}
void of_role_status_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_role_status_xid_set(o, val, f, l);
	break;
case 2:
	do_of_role_status_role_set(o, val, f, l);
	break;
case 3:
	do_of_role_status_reason_set(o, val, f, l);
	break;
case 4:
	do_of_role_status_generation_id_set(o, val, f, l);
	break;
case 5:
	do_of_role_status_properties_set(o, val, f, l);
	break;
}
}
void of_set_config_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_set_config_xid_get(o, val,f , l);
	break;
case 2:
	do_of_set_config_flags_get(o, val,f , l);
	break;
case 3:
	do_of_set_config_miss_send_len_get(o, val,f , l);
	break;
}
}
void of_set_config_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_set_config_xid_set(o, val, f, l);
	break;
case 2:
	do_of_set_config_flags_set(o, val, f, l);
	break;
case 3:
	do_of_set_config_miss_send_len_set(o, val, f, l);
	break;
}
}
void of_switch_config_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_switch_config_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_switch_config_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_switch_config_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_switch_config_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_switch_config_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_switch_config_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_switch_config_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_table_desc_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_desc_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_desc_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_table_desc_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_table_desc_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_desc_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_desc_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_table_desc_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_table_desc_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_desc_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_desc_stats_request_flags_get(o, val,f , l);
	break;
}
}
void of_table_desc_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_desc_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_desc_stats_request_flags_set(o, val, f, l);
	break;
}
}
void of_table_features_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_features_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_features_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_table_features_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_table_features_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_features_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_features_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_table_features_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_table_features_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_features_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_features_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_table_features_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_table_features_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_features_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_features_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_table_features_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_table_features_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_features_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_features_stats_request_flags_get(o, val,f , l);
	break;
case 3:
	do_of_table_features_stats_request_entries_get(o, val,f , l);
	break;
}
}
void of_table_features_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_features_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_features_stats_request_flags_set(o, val, f, l);
	break;
case 3:
	do_of_table_features_stats_request_entries_set(o, val, f, l);
	break;
}
}
void of_table_mod_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_mod_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_mod_table_id_get(o, val,f , l);
	break;
case 3:
	do_of_table_mod_config_get(o, val,f , l);
	break;
case 4:
	do_of_table_mod_properties_get(o, val,f , l);
	break;
}
}
void of_table_mod_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_mod_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_mod_table_id_set(o, val, f, l);
	break;
case 3:
	do_of_table_mod_config_set(o, val, f, l);
	break;
case 4:
	do_of_table_mod_properties_set(o, val, f, l);
	break;
}
}
void of_table_mod_failed_error_msg_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_mod_failed_error_msg_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_mod_failed_error_msg_code_get(o, val,f , l);
	break;
case 3:
	//do_of_table_mod_failed_error_msg_data_get(o, val,f , l);
	break;
}
}
void of_table_mod_failed_error_msg_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_mod_failed_error_msg_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_mod_failed_error_msg_code_set(o, val, f, l);
	break;
case 3:
	//do_of_table_mod_failed_error_msg_data_set(o, val, f, l);
	break;
}
}
void of_table_stats_reply_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_stats_reply_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_stats_reply_flags_get(o, val,f , l);
	break;
case 3:
	do_of_table_stats_reply_entries_get(o, val,f , l);
	break;
}
}
void of_table_stats_reply_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_stats_reply_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_stats_reply_flags_set(o, val, f, l);
	break;
case 3:
	do_of_table_stats_reply_entries_set(o, val, f, l);
	break;
}
}
void of_table_stats_request_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_stats_request_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_stats_request_flags_get(o, val,f , l);
	break;
}
}
void of_table_stats_request_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_stats_request_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_stats_request_flags_set(o, val, f, l);
	break;
}
}
void of_table_status_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_status_xid_get(o, val,f , l);
	break;
case 2:
	do_of_table_status_role_get(o, val,f , l);
	break;
case 3:
	do_of_table_status_reason_get(o, val,f , l);
	break;
case 4:
	do_of_table_status_table_get(o, val,f , l);
	break;
}
}
void of_table_status_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_status_xid_set(o, val, f, l);
	break;
case 2:
	do_of_table_status_role_set(o, val, f, l);
	break;
case 3:
	do_of_table_status_reason_set(o, val, f, l);
	break;
case 4:
	do_of_table_status_table_set(o, val, f, l);
	break;
}
}
void of_action_bsn_checksum_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_bsn_checksum_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_bsn_checksum_subtype_get(o, val,f , l);
	break;
case 3:
	//do_of_action_bsn_checksum_checksum_get(o, val,f , l);
	break;
}
}
void of_action_bsn_checksum_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_bsn_checksum_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_bsn_checksum_subtype_set(o, val, f, l);
	break;
case 3:
	//do_of_action_bsn_checksum_checksum_set(o, val, f, l);
	break;
}
}
void of_action_bsn_gentable_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_bsn_gentable_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_bsn_gentable_subtype_get(o, val,f , l);
	break;
case 3:
	do_of_action_bsn_gentable_table_id_get(o, val,f , l);
	break;
case 4:
	do_of_action_bsn_gentable_key_get(o, val,f , l);
	break;
}
}
void of_action_bsn_gentable_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_bsn_gentable_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_bsn_gentable_subtype_set(o, val, f, l);
	break;
case 3:
	do_of_action_bsn_gentable_table_id_set(o, val, f, l);
	break;
case 4:
	do_of_action_bsn_gentable_key_set(o, val, f, l);
	break;
}
}
void of_action_bsn_mirror_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_bsn_mirror_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_bsn_mirror_subtype_get(o, val,f , l);
	break;
case 3:
	do_of_action_bsn_mirror_dest_port_get(o, val,f , l);
	break;
case 4:
	do_of_action_bsn_mirror_vlan_tag_get(o, val,f , l);
	break;
case 5:
	do_of_action_bsn_mirror_copy_stage_get(o, val,f , l);
	break;
}
}
void of_action_bsn_mirror_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_bsn_mirror_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_bsn_mirror_subtype_set(o, val, f, l);
	break;
case 3:
	do_of_action_bsn_mirror_dest_port_set(o, val, f, l);
	break;
case 4:
	do_of_action_bsn_mirror_vlan_tag_set(o, val, f, l);
	break;
case 5:
	do_of_action_bsn_mirror_copy_stage_set(o, val, f, l);
	break;
}
}
void of_action_bsn_set_tunnel_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_bsn_set_tunnel_dst_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_bsn_set_tunnel_dst_subtype_get(o, val,f , l);
	break;
case 3:
	do_of_action_bsn_set_tunnel_dst_dst_get(o, val,f , l);
	break;
}
}
void of_action_bsn_set_tunnel_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_bsn_set_tunnel_dst_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_bsn_set_tunnel_dst_subtype_set(o, val, f, l);
	break;
case 3:
	do_of_action_bsn_set_tunnel_dst_dst_set(o, val, f, l);
	break;
}
}
void of_action_copy_ttl_in_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_copy_ttl_in_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_copy_ttl_out_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_copy_ttl_out_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_dec_mpls_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_dec_mpls_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_dec_nw_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_dec_nw_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_enqueue_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_enqueue_port_get(o, val,f , l);
	break;
case 2:
	do_of_action_enqueue_queue_id_get(o, val,f , l);
	break;
}
}
void of_action_enqueue_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_enqueue_port_set(o, val, f, l);
	break;
case 2:
	do_of_action_enqueue_queue_id_set(o, val, f, l);
	break;
}
}
void of_action_group_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_group_group_id_get(o, val,f , l);
	break;
}
}
void of_action_group_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_group_group_id_set(o, val, f, l);
	break;
}
}
void of_action_id_bsn_checksum_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_bsn_checksum_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_id_bsn_checksum_subtype_get(o, val,f , l);
	break;
}
}
void of_action_id_bsn_checksum_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_bsn_checksum_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_id_bsn_checksum_subtype_set(o, val, f, l);
	break;
}
}
void of_action_id_bsn_gentable_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_bsn_gentable_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_id_bsn_gentable_subtype_get(o, val,f , l);
	break;
}
}
void of_action_id_bsn_gentable_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_bsn_gentable_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_id_bsn_gentable_subtype_set(o, val, f, l);
	break;
}
}
void of_action_id_bsn_mirror_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_bsn_mirror_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_id_bsn_mirror_subtype_get(o, val,f , l);
	break;
}
}
void of_action_id_bsn_mirror_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_bsn_mirror_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_id_bsn_mirror_subtype_set(o, val, f, l);
	break;
}
}
void of_action_id_bsn_set_tunnel_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_bsn_set_tunnel_dst_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_id_bsn_set_tunnel_dst_subtype_get(o, val,f , l);
	break;
}
}
void of_action_id_bsn_set_tunnel_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_bsn_set_tunnel_dst_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_id_bsn_set_tunnel_dst_subtype_set(o, val, f, l);
	break;
}
}
void of_action_id_copy_ttl_in_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_copy_ttl_in_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_copy_ttl_out_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_copy_ttl_out_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_dec_mpls_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_dec_mpls_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_dec_nw_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_dec_nw_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_group_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_group_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_nicira_dec_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_nicira_dec_ttl_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_id_nicira_dec_ttl_subtype_get(o, val,f , l);
	break;
}
}
void of_action_id_nicira_dec_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_id_nicira_dec_ttl_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_id_nicira_dec_ttl_subtype_set(o, val, f, l);
	break;
}
}
void of_action_id_output_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_output_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_pop_mpls_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_pop_mpls_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_pop_pbb_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_pop_pbb_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_pop_vlan_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_pop_vlan_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_push_mpls_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_push_mpls_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_push_pbb_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_push_pbb_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_push_vlan_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_push_vlan_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_set_field_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_set_field_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_set_mpls_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_set_mpls_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_set_nw_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_set_nw_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_set_queue_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_id_set_queue_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_nicira_dec_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_nicira_dec_ttl_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_action_nicira_dec_ttl_subtype_get(o, val,f , l);
	break;
}
}
void of_action_nicira_dec_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_nicira_dec_ttl_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_action_nicira_dec_ttl_subtype_set(o, val, f, l);
	break;
}
}
void of_action_output_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_output_port_get(o, val,f , l);
	break;
case 2:
	do_of_action_output_max_len_get(o, val,f , l);
	break;
}
}
void of_action_output_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_output_port_set(o, val, f, l);
	break;
case 2:
	do_of_action_output_max_len_set(o, val, f, l);
	break;
}
}
void of_action_pop_mpls_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_pop_mpls_ethertype_get(o, val,f , l);
	break;
}
}
void of_action_pop_mpls_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_pop_mpls_ethertype_set(o, val, f, l);
	break;
}
}
void of_action_pop_pbb_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_pop_pbb_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_pop_vlan_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_pop_vlan_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_push_mpls_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_push_mpls_ethertype_get(o, val,f , l);
	break;
}
}
void of_action_push_mpls_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_push_mpls_ethertype_set(o, val, f, l);
	break;
}
}
void of_action_push_pbb_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_push_pbb_ethertype_get(o, val,f , l);
	break;
}
}
void of_action_push_pbb_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_push_pbb_ethertype_set(o, val, f, l);
	break;
}
}
void of_action_push_vlan_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_push_vlan_ethertype_get(o, val,f , l);
	break;
}
}
void of_action_push_vlan_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_push_vlan_ethertype_set(o, val, f, l);
	break;
}
}
void of_action_set_dl_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_dl_dst_dl_addr_get(o, val,f , l);
	break;
}
}
void of_action_set_dl_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_dl_dst_dl_addr_set(o, val, f, l);
	break;
}
}
void of_action_set_dl_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_dl_src_dl_addr_get(o, val,f , l);
	break;
}
}
void of_action_set_dl_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_dl_src_dl_addr_set(o, val, f, l);
	break;
}
}
void of_action_set_field_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_field_field_get(o, val,f , l);
	break;
}
}
void of_action_set_field_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_field_field_set(o, val, f, l);
	break;
}
}
void of_action_set_mpls_label_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_mpls_label_mpls_label_get(o, val,f , l);
	break;
}
}
void of_action_set_mpls_label_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_mpls_label_mpls_label_set(o, val, f, l);
	break;
}
}
void of_action_set_mpls_tc_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_mpls_tc_mpls_tc_get(o, val,f , l);
	break;
}
}
void of_action_set_mpls_tc_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_mpls_tc_mpls_tc_set(o, val, f, l);
	break;
}
}
void of_action_set_mpls_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_mpls_ttl_mpls_ttl_get(o, val,f , l);
	break;
}
}
void of_action_set_mpls_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_mpls_ttl_mpls_ttl_set(o, val, f, l);
	break;
}
}
void of_action_set_nw_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_dst_nw_addr_get(o, val,f , l);
	break;
}
}
void of_action_set_nw_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_dst_nw_addr_set(o, val, f, l);
	break;
}
}
void of_action_set_nw_ecn_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_ecn_nw_ecn_get(o, val,f , l);
	break;
}
}
void of_action_set_nw_ecn_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_ecn_nw_ecn_set(o, val, f, l);
	break;
}
}
void of_action_set_nw_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_src_nw_addr_get(o, val,f , l);
	break;
}
}
void of_action_set_nw_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_src_nw_addr_set(o, val, f, l);
	break;
}
}
void of_action_set_nw_tos_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_tos_nw_tos_get(o, val,f , l);
	break;
}
}
void of_action_set_nw_tos_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_tos_nw_tos_set(o, val, f, l);
	break;
}
}
void of_action_set_nw_ttl_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_ttl_nw_ttl_get(o, val,f , l);
	break;
}
}
void of_action_set_nw_ttl_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_nw_ttl_nw_ttl_set(o, val, f, l);
	break;
}
}
void of_action_set_queue_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_queue_queue_id_get(o, val,f , l);
	break;
}
}
void of_action_set_queue_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_queue_queue_id_set(o, val, f, l);
	break;
}
}
void of_action_set_tp_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_tp_dst_tp_port_get(o, val,f , l);
	break;
}
}
void of_action_set_tp_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_tp_dst_tp_port_set(o, val, f, l);
	break;
}
}
void of_action_set_tp_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_tp_src_tp_port_get(o, val,f , l);
	break;
}
}
void of_action_set_tp_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_tp_src_tp_port_set(o, val, f, l);
	break;
}
}
void of_action_set_vlan_pcp_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_vlan_pcp_vlan_pcp_get(o, val,f , l);
	break;
}
}
void of_action_set_vlan_pcp_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_vlan_pcp_vlan_pcp_set(o, val, f, l);
	break;
}
}
void of_action_set_vlan_vid_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_vlan_vid_vlan_vid_get(o, val,f , l);
	break;
}
}
void of_action_set_vlan_vid_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_action_set_vlan_vid_vlan_vid_set(o, val, f, l);
	break;
}
}
void of_action_strip_vlan_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_action_strip_vlan_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_async_config_prop_experimenter_master_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_async_config_prop_experimenter_master_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_async_config_prop_experimenter_slave_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_async_config_prop_experimenter_slave_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_async_config_prop_flow_removed_master_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_flow_removed_master_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_flow_removed_master_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_flow_removed_master_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_flow_removed_slave_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_flow_removed_slave_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_flow_removed_slave_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_flow_removed_slave_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_packet_in_master_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_packet_in_master_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_packet_in_master_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_packet_in_master_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_packet_in_slave_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_packet_in_slave_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_packet_in_slave_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_packet_in_slave_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_port_status_master_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_port_status_master_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_port_status_master_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_port_status_master_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_port_status_slave_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_port_status_slave_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_port_status_slave_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_port_status_slave_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_requestforward_master_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_requestforward_master_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_requestforward_master_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_requestforward_master_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_requestforward_slave_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_requestforward_slave_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_requestforward_slave_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_requestforward_slave_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_role_status_master_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_role_status_master_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_role_status_master_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_role_status_master_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_role_status_slave_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_role_status_slave_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_role_status_slave_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_role_status_slave_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_table_status_master_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_table_status_master_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_table_status_master_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_table_status_master_mask_set(o, val, f, l);
	break;
}
}
void of_async_config_prop_table_status_slave_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_table_status_slave_mask_get(o, val,f , l);
	break;
}
}
void of_async_config_prop_table_status_slave_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_async_config_prop_table_status_slave_mask_set(o, val, f, l);
	break;
}
}
void of_bsn_controller_connection_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_controller_connection_state_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_controller_connection_auxiliary_id_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_controller_connection_role_get(o, val,f , l);
	break;
case 4:
	//do_of_bsn_controller_connection_uri_get(o, val,f , l);
	break;
}
}
void of_bsn_controller_connection_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_controller_connection_state_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_controller_connection_auxiliary_id_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_controller_connection_role_set(o, val, f, l);
	break;
case 4:
	//do_of_bsn_controller_connection_uri_set(o, val, f, l);
	break;
}
}
void of_bsn_debug_counter_desc_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_desc_stats_entry_counter_id_get(o, val,f , l);
	break;
case 2:
	//do_of_bsn_debug_counter_desc_stats_entry_name_get(o, val,f , l);
	break;
case 3:
	//do_of_bsn_debug_counter_desc_stats_entry_description_get(o, val,f , l);
	break;
}
}
void of_bsn_debug_counter_desc_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_desc_stats_entry_counter_id_set(o, val, f, l);
	break;
case 2:
	//do_of_bsn_debug_counter_desc_stats_entry_name_set(o, val, f, l);
	break;
case 3:
	//do_of_bsn_debug_counter_desc_stats_entry_description_set(o, val, f, l);
	break;
}
}
void of_bsn_debug_counter_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_stats_entry_counter_id_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_debug_counter_stats_entry_value_get(o, val,f , l);
	break;
}
}
void of_bsn_debug_counter_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_debug_counter_stats_entry_counter_id_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_debug_counter_stats_entry_value_set(o, val, f, l);
	break;
}
}
void of_bsn_flow_checksum_bucket_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_checksum_bucket_stats_entry_checksum_get(o, val,f , l);
	break;
}
}
void of_bsn_flow_checksum_bucket_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_flow_checksum_bucket_stats_entry_checksum_set(o, val, f, l);
	break;
}
}
void of_bsn_generic_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_generic_stats_entry_tlvs_get(o, val,f , l);
	break;
}
}
void of_bsn_generic_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_generic_stats_entry_tlvs_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_bucket_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_gentable_bucket_stats_entry_checksum_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_bucket_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_gentable_bucket_stats_entry_checksum_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_desc_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_desc_stats_entry_table_id_get(o, val,f , l);
	break;
case 2:
	//do_of_bsn_gentable_desc_stats_entry_name_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_desc_stats_entry_buckets_size_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_gentable_desc_stats_entry_max_entries_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_desc_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_desc_stats_entry_table_id_set(o, val, f, l);
	break;
case 2:
	//do_of_bsn_gentable_desc_stats_entry_name_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_desc_stats_entry_buckets_size_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_gentable_desc_stats_entry_max_entries_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_entry_desc_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_gentable_entry_desc_stats_entry_checksum_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_entry_desc_stats_entry_key_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_gentable_entry_desc_stats_entry_value_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_entry_desc_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_gentable_entry_desc_stats_entry_checksum_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_entry_desc_stats_entry_key_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_gentable_entry_desc_stats_entry_value_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_entry_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_stats_entry_key_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_entry_stats_entry_stats_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_entry_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_entry_stats_entry_key_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_entry_stats_entry_stats_set(o, val, f, l);
	break;
}
}
void of_bsn_gentable_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_stats_entry_table_id_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_gentable_stats_entry_entry_count_get(o, val,f , l);
	break;
case 3:
	//do_of_bsn_gentable_stats_entry_checksum_get(o, val,f , l);
	break;
}
}
void of_bsn_gentable_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_gentable_stats_entry_table_id_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_gentable_stats_entry_entry_count_set(o, val, f, l);
	break;
case 3:
	//do_of_bsn_gentable_stats_entry_checksum_set(o, val, f, l);
	break;
}
}
void of_bsn_interface_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_interface_hw_addr_get(o, val,f , l);
	break;
case 2:
	//do_of_bsn_interface_name_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_interface_ipv4_addr_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_interface_ipv4_netmask_get(o, val,f , l);
	break;
}
}
void of_bsn_interface_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_interface_hw_addr_set(o, val, f, l);
	break;
case 2:
	//do_of_bsn_interface_name_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_interface_ipv4_addr_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_interface_ipv4_netmask_set(o, val, f, l);
	break;
}
}
void of_bsn_lacp_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lacp_stats_entry_port_no_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_lacp_stats_entry_actor_sys_priority_get(o, val,f , l);
	break;
case 3:
	//do_of_bsn_lacp_stats_entry_actor_sys_mac_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_lacp_stats_entry_actor_port_priority_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_lacp_stats_entry_actor_port_num_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_lacp_stats_entry_actor_key_get(o, val,f , l);
	break;
case 7:
	do_of_bsn_lacp_stats_entry_convergence_status_get(o, val,f , l);
	break;
case 8:
	do_of_bsn_lacp_stats_entry_partner_sys_priority_get(o, val,f , l);
	break;
case 9:
	//do_of_bsn_lacp_stats_entry_partner_sys_mac_get(o, val,f , l);
	break;
case 10:
	do_of_bsn_lacp_stats_entry_partner_port_priority_get(o, val,f , l);
	break;
case 11:
	do_of_bsn_lacp_stats_entry_partner_port_num_get(o, val,f , l);
	break;
case 12:
	do_of_bsn_lacp_stats_entry_partner_key_get(o, val,f , l);
	break;
}
}
void of_bsn_lacp_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_lacp_stats_entry_port_no_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_lacp_stats_entry_actor_sys_priority_set(o, val, f, l);
	break;
case 3:
	//do_of_bsn_lacp_stats_entry_actor_sys_mac_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_lacp_stats_entry_actor_port_priority_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_lacp_stats_entry_actor_port_num_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_lacp_stats_entry_actor_key_set(o, val, f, l);
	break;
case 7:
	do_of_bsn_lacp_stats_entry_convergence_status_set(o, val, f, l);
	break;
case 8:
	do_of_bsn_lacp_stats_entry_partner_sys_priority_set(o, val, f, l);
	break;
case 9:
	//do_of_bsn_lacp_stats_entry_partner_sys_mac_set(o, val, f, l);
	break;
case 10:
	do_of_bsn_lacp_stats_entry_partner_port_priority_set(o, val, f, l);
	break;
case 11:
	do_of_bsn_lacp_stats_entry_partner_port_num_set(o, val, f, l);
	break;
case 12:
	do_of_bsn_lacp_stats_entry_partner_key_set(o, val, f, l);
	break;
}
}
void of_bsn_port_counter_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_port_counter_stats_entry_port_no_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_port_counter_stats_entry_values_get(o, val,f , l);
	break;
}
}
void of_bsn_port_counter_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_port_counter_stats_entry_port_no_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_port_counter_stats_entry_values_set(o, val, f, l);
	break;
}
}
void of_bsn_switch_pipeline_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_switch_pipeline_stats_entry_pipeline_get(o, val,f , l);
	break;
}
}
void of_bsn_switch_pipeline_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_switch_pipeline_stats_entry_pipeline_set(o, val, f, l);
	break;
}
}
void of_bsn_table_checksum_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_table_checksum_stats_entry_table_id_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_table_checksum_stats_entry_checksum_get(o, val,f , l);
	break;
}
}
void of_bsn_table_checksum_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_table_checksum_stats_entry_table_id_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_table_checksum_stats_entry_checksum_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_actor_key_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_key_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_actor_key_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_key_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_actor_port_num_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_port_num_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_actor_port_num_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_port_num_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_actor_port_priority_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_port_priority_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_actor_port_priority_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_port_priority_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_actor_state_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_state_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_actor_state_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_state_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_actor_system_mac_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_actor_system_mac_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_actor_system_mac_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_actor_system_mac_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_actor_system_priority_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_system_priority_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_actor_system_priority_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_actor_system_priority_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_broadcast_query_timeout_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_broadcast_query_timeout_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_broadcast_query_timeout_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_broadcast_query_timeout_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_bucket_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_bucket_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_bucket_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_bucket_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_circuit_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_circuit_id_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_circuit_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_circuit_id_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_convergence_status_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_convergence_status_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_convergence_status_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_convergence_status_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_crc_enabled_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_crc_enabled_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_crc_enabled_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_crc_enabled_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_data_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_data_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_data_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_data_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_eth_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_eth_dst_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_eth_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_eth_dst_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_eth_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_eth_src_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_eth_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_eth_src_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_external_gateway_ip_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_external_gateway_ip_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_external_gateway_ip_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_external_gateway_ip_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_external_gateway_mac_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_external_gateway_mac_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_external_gateway_mac_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_external_gateway_mac_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_external_ip_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_external_ip_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_external_ip_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_external_ip_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_external_mac_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_external_mac_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_external_mac_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_external_mac_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_external_netmask_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_external_netmask_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_external_netmask_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_external_netmask_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_header_size_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_header_size_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_header_size_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_header_size_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_icmp_code_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_icmp_code_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_icmp_code_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_icmp_code_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_icmp_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_icmp_id_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_icmp_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_icmp_id_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_icmp_type_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_icmp_type_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_icmp_type_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_icmp_type_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_idle_notification_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_bsn_tlv_idle_notification_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_bsn_tlv_idle_time_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_idle_time_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_idle_time_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_idle_time_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_idle_timeout_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_idle_timeout_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_idle_timeout_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_idle_timeout_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_internal_gateway_mac_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_internal_gateway_mac_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_internal_gateway_mac_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_internal_gateway_mac_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_internal_mac_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_internal_mac_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_internal_mac_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_internal_mac_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_interval_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_interval_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_interval_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_interval_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_ip_proto_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ip_proto_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_ip_proto_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ip_proto_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_ipv4_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ipv4_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_ipv4_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ipv4_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_ipv4_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ipv4_dst_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_ipv4_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ipv4_dst_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_ipv4_netmask_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ipv4_netmask_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_ipv4_netmask_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ipv4_netmask_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_ipv4_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ipv4_src_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_ipv4_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_ipv4_src_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_mac_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_mac_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_mac_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_mac_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_mac_mask_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_mac_mask_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_mac_mask_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_mac_mask_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_miss_packets_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_miss_packets_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_miss_packets_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_miss_packets_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_mpls_control_word_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_mpls_control_word_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_mpls_control_word_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_mpls_control_word_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_mpls_label_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_mpls_label_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_mpls_label_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_mpls_label_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_mpls_sequenced_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_mpls_sequenced_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_mpls_sequenced_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_mpls_sequenced_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_name_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_name_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_name_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_name_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_partner_key_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_key_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_partner_key_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_key_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_partner_port_num_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_port_num_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_partner_port_num_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_port_num_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_partner_port_priority_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_port_priority_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_partner_port_priority_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_port_priority_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_partner_state_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_state_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_partner_state_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_state_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_partner_system_mac_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_partner_system_mac_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_partner_system_mac_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_bsn_tlv_partner_system_mac_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_partner_system_priority_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_system_priority_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_partner_system_priority_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_partner_system_priority_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_port_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_port_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_port_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_port_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_priority_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_priority_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_priority_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_priority_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_queue_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_queue_id_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_queue_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_queue_id_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_queue_weight_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_queue_weight_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_queue_weight_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_queue_weight_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_reference_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_reference_table_id_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_tlv_reference_key_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_reference_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_reference_table_id_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_tlv_reference_key_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_reply_packets_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_reply_packets_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_reply_packets_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_reply_packets_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_request_packets_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_request_packets_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_request_packets_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_request_packets_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_rx_bytes_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_rx_bytes_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_rx_bytes_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_rx_bytes_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_rx_packets_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_rx_packets_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_rx_packets_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_rx_packets_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_sampling_rate_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_sampling_rate_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_sampling_rate_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_sampling_rate_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_sub_agent_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_sub_agent_id_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_sub_agent_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_sub_agent_id_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_tcp_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_tcp_dst_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_tcp_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_tcp_dst_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_tcp_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_tcp_src_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_tcp_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_tcp_src_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_tx_bytes_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_tx_bytes_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_tx_bytes_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_tx_bytes_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_tx_packets_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_tx_packets_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_tx_packets_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_tx_packets_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_udf_anchor_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udf_anchor_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_udf_anchor_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udf_anchor_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_udf_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udf_id_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_udf_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udf_id_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_udf_length_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udf_length_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_udf_length_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udf_length_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_udf_offset_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udf_offset_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_udf_offset_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udf_offset_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_udp_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udp_dst_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_udp_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udp_dst_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_udp_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udp_src_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_udp_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_udp_src_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_unicast_query_timeout_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_unicast_query_timeout_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_unicast_query_timeout_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_unicast_query_timeout_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_vlan_vid_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_vlan_vid_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_vlan_vid_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_vlan_vid_value_set(o, val, f, l);
	break;
}
}
void of_bsn_tlv_vrf_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_vrf_value_get(o, val,f , l);
	break;
}
}
void of_bsn_tlv_vrf_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_tlv_vrf_value_set(o, val, f, l);
	break;
}
}
void of_bsn_vlan_counter_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vlan_counter_stats_entry_vlan_vid_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_vlan_counter_stats_entry_values_get(o, val,f , l);
	break;
}
}
void of_bsn_vlan_counter_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vlan_counter_stats_entry_vlan_vid_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_vlan_counter_stats_entry_values_set(o, val, f, l);
	break;
}
}
void of_bsn_vport_l2gre_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vport_l2gre_flags_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_vport_l2gre_port_no_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_vport_l2gre_loopback_port_no_get(o, val,f , l);
	break;
case 4:
	//do_of_bsn_vport_l2gre_local_mac_get(o, val,f , l);
	break;
case 5:
	//do_of_bsn_vport_l2gre_nh_mac_get(o, val,f , l);
	break;
case 6:
	do_of_bsn_vport_l2gre_src_ip_get(o, val,f , l);
	break;
case 7:
	do_of_bsn_vport_l2gre_dst_ip_get(o, val,f , l);
	break;
case 8:
	do_of_bsn_vport_l2gre_dscp_get(o, val,f , l);
	break;
case 9:
	do_of_bsn_vport_l2gre_ttl_get(o, val,f , l);
	break;
case 10:
	do_of_bsn_vport_l2gre_vpn_get(o, val,f , l);
	break;
case 11:
	do_of_bsn_vport_l2gre_rate_limit_get(o, val,f , l);
	break;
case 12:
	//do_of_bsn_vport_l2gre_if_name_get(o, val,f , l);
	break;
}
}
void of_bsn_vport_l2gre_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vport_l2gre_flags_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_vport_l2gre_port_no_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_vport_l2gre_loopback_port_no_set(o, val, f, l);
	break;
case 4:
	//do_of_bsn_vport_l2gre_local_mac_set(o, val, f, l);
	break;
case 5:
	//do_of_bsn_vport_l2gre_nh_mac_set(o, val, f, l);
	break;
case 6:
	do_of_bsn_vport_l2gre_src_ip_set(o, val, f, l);
	break;
case 7:
	do_of_bsn_vport_l2gre_dst_ip_set(o, val, f, l);
	break;
case 8:
	do_of_bsn_vport_l2gre_dscp_set(o, val, f, l);
	break;
case 9:
	do_of_bsn_vport_l2gre_ttl_set(o, val, f, l);
	break;
case 10:
	do_of_bsn_vport_l2gre_vpn_set(o, val, f, l);
	break;
case 11:
	do_of_bsn_vport_l2gre_rate_limit_set(o, val, f, l);
	break;
case 12:
	//do_of_bsn_vport_l2gre_if_name_set(o, val, f, l);
	break;
}
}
void of_bsn_vport_q_in_q_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vport_q_in_q_port_no_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_vport_q_in_q_ingress_tpid_get(o, val,f , l);
	break;
case 3:
	do_of_bsn_vport_q_in_q_ingress_vlan_id_get(o, val,f , l);
	break;
case 4:
	do_of_bsn_vport_q_in_q_egress_tpid_get(o, val,f , l);
	break;
case 5:
	do_of_bsn_vport_q_in_q_egress_vlan_id_get(o, val,f , l);
	break;
case 6:
	//do_of_bsn_vport_q_in_q_if_name_get(o, val,f , l);
	break;
}
}
void of_bsn_vport_q_in_q_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vport_q_in_q_port_no_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_vport_q_in_q_ingress_tpid_set(o, val, f, l);
	break;
case 3:
	do_of_bsn_vport_q_in_q_ingress_vlan_id_set(o, val, f, l);
	break;
case 4:
	do_of_bsn_vport_q_in_q_egress_tpid_set(o, val, f, l);
	break;
case 5:
	do_of_bsn_vport_q_in_q_egress_vlan_id_set(o, val, f, l);
	break;
case 6:
	//do_of_bsn_vport_q_in_q_if_name_set(o, val, f, l);
	break;
}
}
void of_bsn_vrf_counter_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vrf_counter_stats_entry_vrf_get(o, val,f , l);
	break;
case 2:
	do_of_bsn_vrf_counter_stats_entry_values_get(o, val,f , l);
	break;
}
}
void of_bsn_vrf_counter_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bsn_vrf_counter_stats_entry_vrf_set(o, val, f, l);
	break;
case 2:
	do_of_bsn_vrf_counter_stats_entry_values_set(o, val, f, l);
	break;
}
}
void of_bucket_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bucket_weight_get(o, val,f , l);
	break;
case 2:
	do_of_bucket_watch_port_get(o, val,f , l);
	break;
case 3:
	do_of_bucket_watch_group_get(o, val,f , l);
	break;
case 4:
	do_of_bucket_actions_get(o, val,f , l);
	break;
}
}
void of_bucket_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bucket_weight_set(o, val, f, l);
	break;
case 2:
	do_of_bucket_watch_port_set(o, val, f, l);
	break;
case 3:
	do_of_bucket_watch_group_set(o, val, f, l);
	break;
case 4:
	do_of_bucket_actions_set(o, val, f, l);
	break;
}
}
void of_bucket_counter_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bucket_counter_packet_count_get(o, val,f , l);
	break;
case 2:
	do_of_bucket_counter_byte_count_get(o, val,f , l);
	break;
}
}
void of_bucket_counter_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_bucket_counter_packet_count_set(o, val, f, l);
	break;
case 2:
	do_of_bucket_counter_byte_count_set(o, val, f, l);
	break;
}
}
void of_flow_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_stats_entry_table_id_get(o, val,f , l);
	break;
case 2:
	do_of_flow_stats_entry_duration_sec_get(o, val,f , l);
	break;
case 3:
	do_of_flow_stats_entry_duration_nsec_get(o, val,f , l);
	break;
case 4:
	do_of_flow_stats_entry_priority_get(o, val,f , l);
	break;
case 5:
	do_of_flow_stats_entry_idle_timeout_get(o, val,f , l);
	break;
case 6:
	do_of_flow_stats_entry_hard_timeout_get(o, val,f , l);
	break;
case 7:
	do_of_flow_stats_entry_flags_get(o, val,f , l);
	break;
case 8:
	do_of_flow_stats_entry_importance_get(o, val,f , l);
	break;
case 9:
	do_of_flow_stats_entry_cookie_get(o, val,f , l);
	break;
case 10:
	do_of_flow_stats_entry_packet_count_get(o, val,f , l);
	break;
case 11:
	do_of_flow_stats_entry_byte_count_get(o, val,f , l);
	break;
case 12:
	do_of_flow_stats_entry_match_get(o, val,f , l);
	break;
case 13:
	do_of_flow_stats_entry_instructions_get(o, val,f , l);
	break;
case 14:
	do_of_flow_stats_entry_actions_get(o, val,f , l);
	break;
}
}
void of_flow_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_flow_stats_entry_table_id_set(o, val, f, l);
	break;
case 2:
	do_of_flow_stats_entry_duration_sec_set(o, val, f, l);
	break;
case 3:
	do_of_flow_stats_entry_duration_nsec_set(o, val, f, l);
	break;
case 4:
	do_of_flow_stats_entry_priority_set(o, val, f, l);
	break;
case 5:
	do_of_flow_stats_entry_idle_timeout_set(o, val, f, l);
	break;
case 6:
	do_of_flow_stats_entry_hard_timeout_set(o, val, f, l);
	break;
case 7:
	do_of_flow_stats_entry_flags_set(o, val, f, l);
	break;
case 8:
	do_of_flow_stats_entry_importance_set(o, val, f, l);
	break;
case 9:
	do_of_flow_stats_entry_cookie_set(o, val, f, l);
	break;
case 10:
	do_of_flow_stats_entry_packet_count_set(o, val, f, l);
	break;
case 11:
	do_of_flow_stats_entry_byte_count_set(o, val, f, l);
	break;
case 12:
	do_of_flow_stats_entry_match_set(o, val, f, l);
	break;
case 13:
	do_of_flow_stats_entry_instructions_set(o, val, f, l);
	break;
case 14:
	do_of_flow_stats_entry_actions_set(o, val, f, l);
	break;
}
}
void of_group_desc_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_desc_stats_entry_group_type_get(o, val,f , l);
	break;
case 2:
	do_of_group_desc_stats_entry_group_id_get(o, val,f , l);
	break;
case 3:
	do_of_group_desc_stats_entry_buckets_get(o, val,f , l);
	break;
}
}
void of_group_desc_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_desc_stats_entry_group_type_set(o, val, f, l);
	break;
case 2:
	do_of_group_desc_stats_entry_group_id_set(o, val, f, l);
	break;
case 3:
	do_of_group_desc_stats_entry_buckets_set(o, val, f, l);
	break;
}
}
void of_group_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_stats_entry_group_id_get(o, val,f , l);
	break;
case 2:
	do_of_group_stats_entry_ref_count_get(o, val,f , l);
	break;
case 3:
	do_of_group_stats_entry_packet_count_get(o, val,f , l);
	break;
case 4:
	do_of_group_stats_entry_byte_count_get(o, val,f , l);
	break;
case 5:
	do_of_group_stats_entry_duration_sec_get(o, val,f , l);
	break;
case 6:
	do_of_group_stats_entry_duration_nsec_get(o, val,f , l);
	break;
case 7:
	do_of_group_stats_entry_bucket_stats_get(o, val,f , l);
	break;
}
}
void of_group_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_group_stats_entry_group_id_set(o, val, f, l);
	break;
case 2:
	do_of_group_stats_entry_ref_count_set(o, val, f, l);
	break;
case 3:
	do_of_group_stats_entry_packet_count_set(o, val, f, l);
	break;
case 4:
	do_of_group_stats_entry_byte_count_set(o, val, f, l);
	break;
case 5:
	do_of_group_stats_entry_duration_sec_set(o, val, f, l);
	break;
case 6:
	do_of_group_stats_entry_duration_nsec_set(o, val, f, l);
	break;
case 7:
	do_of_group_stats_entry_bucket_stats_set(o, val, f, l);
	break;
}
}
void of_hello_elem_versionbitmap_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_hello_elem_versionbitmap_bitmaps_get(o, val,f , l);
	break;
}
}
void of_hello_elem_versionbitmap_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_hello_elem_versionbitmap_bitmaps_set(o, val, f, l);
	break;
}
}
void of_instruction_apply_actions_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_apply_actions_actions_get(o, val,f , l);
	break;
}
}
void of_instruction_apply_actions_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_apply_actions_actions_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_arp_offload_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_arp_offload_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_arp_offload_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_arp_offload_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_arp_offload_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_arp_offload_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_auto_negotiation_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_auto_negotiation_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_auto_negotiation_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_auto_negotiation_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_auto_negotiation_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_auto_negotiation_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_deny_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_deny_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_deny_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_deny_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_deny_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_deny_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_dhcp_offload_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_dhcp_offload_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_dhcp_offload_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_dhcp_offload_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_dhcp_offload_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_dhcp_offload_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_disable_split_horizon_check_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_disable_split_horizon_check_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_disable_split_horizon_check_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_disable_split_horizon_check_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_disable_split_horizon_check_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_disable_split_horizon_check_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_disable_src_mac_check_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_disable_src_mac_check_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_disable_src_mac_check_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_disable_src_mac_check_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_disable_src_mac_check_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_disable_src_mac_check_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_disable_vlan_counters_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_disable_vlan_counters_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_disable_vlan_counters_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_disable_vlan_counters_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_disable_vlan_counters_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_disable_vlan_counters_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_packet_of_death_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_packet_of_death_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_packet_of_death_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_packet_of_death_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_packet_of_death_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_packet_of_death_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_permit_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_permit_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_permit_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_permit_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_permit_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_permit_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_prioritize_pdus_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_prioritize_pdus_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_prioritize_pdus_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_prioritize_pdus_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_prioritize_pdus_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_prioritize_pdus_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_require_vlan_xlate_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_require_vlan_xlate_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_require_vlan_xlate_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_require_vlan_xlate_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_require_vlan_xlate_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_require_vlan_xlate_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_bsn_span_destination_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_span_destination_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_bsn_span_destination_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_bsn_span_destination_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_bsn_span_destination_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_bsn_span_destination_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_clear_actions_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_clear_actions_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_goto_table_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_goto_table_table_id_get(o, val,f , l);
	break;
}
}
void of_instruction_goto_table_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_goto_table_table_id_set(o, val, f, l);
	break;
}
}
void of_instruction_id_apply_actions_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_apply_actions_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_bsn_arp_offload_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_arp_offload_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_arp_offload_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_arp_offload_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_arp_offload_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_arp_offload_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_auto_negotiation_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_auto_negotiation_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_auto_negotiation_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_auto_negotiation_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_auto_negotiation_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_auto_negotiation_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_deny_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_deny_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_deny_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_deny_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_deny_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_deny_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_dhcp_offload_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_dhcp_offload_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_dhcp_offload_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_dhcp_offload_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_dhcp_offload_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_dhcp_offload_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_disable_split_horizon_check_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_disable_split_horizon_check_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_disable_split_horizon_check_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_disable_split_horizon_check_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_disable_split_horizon_check_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_disable_split_horizon_check_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_disable_src_mac_check_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_disable_src_mac_check_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_disable_src_mac_check_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_disable_src_mac_check_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_disable_src_mac_check_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_disable_src_mac_check_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_disable_vlan_counters_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_disable_vlan_counters_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_disable_vlan_counters_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_disable_vlan_counters_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_disable_vlan_counters_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_disable_vlan_counters_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_packet_of_death_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_packet_of_death_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_packet_of_death_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_packet_of_death_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_packet_of_death_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_packet_of_death_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_permit_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_permit_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_permit_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_permit_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_permit_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_permit_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_prioritize_pdus_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_prioritize_pdus_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_prioritize_pdus_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_prioritize_pdus_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_prioritize_pdus_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_prioritize_pdus_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_require_vlan_xlate_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_require_vlan_xlate_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_require_vlan_xlate_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_require_vlan_xlate_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_require_vlan_xlate_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_require_vlan_xlate_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_bsn_span_destination_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_span_destination_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_id_bsn_span_destination_subtype_get(o, val,f , l);
	break;
}
}
void of_instruction_id_bsn_span_destination_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_id_bsn_span_destination_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_id_bsn_span_destination_subtype_set(o, val, f, l);
	break;
}
}
void of_instruction_id_clear_actions_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_clear_actions_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_goto_table_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_goto_table_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_meter_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_meter_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_write_actions_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_write_actions_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_write_metadata_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_id_write_metadata_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
}
}
void of_instruction_meter_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_meter_meter_id_get(o, val,f , l);
	break;
}
}
void of_instruction_meter_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_meter_meter_id_set(o, val, f, l);
	break;
}
}
void of_instruction_write_actions_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_write_actions_actions_get(o, val,f , l);
	break;
}
}
void of_instruction_write_actions_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_write_actions_actions_set(o, val, f, l);
	break;
}
}
void of_instruction_write_metadata_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_write_metadata_metadata_get(o, val,f , l);
	break;
case 2:
	do_of_instruction_write_metadata_metadata_mask_get(o, val,f , l);
	break;
}
}
void of_instruction_write_metadata_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_instruction_write_metadata_metadata_set(o, val, f, l);
	break;
case 2:
	do_of_instruction_write_metadata_metadata_mask_set(o, val, f, l);
	break;
}
}
void of_match_v1_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_match_v1_wildcards_get(o, val,f , l);
	break;
case 2:
	do_of_match_v1_in_port_get(o, val,f , l);
	break;
case 3:
	do_of_match_v1_eth_src_get(o, val,f , l);
	break;
case 4:
	do_of_match_v1_eth_dst_get(o, val,f , l);
	break;
case 5:
	do_of_match_v1_vlan_vid_get(o, val,f , l);
	break;
case 6:
	do_of_match_v1_vlan_pcp_get(o, val,f , l);
	break;
case 7:
	do_of_match_v1_eth_type_get(o, val,f , l);
	break;
case 8:
	do_of_match_v1_ip_dscp_get(o, val,f , l);
	break;
case 9:
	do_of_match_v1_ip_proto_get(o, val,f , l);
	break;
case 10:
	do_of_match_v1_ipv4_src_get(o, val,f , l);
	break;
case 11:
	do_of_match_v1_ipv4_dst_get(o, val,f , l);
	break;
case 12:
	do_of_match_v1_tcp_src_get(o, val,f , l);
	break;
case 13:
	do_of_match_v1_tcp_dst_get(o, val,f , l);
	break;
}
}
void of_match_v1_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_match_v1_wildcards_set(o, val, f, l);
	break;
case 2:
	do_of_match_v1_in_port_set(o, val, f, l);
	break;
case 3:
	do_of_match_v1_eth_src_set(o, val, f, l);
	break;
case 4:
	do_of_match_v1_eth_dst_set(o, val, f, l);
	break;
case 5:
	do_of_match_v1_vlan_vid_set(o, val, f, l);
	break;
case 6:
	do_of_match_v1_vlan_pcp_set(o, val, f, l);
	break;
case 7:
	do_of_match_v1_eth_type_set(o, val, f, l);
	break;
case 8:
	do_of_match_v1_ip_dscp_set(o, val, f, l);
	break;
case 9:
	do_of_match_v1_ip_proto_set(o, val, f, l);
	break;
case 10:
	do_of_match_v1_ipv4_src_set(o, val, f, l);
	break;
case 11:
	do_of_match_v1_ipv4_dst_set(o, val, f, l);
	break;
case 12:
	do_of_match_v1_tcp_src_set(o, val, f, l);
	break;
case 13:
	do_of_match_v1_tcp_dst_set(o, val, f, l);
	break;
}
}
void of_match_v2_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_match_v2_in_port_get(o, val,f , l);
	break;
case 2:
	do_of_match_v2_wildcards_get(o, val,f , l);
	break;
case 3:
	do_of_match_v2_eth_src_get(o, val,f , l);
	break;
case 4:
	do_of_match_v2_eth_src_mask_get(o, val,f , l);
	break;
case 5:
	do_of_match_v2_eth_dst_get(o, val,f , l);
	break;
case 6:
	do_of_match_v2_eth_dst_mask_get(o, val,f , l);
	break;
case 7:
	do_of_match_v2_vlan_vid_get(o, val,f , l);
	break;
case 8:
	do_of_match_v2_vlan_pcp_get(o, val,f , l);
	break;
case 9:
	do_of_match_v2_eth_type_get(o, val,f , l);
	break;
case 10:
	do_of_match_v2_ip_dscp_get(o, val,f , l);
	break;
case 11:
	do_of_match_v2_ip_proto_get(o, val,f , l);
	break;
case 12:
	do_of_match_v2_ipv4_src_get(o, val,f , l);
	break;
case 13:
	do_of_match_v2_ipv4_src_mask_get(o, val,f , l);
	break;
case 14:
	do_of_match_v2_ipv4_dst_get(o, val,f , l);
	break;
case 15:
	do_of_match_v2_ipv4_dst_mask_get(o, val,f , l);
	break;
case 16:
	do_of_match_v2_tcp_src_get(o, val,f , l);
	break;
case 17:
	do_of_match_v2_tcp_dst_get(o, val,f , l);
	break;
case 18:
	do_of_match_v2_mpls_label_get(o, val,f , l);
	break;
case 19:
	do_of_match_v2_mpls_tc_get(o, val,f , l);
	break;
case 20:
	do_of_match_v2_metadata_get(o, val,f , l);
	break;
case 21:
	do_of_match_v2_metadata_mask_get(o, val,f , l);
	break;
}
}
void of_match_v2_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_match_v2_in_port_set(o, val, f, l);
	break;
case 2:
	do_of_match_v2_wildcards_set(o, val, f, l);
	break;
case 3:
	do_of_match_v2_eth_src_set(o, val, f, l);
	break;
case 4:
	do_of_match_v2_eth_src_mask_set(o, val, f, l);
	break;
case 5:
	do_of_match_v2_eth_dst_set(o, val, f, l);
	break;
case 6:
	do_of_match_v2_eth_dst_mask_set(o, val, f, l);
	break;
case 7:
	do_of_match_v2_vlan_vid_set(o, val, f, l);
	break;
case 8:
	do_of_match_v2_vlan_pcp_set(o, val, f, l);
	break;
case 9:
	do_of_match_v2_eth_type_set(o, val, f, l);
	break;
case 10:
	do_of_match_v2_ip_dscp_set(o, val, f, l);
	break;
case 11:
	do_of_match_v2_ip_proto_set(o, val, f, l);
	break;
case 12:
	do_of_match_v2_ipv4_src_set(o, val, f, l);
	break;
case 13:
	do_of_match_v2_ipv4_src_mask_set(o, val, f, l);
	break;
case 14:
	do_of_match_v2_ipv4_dst_set(o, val, f, l);
	break;
case 15:
	do_of_match_v2_ipv4_dst_mask_set(o, val, f, l);
	break;
case 16:
	do_of_match_v2_tcp_src_set(o, val, f, l);
	break;
case 17:
	do_of_match_v2_tcp_dst_set(o, val, f, l);
	break;
case 18:
	do_of_match_v2_mpls_label_set(o, val, f, l);
	break;
case 19:
	do_of_match_v2_mpls_tc_set(o, val, f, l);
	break;
case 20:
	do_of_match_v2_metadata_set(o, val, f, l);
	break;
case 21:
	do_of_match_v2_metadata_mask_set(o, val, f, l);
	break;
}
}
void of_match_v3_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_match_v3_oxm_list_get(o, val,f , l);
	break;
}
}
void of_match_v3_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_match_v3_oxm_list_set(o, val, f, l);
	break;
}
}
void of_meter_band_drop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_band_drop_rate_get(o, val,f , l);
	break;
case 2:
	do_of_meter_band_drop_burst_size_get(o, val,f , l);
	break;
}
}
void of_meter_band_drop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_band_drop_rate_set(o, val, f, l);
	break;
case 2:
	do_of_meter_band_drop_burst_size_set(o, val, f, l);
	break;
}
}
void of_meter_band_dscp_remark_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_band_dscp_remark_rate_get(o, val,f , l);
	break;
case 2:
	do_of_meter_band_dscp_remark_burst_size_get(o, val,f , l);
	break;
case 3:
	do_of_meter_band_dscp_remark_prec_level_get(o, val,f , l);
	break;
}
}
void of_meter_band_dscp_remark_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_band_dscp_remark_rate_set(o, val, f, l);
	break;
case 2:
	do_of_meter_band_dscp_remark_burst_size_set(o, val, f, l);
	break;
case 3:
	do_of_meter_band_dscp_remark_prec_level_set(o, val, f, l);
	break;
}
}
void of_meter_band_experimenter_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_band_experimenter_rate_get(o, val,f , l);
	break;
case 2:
	do_of_meter_band_experimenter_burst_size_get(o, val,f , l);
	break;
case 3:
	do_of_meter_band_experimenter_experimenter_get(o, val,f , l);
	break;
}
}
void of_meter_band_experimenter_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_band_experimenter_rate_set(o, val, f, l);
	break;
case 2:
	do_of_meter_band_experimenter_burst_size_set(o, val, f, l);
	break;
case 3:
	do_of_meter_band_experimenter_experimenter_set(o, val, f, l);
	break;
}
}
void of_meter_band_stats_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_band_stats_packet_band_count_get(o, val,f , l);
	break;
case 2:
	do_of_meter_band_stats_byte_band_count_get(o, val,f , l);
	break;
}
}
void of_meter_band_stats_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_band_stats_packet_band_count_set(o, val, f, l);
	break;
case 2:
	do_of_meter_band_stats_byte_band_count_set(o, val, f, l);
	break;
}
}
void of_meter_config_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_config_flags_get(o, val,f , l);
	break;
case 2:
	do_of_meter_config_meter_id_get(o, val,f , l);
	break;
case 3:
	do_of_meter_config_entries_get(o, val,f , l);
	break;
}
}
void of_meter_config_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_config_flags_set(o, val, f, l);
	break;
case 2:
	do_of_meter_config_meter_id_set(o, val, f, l);
	break;
case 3:
	do_of_meter_config_entries_set(o, val, f, l);
	break;
}
}
void of_meter_features_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_features_max_meter_get(o, val,f , l);
	break;
case 2:
	do_of_meter_features_band_types_get(o, val,f , l);
	break;
case 3:
	do_of_meter_features_capabilities_get(o, val,f , l);
	break;
case 4:
	do_of_meter_features_max_bands_get(o, val,f , l);
	break;
case 5:
	do_of_meter_features_max_color_get(o, val,f , l);
	break;
}
}
void of_meter_features_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_features_max_meter_set(o, val, f, l);
	break;
case 2:
	do_of_meter_features_band_types_set(o, val, f, l);
	break;
case 3:
	do_of_meter_features_capabilities_set(o, val, f, l);
	break;
case 4:
	do_of_meter_features_max_bands_set(o, val, f, l);
	break;
case 5:
	do_of_meter_features_max_color_set(o, val, f, l);
	break;
}
}
void of_meter_stats_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_stats_meter_id_get(o, val,f , l);
	break;
case 2:
	do_of_meter_stats_flow_count_get(o, val,f , l);
	break;
case 3:
	do_of_meter_stats_packet_in_count_get(o, val,f , l);
	break;
case 4:
	do_of_meter_stats_byte_in_count_get(o, val,f , l);
	break;
case 5:
	do_of_meter_stats_duration_sec_get(o, val,f , l);
	break;
case 6:
	do_of_meter_stats_duration_nsec_get(o, val,f , l);
	break;
case 7:
	do_of_meter_stats_band_stats_get(o, val,f , l);
	break;
}
}
void of_meter_stats_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_meter_stats_meter_id_set(o, val, f, l);
	break;
case 2:
	do_of_meter_stats_flow_count_set(o, val, f, l);
	break;
case 3:
	do_of_meter_stats_packet_in_count_set(o, val, f, l);
	break;
case 4:
	do_of_meter_stats_byte_in_count_set(o, val, f, l);
	break;
case 5:
	do_of_meter_stats_duration_sec_set(o, val, f, l);
	break;
case 6:
	do_of_meter_stats_duration_nsec_set(o, val, f, l);
	break;
case 7:
	do_of_meter_stats_band_stats_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_op_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_op_value_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_op_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_op_value_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_op_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_op_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_arp_op_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_op_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_op_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_arp_op_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_sha_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_sha_value_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_sha_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_sha_value_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_sha_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_sha_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_arp_sha_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_sha_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_sha_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_arp_sha_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_spa_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_spa_value_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_spa_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_spa_value_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_spa_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_spa_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_arp_spa_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_spa_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_spa_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_arp_spa_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_tha_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_tha_value_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_tha_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_tha_value_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_tha_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_tha_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_arp_tha_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_tha_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_tha_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_arp_tha_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_tpa_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_tpa_value_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_tpa_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_tpa_value_set(o, val, f, l);
	break;
}
}
void of_oxm_arp_tpa_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_tpa_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_arp_tpa_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_arp_tpa_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_arp_tpa_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_arp_tpa_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_egr_port_group_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_egr_port_group_id_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_egr_port_group_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_egr_port_group_id_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_egr_port_group_id_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_egr_port_group_id_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_egr_port_group_id_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_egr_port_group_id_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_egr_port_group_id_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_egr_port_group_id_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_global_vrf_allowed_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_global_vrf_allowed_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_global_vrf_allowed_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_global_vrf_allowed_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_global_vrf_allowed_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_global_vrf_allowed_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_global_vrf_allowed_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_global_vrf_allowed_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_global_vrf_allowed_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_global_vrf_allowed_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_in_ports_128_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_oxm_bsn_in_ports_128_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_in_ports_128_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_oxm_bsn_in_ports_128_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_in_ports_128_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_oxm_bsn_in_ports_128_masked_value_get(o, val,f , l);
	break;
case 2:
	//do_of_oxm_bsn_in_ports_128_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_in_ports_128_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_oxm_bsn_in_ports_128_masked_value_set(o, val, f, l);
	break;
case 2:
	//do_of_oxm_bsn_in_ports_128_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_in_ports_512_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_oxm_bsn_in_ports_512_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_in_ports_512_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_oxm_bsn_in_ports_512_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_in_ports_512_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_oxm_bsn_in_ports_512_masked_value_get(o, val,f , l);
	break;
case 2:
	//do_of_oxm_bsn_in_ports_512_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_in_ports_512_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	//do_of_oxm_bsn_in_ports_512_masked_value_set(o, val, f, l);
	break;
case 2:
	//do_of_oxm_bsn_in_ports_512_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_ingress_port_group_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_ingress_port_group_id_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_ingress_port_group_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_ingress_port_group_id_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_ingress_port_group_id_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_ingress_port_group_id_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_ingress_port_group_id_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_ingress_port_group_id_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_ingress_port_group_id_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_ingress_port_group_id_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_l2_cache_hit_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l2_cache_hit_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_l2_cache_hit_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l2_cache_hit_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_l2_cache_hit_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l2_cache_hit_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_l2_cache_hit_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_l2_cache_hit_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l2_cache_hit_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_l2_cache_hit_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_l3_dst_class_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_dst_class_id_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_l3_dst_class_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_dst_class_id_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_l3_dst_class_id_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_dst_class_id_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_l3_dst_class_id_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_l3_dst_class_id_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_dst_class_id_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_l3_dst_class_id_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_l3_interface_class_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_interface_class_id_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_l3_interface_class_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_interface_class_id_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_l3_interface_class_id_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_interface_class_id_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_l3_interface_class_id_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_l3_interface_class_id_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_interface_class_id_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_l3_interface_class_id_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_l3_src_class_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_src_class_id_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_l3_src_class_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_src_class_id_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_l3_src_class_id_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_src_class_id_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_l3_src_class_id_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_l3_src_class_id_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_l3_src_class_id_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_l3_src_class_id_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_lag_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_lag_id_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_lag_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_lag_id_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_lag_id_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_lag_id_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_lag_id_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_lag_id_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_lag_id_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_lag_id_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_tcp_flags_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_tcp_flags_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_tcp_flags_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_tcp_flags_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_tcp_flags_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_tcp_flags_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_tcp_flags_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_tcp_flags_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_tcp_flags_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_tcp_flags_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf0_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf0_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf0_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf0_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf0_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf0_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_udf0_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf0_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf0_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_udf0_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf1_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf1_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf1_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf1_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf1_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf1_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_udf1_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf1_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf1_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_udf1_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf2_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf2_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf2_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf2_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf2_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf2_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_udf2_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf2_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf2_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_udf2_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf3_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf3_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf3_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf3_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf3_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf3_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_udf3_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf3_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf3_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_udf3_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf4_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf4_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf4_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf4_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf4_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf4_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_udf4_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf4_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf4_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_udf4_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf5_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf5_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf5_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf5_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf5_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf5_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_udf5_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf5_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf5_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_udf5_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf6_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf6_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf6_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf6_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf6_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf6_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_udf6_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf6_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf6_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_udf6_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf7_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf7_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf7_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf7_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_udf7_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf7_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_udf7_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_udf7_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_udf7_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_udf7_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_vlan_xlate_port_group_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_vlan_xlate_port_group_id_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_vlan_xlate_port_group_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_vlan_xlate_port_group_id_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_vlan_xlate_port_group_id_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_vlan_xlate_port_group_id_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_vlan_xlate_port_group_id_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_vlan_xlate_port_group_id_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_vlan_xlate_port_group_id_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_vlan_xlate_port_group_id_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_vrf_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_vrf_value_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_vrf_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_vrf_value_set(o, val, f, l);
	break;
}
}
void of_oxm_bsn_vrf_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_vrf_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_bsn_vrf_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_bsn_vrf_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_bsn_vrf_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_bsn_vrf_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_eth_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_dst_value_get(o, val,f , l);
	break;
}
}
void of_oxm_eth_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_dst_value_set(o, val, f, l);
	break;
}
}
void of_oxm_eth_dst_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_dst_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_eth_dst_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_eth_dst_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_dst_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_eth_dst_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_eth_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_src_value_get(o, val,f , l);
	break;
}
}
void of_oxm_eth_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_src_value_set(o, val, f, l);
	break;
}
}
void of_oxm_eth_src_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_src_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_eth_src_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_eth_src_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_src_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_eth_src_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_eth_type_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_type_value_get(o, val,f , l);
	break;
}
}
void of_oxm_eth_type_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_type_value_set(o, val, f, l);
	break;
}
}
void of_oxm_eth_type_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_type_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_eth_type_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_eth_type_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_eth_type_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_eth_type_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_icmpv4_code_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv4_code_value_get(o, val,f , l);
	break;
}
}
void of_oxm_icmpv4_code_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv4_code_value_set(o, val, f, l);
	break;
}
}
void of_oxm_icmpv4_code_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv4_code_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_icmpv4_code_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_icmpv4_code_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv4_code_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_icmpv4_code_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_icmpv4_type_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv4_type_value_get(o, val,f , l);
	break;
}
}
void of_oxm_icmpv4_type_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv4_type_value_set(o, val, f, l);
	break;
}
}
void of_oxm_icmpv4_type_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv4_type_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_icmpv4_type_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_icmpv4_type_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv4_type_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_icmpv4_type_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_icmpv6_code_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv6_code_value_get(o, val,f , l);
	break;
}
}
void of_oxm_icmpv6_code_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv6_code_value_set(o, val, f, l);
	break;
}
}
void of_oxm_icmpv6_code_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv6_code_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_icmpv6_code_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_icmpv6_code_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv6_code_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_icmpv6_code_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_icmpv6_type_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv6_type_value_get(o, val,f , l);
	break;
}
}
void of_oxm_icmpv6_type_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv6_type_value_set(o, val, f, l);
	break;
}
}
void of_oxm_icmpv6_type_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv6_type_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_icmpv6_type_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_icmpv6_type_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_icmpv6_type_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_icmpv6_type_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_in_phy_port_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_in_phy_port_value_get(o, val,f , l);
	break;
}
}
void of_oxm_in_phy_port_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_in_phy_port_value_set(o, val, f, l);
	break;
}
}
void of_oxm_in_phy_port_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_in_phy_port_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_in_phy_port_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_in_phy_port_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_in_phy_port_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_in_phy_port_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_in_port_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_in_port_value_get(o, val,f , l);
	break;
}
}
void of_oxm_in_port_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_in_port_value_set(o, val, f, l);
	break;
}
}
void of_oxm_in_port_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_in_port_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_in_port_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_in_port_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_in_port_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_in_port_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ip_dscp_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_dscp_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ip_dscp_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_dscp_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ip_dscp_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_dscp_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ip_dscp_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ip_dscp_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_dscp_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ip_dscp_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ip_ecn_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_ecn_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ip_ecn_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_ecn_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ip_ecn_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_ecn_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ip_ecn_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ip_ecn_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_ecn_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ip_ecn_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ip_proto_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_proto_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ip_proto_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_proto_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ip_proto_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_proto_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ip_proto_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ip_proto_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ip_proto_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ip_proto_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv4_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv4_dst_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv4_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv4_dst_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv4_dst_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv4_dst_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ipv4_dst_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv4_dst_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv4_dst_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ipv4_dst_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv4_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv4_src_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv4_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv4_src_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv4_src_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv4_src_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ipv4_src_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv4_src_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv4_src_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ipv4_src_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_dst_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_dst_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_dst_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_dst_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ipv6_dst_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_dst_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_dst_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ipv6_dst_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_exthdr_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_exthdr_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_exthdr_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_exthdr_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_exthdr_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_exthdr_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ipv6_exthdr_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_exthdr_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_exthdr_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ipv6_exthdr_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_flabel_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_flabel_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_flabel_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_flabel_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_flabel_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_flabel_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ipv6_flabel_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_flabel_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_flabel_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ipv6_flabel_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_nd_sll_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_sll_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_nd_sll_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_sll_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_nd_sll_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_sll_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ipv6_nd_sll_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_nd_sll_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_sll_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ipv6_nd_sll_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_nd_target_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_target_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_nd_target_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_target_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_nd_target_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_target_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ipv6_nd_target_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_nd_target_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_target_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ipv6_nd_target_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_nd_tll_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_tll_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_nd_tll_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_tll_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_nd_tll_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_tll_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ipv6_nd_tll_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_nd_tll_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_nd_tll_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ipv6_nd_tll_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_src_value_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_src_value_set(o, val, f, l);
	break;
}
}
void of_oxm_ipv6_src_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_src_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_ipv6_src_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_ipv6_src_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_ipv6_src_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_ipv6_src_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_metadata_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_metadata_value_get(o, val,f , l);
	break;
}
}
void of_oxm_metadata_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_metadata_value_set(o, val, f, l);
	break;
}
}
void of_oxm_metadata_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_metadata_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_metadata_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_metadata_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_metadata_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_metadata_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_mpls_bos_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_bos_value_get(o, val,f , l);
	break;
}
}
void of_oxm_mpls_bos_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_bos_value_set(o, val, f, l);
	break;
}
}
void of_oxm_mpls_bos_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_bos_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_mpls_bos_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_mpls_bos_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_bos_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_mpls_bos_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_mpls_label_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_label_value_get(o, val,f , l);
	break;
}
}
void of_oxm_mpls_label_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_label_value_set(o, val, f, l);
	break;
}
}
void of_oxm_mpls_label_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_label_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_mpls_label_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_mpls_label_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_label_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_mpls_label_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_mpls_tc_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_tc_value_get(o, val,f , l);
	break;
}
}
void of_oxm_mpls_tc_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_tc_value_set(o, val, f, l);
	break;
}
}
void of_oxm_mpls_tc_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_tc_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_mpls_tc_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_mpls_tc_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_mpls_tc_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_mpls_tc_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_pbb_uca_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_pbb_uca_value_get(o, val,f , l);
	break;
}
}
void of_oxm_pbb_uca_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_pbb_uca_value_set(o, val, f, l);
	break;
}
}
void of_oxm_pbb_uca_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_pbb_uca_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_pbb_uca_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_pbb_uca_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_pbb_uca_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_pbb_uca_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_sctp_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_sctp_dst_value_get(o, val,f , l);
	break;
}
}
void of_oxm_sctp_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_sctp_dst_value_set(o, val, f, l);
	break;
}
}
void of_oxm_sctp_dst_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_sctp_dst_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_sctp_dst_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_sctp_dst_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_sctp_dst_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_sctp_dst_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_sctp_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_sctp_src_value_get(o, val,f , l);
	break;
}
}
void of_oxm_sctp_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_sctp_src_value_set(o, val, f, l);
	break;
}
}
void of_oxm_sctp_src_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_sctp_src_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_sctp_src_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_sctp_src_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_sctp_src_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_sctp_src_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_tcp_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tcp_dst_value_get(o, val,f , l);
	break;
}
}
void of_oxm_tcp_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tcp_dst_value_set(o, val, f, l);
	break;
}
}
void of_oxm_tcp_dst_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tcp_dst_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_tcp_dst_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_tcp_dst_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tcp_dst_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_tcp_dst_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_tcp_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tcp_src_value_get(o, val,f , l);
	break;
}
}
void of_oxm_tcp_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tcp_src_value_set(o, val, f, l);
	break;
}
}
void of_oxm_tcp_src_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tcp_src_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_tcp_src_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_tcp_src_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tcp_src_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_tcp_src_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_tunnel_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_id_value_get(o, val,f , l);
	break;
}
}
void of_oxm_tunnel_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_id_value_set(o, val, f, l);
	break;
}
}
void of_oxm_tunnel_id_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_id_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_tunnel_id_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_tunnel_id_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_id_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_tunnel_id_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_tunnel_ipv4_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_ipv4_dst_value_get(o, val,f , l);
	break;
}
}
void of_oxm_tunnel_ipv4_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_ipv4_dst_value_set(o, val, f, l);
	break;
}
}
void of_oxm_tunnel_ipv4_dst_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_ipv4_dst_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_tunnel_ipv4_dst_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_tunnel_ipv4_dst_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_ipv4_dst_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_tunnel_ipv4_dst_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_tunnel_ipv4_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_ipv4_src_value_get(o, val,f , l);
	break;
}
}
void of_oxm_tunnel_ipv4_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_ipv4_src_value_set(o, val, f, l);
	break;
}
}
void of_oxm_tunnel_ipv4_src_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_ipv4_src_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_tunnel_ipv4_src_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_tunnel_ipv4_src_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_tunnel_ipv4_src_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_tunnel_ipv4_src_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_udp_dst_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_udp_dst_value_get(o, val,f , l);
	break;
}
}
void of_oxm_udp_dst_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_udp_dst_value_set(o, val, f, l);
	break;
}
}
void of_oxm_udp_dst_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_udp_dst_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_udp_dst_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_udp_dst_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_udp_dst_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_udp_dst_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_udp_src_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_udp_src_value_get(o, val,f , l);
	break;
}
}
void of_oxm_udp_src_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_udp_src_value_set(o, val, f, l);
	break;
}
}
void of_oxm_udp_src_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_udp_src_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_udp_src_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_udp_src_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_udp_src_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_udp_src_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_vlan_pcp_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_vlan_pcp_value_get(o, val,f , l);
	break;
}
}
void of_oxm_vlan_pcp_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_vlan_pcp_value_set(o, val, f, l);
	break;
}
}
void of_oxm_vlan_pcp_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_vlan_pcp_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_vlan_pcp_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_vlan_pcp_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_vlan_pcp_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_vlan_pcp_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_oxm_vlan_vid_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_vlan_vid_value_get(o, val,f , l);
	break;
}
}
void of_oxm_vlan_vid_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_vlan_vid_value_set(o, val, f, l);
	break;
}
}
void of_oxm_vlan_vid_masked_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_vlan_vid_masked_value_get(o, val,f , l);
	break;
case 2:
	do_of_oxm_vlan_vid_masked_value_mask_get(o, val,f , l);
	break;
}
}
void of_oxm_vlan_vid_masked_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_oxm_vlan_vid_masked_value_set(o, val, f, l);
	break;
case 2:
	do_of_oxm_vlan_vid_masked_value_mask_set(o, val, f, l);
	break;
}
}
void of_packet_queue_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_packet_queue_queue_id_get(o, val,f , l);
	break;
case 2:
	do_of_packet_queue_port_get(o, val,f , l);
	break;
case 3:
	do_of_packet_queue_properties_get(o, val,f , l);
	break;
}
}
void of_packet_queue_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_packet_queue_queue_id_set(o, val, f, l);
	break;
case 2:
	do_of_packet_queue_port_set(o, val, f, l);
	break;
case 3:
	do_of_packet_queue_properties_set(o, val, f, l);
	break;
}
}
void of_port_desc_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_port_no_get(o, val,f , l);
	break;
case 2:
	do_of_port_desc_hw_addr_get(o, val,f , l);
	break;
case 3:
	do_of_port_desc_name_get(o, val,f , l);
	break;
case 4:
	do_of_port_desc_config_get(o, val,f , l);
	break;
case 5:
	do_of_port_desc_state_get(o, val,f , l);
	break;
case 6:
	do_of_port_desc_properties_get(o, val,f , l);
	break;
case 7:
	do_of_port_desc_curr_get(o, val,f , l);
	break;
case 8:
	do_of_port_desc_advertised_get(o, val,f , l);
	break;
case 9:
	do_of_port_desc_supported_get(o, val,f , l);
	break;
case 10:
	do_of_port_desc_peer_get(o, val,f , l);
	break;
case 11:
	do_of_port_desc_curr_speed_get(o, val,f , l);
	break;
case 12:
	do_of_port_desc_max_speed_get(o, val,f , l);
	break;
}
}
void of_port_desc_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_port_no_set(o, val, f, l);
	break;
case 2:
	do_of_port_desc_hw_addr_set(o, val, f, l);
	break;
case 3:
	do_of_port_desc_name_set(o, val, f, l);
	break;
case 4:
	do_of_port_desc_config_set(o, val, f, l);
	break;
case 5:
	do_of_port_desc_state_set(o, val, f, l);
	break;
case 6:
	do_of_port_desc_properties_set(o, val, f, l);
	break;
case 7:
	do_of_port_desc_curr_set(o, val, f, l);
	break;
case 8:
	do_of_port_desc_advertised_set(o, val, f, l);
	break;
case 9:
	do_of_port_desc_supported_set(o, val, f, l);
	break;
case 10:
	do_of_port_desc_peer_set(o, val, f, l);
	break;
case 11:
	do_of_port_desc_curr_speed_set(o, val, f, l);
	break;
case 12:
	do_of_port_desc_max_speed_set(o, val, f, l);
	break;
}
}
void of_port_desc_prop_bsn_uplink_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_prop_bsn_uplink_experimenter_get(o, val,f , l);
	break;
case 2:
	do_of_port_desc_prop_bsn_uplink_exp_type_get(o, val,f , l);
	break;
}
}
void of_port_desc_prop_bsn_uplink_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_prop_bsn_uplink_experimenter_set(o, val, f, l);
	break;
case 2:
	do_of_port_desc_prop_bsn_uplink_exp_type_set(o, val, f, l);
	break;
}
}
void of_port_desc_prop_ethernet_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_prop_ethernet_curr_get(o, val,f , l);
	break;
case 2:
	do_of_port_desc_prop_ethernet_advertised_get(o, val,f , l);
	break;
case 3:
	do_of_port_desc_prop_ethernet_supported_get(o, val,f , l);
	break;
case 4:
	do_of_port_desc_prop_ethernet_peer_get(o, val,f , l);
	break;
case 5:
	do_of_port_desc_prop_ethernet_curr_speed_get(o, val,f , l);
	break;
case 6:
	do_of_port_desc_prop_ethernet_max_speed_get(o, val,f , l);
	break;
}
}
void of_port_desc_prop_ethernet_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_prop_ethernet_curr_set(o, val, f, l);
	break;
case 2:
	do_of_port_desc_prop_ethernet_advertised_set(o, val, f, l);
	break;
case 3:
	do_of_port_desc_prop_ethernet_supported_set(o, val, f, l);
	break;
case 4:
	do_of_port_desc_prop_ethernet_peer_set(o, val, f, l);
	break;
case 5:
	do_of_port_desc_prop_ethernet_curr_speed_set(o, val, f, l);
	break;
case 6:
	do_of_port_desc_prop_ethernet_max_speed_set(o, val, f, l);
	break;
}
}
void of_port_desc_prop_optical_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_prop_optical_supported_get(o, val,f , l);
	break;
case 2:
	do_of_port_desc_prop_optical_tx_min_freq_lmda_get(o, val,f , l);
	break;
case 3:
	do_of_port_desc_prop_optical_tx_max_freq_lmda_get(o, val,f , l);
	break;
case 4:
	do_of_port_desc_prop_optical_tx_grid_freq_lmda_get(o, val,f , l);
	break;
case 5:
	do_of_port_desc_prop_optical_rx_min_freq_lmda_get(o, val,f , l);
	break;
case 6:
	do_of_port_desc_prop_optical_rx_max_freq_lmda_get(o, val,f , l);
	break;
case 7:
	do_of_port_desc_prop_optical_rx_grid_freq_lmda_get(o, val,f , l);
	break;
case 8:
	do_of_port_desc_prop_optical_tx_pwr_min_get(o, val,f , l);
	break;
case 9:
	do_of_port_desc_prop_optical_tx_pwr_max_get(o, val,f , l);
	break;
}
}
void of_port_desc_prop_optical_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_desc_prop_optical_supported_set(o, val, f, l);
	break;
case 2:
	do_of_port_desc_prop_optical_tx_min_freq_lmda_set(o, val, f, l);
	break;
case 3:
	do_of_port_desc_prop_optical_tx_max_freq_lmda_set(o, val, f, l);
	break;
case 4:
	do_of_port_desc_prop_optical_tx_grid_freq_lmda_set(o, val, f, l);
	break;
case 5:
	do_of_port_desc_prop_optical_rx_min_freq_lmda_set(o, val, f, l);
	break;
case 6:
	do_of_port_desc_prop_optical_rx_max_freq_lmda_set(o, val, f, l);
	break;
case 7:
	do_of_port_desc_prop_optical_rx_grid_freq_lmda_set(o, val, f, l);
	break;
case 8:
	do_of_port_desc_prop_optical_tx_pwr_min_set(o, val, f, l);
	break;
case 9:
	do_of_port_desc_prop_optical_tx_pwr_max_set(o, val, f, l);
	break;
}
}
void of_port_mod_prop_ethernet_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_mod_prop_ethernet_advertise_get(o, val,f , l);
	break;
}
}
void of_port_mod_prop_ethernet_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_mod_prop_ethernet_advertise_set(o, val, f, l);
	break;
}
}
void of_port_mod_prop_optical_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_mod_prop_optical_configure_get(o, val,f , l);
	break;
case 2:
	do_of_port_mod_prop_optical_freq_ldma_get(o, val,f , l);
	break;
case 3:
	do_of_port_mod_prop_optical_fl_offset_get(o, val,f , l);
	break;
case 4:
	do_of_port_mod_prop_optical_grid_span_get(o, val,f , l);
	break;
case 5:
	do_of_port_mod_prop_optical_tx_pwr_get(o, val,f , l);
	break;
}
}
void of_port_mod_prop_optical_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_mod_prop_optical_configure_set(o, val, f, l);
	break;
case 2:
	do_of_port_mod_prop_optical_freq_ldma_set(o, val, f, l);
	break;
case 3:
	do_of_port_mod_prop_optical_fl_offset_set(o, val, f, l);
	break;
case 4:
	do_of_port_mod_prop_optical_grid_span_set(o, val, f, l);
	break;
case 5:
	do_of_port_mod_prop_optical_tx_pwr_set(o, val, f, l);
	break;
}
}
void of_port_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_entry_port_no_get(o, val,f , l);
	break;
case 2:
	do_of_port_stats_entry_duration_sec_get(o, val,f , l);
	break;
case 3:
	do_of_port_stats_entry_duration_nsec_get(o, val,f , l);
	break;
case 4:
	do_of_port_stats_entry_rx_packets_get(o, val,f , l);
	break;
case 5:
	do_of_port_stats_entry_tx_packets_get(o, val,f , l);
	break;
case 6:
	do_of_port_stats_entry_rx_bytes_get(o, val,f , l);
	break;
case 7:
	do_of_port_stats_entry_tx_bytes_get(o, val,f , l);
	break;
case 8:
	do_of_port_stats_entry_rx_dropped_get(o, val,f , l);
	break;
case 9:
	do_of_port_stats_entry_tx_dropped_get(o, val,f , l);
	break;
case 10:
	do_of_port_stats_entry_rx_errors_get(o, val,f , l);
	break;
case 11:
	do_of_port_stats_entry_tx_errors_get(o, val,f , l);
	break;
case 12:
	do_of_port_stats_entry_properties_get(o, val,f , l);
	break;
case 13:
	do_of_port_stats_entry_rx_frame_err_get(o, val,f , l);
	break;
case 14:
	do_of_port_stats_entry_rx_over_err_get(o, val,f , l);
	break;
case 15:
	do_of_port_stats_entry_rx_crc_err_get(o, val,f , l);
	break;
case 16:
	do_of_port_stats_entry_collisions_get(o, val,f , l);
	break;
}
}
void of_port_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_entry_port_no_set(o, val, f, l);
	break;
case 2:
	do_of_port_stats_entry_duration_sec_set(o, val, f, l);
	break;
case 3:
	do_of_port_stats_entry_duration_nsec_set(o, val, f, l);
	break;
case 4:
	do_of_port_stats_entry_rx_packets_set(o, val, f, l);
	break;
case 5:
	do_of_port_stats_entry_tx_packets_set(o, val, f, l);
	break;
case 6:
	do_of_port_stats_entry_rx_bytes_set(o, val, f, l);
	break;
case 7:
	do_of_port_stats_entry_tx_bytes_set(o, val, f, l);
	break;
case 8:
	do_of_port_stats_entry_rx_dropped_set(o, val, f, l);
	break;
case 9:
	do_of_port_stats_entry_tx_dropped_set(o, val, f, l);
	break;
case 10:
	do_of_port_stats_entry_rx_errors_set(o, val, f, l);
	break;
case 11:
	do_of_port_stats_entry_tx_errors_set(o, val, f, l);
	break;
case 12:
	do_of_port_stats_entry_properties_set(o, val, f, l);
	break;
case 13:
	do_of_port_stats_entry_rx_frame_err_set(o, val, f, l);
	break;
case 14:
	do_of_port_stats_entry_rx_over_err_set(o, val, f, l);
	break;
case 15:
	do_of_port_stats_entry_rx_crc_err_set(o, val, f, l);
	break;
case 16:
	do_of_port_stats_entry_collisions_set(o, val, f, l);
	break;
}
}
void of_port_stats_prop_ethernet_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_prop_ethernet_rx_frame_err_get(o, val,f , l);
	break;
case 2:
	do_of_port_stats_prop_ethernet_rx_over_err_get(o, val,f , l);
	break;
case 3:
	do_of_port_stats_prop_ethernet_rx_crc_err_get(o, val,f , l);
	break;
case 4:
	do_of_port_stats_prop_ethernet_collisions_get(o, val,f , l);
	break;
}
}
void of_port_stats_prop_ethernet_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_prop_ethernet_rx_frame_err_set(o, val, f, l);
	break;
case 2:
	do_of_port_stats_prop_ethernet_rx_over_err_set(o, val, f, l);
	break;
case 3:
	do_of_port_stats_prop_ethernet_rx_crc_err_set(o, val, f, l);
	break;
case 4:
	do_of_port_stats_prop_ethernet_collisions_set(o, val, f, l);
	break;
}
}
void of_port_stats_prop_optical_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_prop_optical_flags_get(o, val,f , l);
	break;
case 2:
	do_of_port_stats_prop_optical_tx_freq_lmda_get(o, val,f , l);
	break;
case 3:
	do_of_port_stats_prop_optical_tx_offset_get(o, val,f , l);
	break;
case 4:
	do_of_port_stats_prop_optical_tx_grid_span_get(o, val,f , l);
	break;
case 5:
	do_of_port_stats_prop_optical_rx_freq_lmda_get(o, val,f , l);
	break;
case 6:
	do_of_port_stats_prop_optical_rx_offset_get(o, val,f , l);
	break;
case 7:
	do_of_port_stats_prop_optical_rx_grid_span_get(o, val,f , l);
	break;
case 8:
	do_of_port_stats_prop_optical_tx_pwr_get(o, val,f , l);
	break;
case 9:
	do_of_port_stats_prop_optical_rx_pwr_get(o, val,f , l);
	break;
case 10:
	do_of_port_stats_prop_optical_bias_current_get(o, val,f , l);
	break;
case 11:
	do_of_port_stats_prop_optical_temperature_get(o, val,f , l);
	break;
}
}
void of_port_stats_prop_optical_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_port_stats_prop_optical_flags_set(o, val, f, l);
	break;
case 2:
	do_of_port_stats_prop_optical_tx_freq_lmda_set(o, val, f, l);
	break;
case 3:
	do_of_port_stats_prop_optical_tx_offset_set(o, val, f, l);
	break;
case 4:
	do_of_port_stats_prop_optical_tx_grid_span_set(o, val, f, l);
	break;
case 5:
	do_of_port_stats_prop_optical_rx_freq_lmda_set(o, val, f, l);
	break;
case 6:
	do_of_port_stats_prop_optical_rx_offset_set(o, val, f, l);
	break;
case 7:
	do_of_port_stats_prop_optical_rx_grid_span_set(o, val, f, l);
	break;
case 8:
	do_of_port_stats_prop_optical_tx_pwr_set(o, val, f, l);
	break;
case 9:
	do_of_port_stats_prop_optical_rx_pwr_set(o, val, f, l);
	break;
case 10:
	do_of_port_stats_prop_optical_bias_current_set(o, val, f, l);
	break;
case 11:
	do_of_port_stats_prop_optical_temperature_set(o, val, f, l);
	break;
}
}
void of_queue_desc_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_port_no_get(o, val,f , l);
	break;
case 2:
	do_of_queue_desc_queue_id_get(o, val,f , l);
	break;
case 3:
	do_of_queue_desc_properties_get(o, val,f , l);
	break;
}
}
void of_queue_desc_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_port_no_set(o, val, f, l);
	break;
case 2:
	do_of_queue_desc_queue_id_set(o, val, f, l);
	break;
case 3:
	do_of_queue_desc_properties_set(o, val, f, l);
	break;
}
}
void of_queue_desc_prop_max_rate_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_prop_max_rate_rate_get(o, val,f , l);
	break;
}
}
void of_queue_desc_prop_max_rate_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_prop_max_rate_rate_set(o, val, f, l);
	break;
}
}
void of_queue_desc_prop_min_rate_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_prop_min_rate_rate_get(o, val,f , l);
	break;
}
}
void of_queue_desc_prop_min_rate_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_desc_prop_min_rate_rate_set(o, val, f, l);
	break;
}
}
void of_queue_prop_max_rate_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_prop_max_rate_rate_get(o, val,f , l);
	break;
}
}
void of_queue_prop_max_rate_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_prop_max_rate_rate_set(o, val, f, l);
	break;
}
}
void of_queue_prop_min_rate_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_prop_min_rate_rate_get(o, val,f , l);
	break;
}
}
void of_queue_prop_min_rate_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_prop_min_rate_rate_set(o, val, f, l);
	break;
}
}
void of_queue_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_stats_entry_port_no_get(o, val,f , l);
	break;
case 2:
	do_of_queue_stats_entry_queue_id_get(o, val,f , l);
	break;
case 3:
	do_of_queue_stats_entry_tx_bytes_get(o, val,f , l);
	break;
case 4:
	do_of_queue_stats_entry_tx_packets_get(o, val,f , l);
	break;
case 5:
	do_of_queue_stats_entry_tx_errors_get(o, val,f , l);
	break;
case 6:
	do_of_queue_stats_entry_duration_sec_get(o, val,f , l);
	break;
case 7:
	do_of_queue_stats_entry_duration_nsec_get(o, val,f , l);
	break;
case 8:
	do_of_queue_stats_entry_properties_get(o, val,f , l);
	break;
}
}
void of_queue_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_queue_stats_entry_port_no_set(o, val, f, l);
	break;
case 2:
	do_of_queue_stats_entry_queue_id_set(o, val, f, l);
	break;
case 3:
	do_of_queue_stats_entry_tx_bytes_set(o, val, f, l);
	break;
case 4:
	do_of_queue_stats_entry_tx_packets_set(o, val, f, l);
	break;
case 5:
	do_of_queue_stats_entry_tx_errors_set(o, val, f, l);
	break;
case 6:
	do_of_queue_stats_entry_duration_sec_set(o, val, f, l);
	break;
case 7:
	do_of_queue_stats_entry_duration_nsec_set(o, val, f, l);
	break;
case 8:
	do_of_queue_stats_entry_properties_set(o, val, f, l);
	break;
}
}
void of_table_desc_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_desc_table_id_get(o, val,f , l);
	break;
case 2:
	do_of_table_desc_config_get(o, val,f , l);
	break;
}
}
void of_table_desc_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_desc_table_id_set(o, val, f, l);
	break;
case 2:
	do_of_table_desc_config_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_apply_actions_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_apply_actions_action_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_apply_actions_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_apply_actions_action_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_apply_actions_miss_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_apply_actions_miss_action_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_apply_actions_miss_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_apply_actions_miss_action_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_apply_setfield_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_apply_setfield_oxm_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_apply_setfield_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_apply_setfield_oxm_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_apply_setfield_miss_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_apply_setfield_miss_oxm_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_apply_setfield_miss_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_apply_setfield_miss_oxm_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_instructions_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_instructions_instruction_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_instructions_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_instructions_instruction_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_instructions_miss_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_instructions_miss_instruction_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_instructions_miss_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_instructions_miss_instruction_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_match_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_match_oxm_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_match_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_match_oxm_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_next_tables_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_next_tables_next_table_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_next_tables_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_next_tables_next_table_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_next_tables_miss_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_next_tables_miss_next_table_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_next_tables_miss_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_next_tables_miss_next_table_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_table_sync_from_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_table_sync_from_table_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_table_sync_from_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_table_sync_from_table_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_wildcards_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_wildcards_oxm_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_wildcards_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_wildcards_oxm_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_write_actions_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_write_actions_action_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_write_actions_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_write_actions_action_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_write_actions_miss_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_write_actions_miss_action_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_write_actions_miss_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_write_actions_miss_action_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_write_setfield_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_write_setfield_oxm_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_write_setfield_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_write_setfield_oxm_ids_set(o, val, f, l);
	break;
}
}
void of_table_feature_prop_write_setfield_miss_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_write_setfield_miss_oxm_ids_get(o, val,f , l);
	break;
}
}
void of_table_feature_prop_write_setfield_miss_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_feature_prop_write_setfield_miss_oxm_ids_set(o, val, f, l);
	break;
}
}
void of_table_features_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_features_table_id_get(o, val,f , l);
	break;
case 2:
	do_of_table_features_name_get(o, val,f , l);
	break;
case 3:
	do_of_table_features_metadata_match_get(o, val,f , l);
	break;
case 4:
	do_of_table_features_metadata_write_get(o, val,f , l);
	break;
case 5:
	do_of_table_features_config_get(o, val,f , l);
	break;
case 6:
	do_of_table_features_max_entries_get(o, val,f , l);
	break;
case 7:
	do_of_table_features_properties_get(o, val,f , l);
	break;
}
}
void of_table_features_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_features_table_id_set(o, val, f, l);
	break;
case 2:
	do_of_table_features_name_set(o, val, f, l);
	break;
case 3:
	do_of_table_features_metadata_match_set(o, val, f, l);
	break;
case 4:
	do_of_table_features_metadata_write_set(o, val, f, l);
	break;
case 5:
	do_of_table_features_config_set(o, val, f, l);
	break;
case 6:
	do_of_table_features_max_entries_set(o, val, f, l);
	break;
case 7:
	do_of_table_features_properties_set(o, val, f, l);
	break;
}
}
void of_table_mod_prop_eviction_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_mod_prop_eviction_flags_get(o, val,f , l);
	break;
}
}
void of_table_mod_prop_eviction_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_mod_prop_eviction_flags_set(o, val, f, l);
	break;
}
}
void of_table_mod_prop_vacancy_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_mod_prop_vacancy_vacancy_down_get(o, val,f , l);
	break;
case 2:
	do_of_table_mod_prop_vacancy_vacancy_up_get(o, val,f , l);
	break;
case 3:
	do_of_table_mod_prop_vacancy_vacancy_get(o, val,f , l);
	break;
}
}
void of_table_mod_prop_vacancy_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_mod_prop_vacancy_vacancy_down_set(o, val, f, l);
	break;
case 2:
	do_of_table_mod_prop_vacancy_vacancy_up_set(o, val, f, l);
	break;
case 3:
	do_of_table_mod_prop_vacancy_vacancy_set(o, val, f, l);
	break;
}
}
void of_table_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_stats_entry_table_id_get(o, val,f , l);
	break;
case 2:
	do_of_table_stats_entry_active_count_get(o, val,f , l);
	break;
case 3:
	do_of_table_stats_entry_lookup_count_get(o, val,f , l);
	break;
case 4:
	do_of_table_stats_entry_matched_count_get(o, val,f , l);
	break;
case 5:
	do_of_table_stats_entry_name_get(o, val,f , l);
	break;
case 6:
	do_of_table_stats_entry_match_get(o, val,f , l);
	break;
case 7:
	do_of_table_stats_entry_wildcards_get(o, val,f , l);
	break;
case 8:
	do_of_table_stats_entry_write_actions_get(o, val,f , l);
	break;
case 9:
	do_of_table_stats_entry_apply_actions_get(o, val,f , l);
	break;
case 10:
	do_of_table_stats_entry_write_setfields_get(o, val,f , l);
	break;
case 11:
	do_of_table_stats_entry_apply_setfields_get(o, val,f , l);
	break;
case 12:
	do_of_table_stats_entry_metadata_match_get(o, val,f , l);
	break;
case 13:
	do_of_table_stats_entry_metadata_write_get(o, val,f , l);
	break;
case 14:
	do_of_table_stats_entry_instructions_get(o, val,f , l);
	break;
case 15:
	do_of_table_stats_entry_config_get(o, val,f , l);
	break;
case 16:
	do_of_table_stats_entry_max_entries_get(o, val,f , l);
	break;
}
}
void of_table_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_table_stats_entry_table_id_set(o, val, f, l);
	break;
case 2:
	do_of_table_stats_entry_active_count_set(o, val, f, l);
	break;
case 3:
	do_of_table_stats_entry_lookup_count_set(o, val, f, l);
	break;
case 4:
	do_of_table_stats_entry_matched_count_set(o, val, f, l);
	break;
case 5:
	do_of_table_stats_entry_name_set(o, val, f, l);
	break;
case 6:
	do_of_table_stats_entry_match_set(o, val, f, l);
	break;
case 7:
	do_of_table_stats_entry_wildcards_set(o, val, f, l);
	break;
case 8:
	do_of_table_stats_entry_write_actions_set(o, val, f, l);
	break;
case 9:
	do_of_table_stats_entry_apply_actions_set(o, val, f, l);
	break;
case 10:
	do_of_table_stats_entry_write_setfields_set(o, val, f, l);
	break;
case 11:
	do_of_table_stats_entry_apply_setfields_set(o, val, f, l);
	break;
case 12:
	do_of_table_stats_entry_metadata_match_set(o, val, f, l);
	break;
case 13:
	do_of_table_stats_entry_metadata_write_set(o, val, f, l);
	break;
case 14:
	do_of_table_stats_entry_instructions_set(o, val, f, l);
	break;
case 15:
	do_of_table_stats_entry_config_set(o, val, f, l);
	break;
case 16:
	do_of_table_stats_entry_max_entries_set(o, val, f, l);
	break;
}
}
void of_uint32_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_uint32_value_get(o, val,f , l);
	break;
}
}
void of_uint32_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_uint32_value_set(o, val, f, l);
	break;
}
}
void of_uint64_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_uint64_value_get(o, val,f , l);
	break;
}
}
void of_uint64_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_uint64_value_set(o, val, f, l);
	break;
}
}
void of_uint8_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_uint8_value_get(o, val,f , l);
	break;
}
}
void of_uint8_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	switch(field){
case 1:
	do_of_uint8_value_set(o, val, f, l);
	break;
}
}
void of_list_action_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_ACTION_ITER((of_list_action_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_action_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_ACTION_ITER((of_list_action_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_action_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_ACTION_ID_ITER((of_list_action_id_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_action_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_ACTION_ID_ITER((of_list_action_id_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_async_config_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_ASYNC_CONFIG_PROP_ITER((of_list_async_config_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_async_config_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_ASYNC_CONFIG_PROP_ITER((of_list_async_config_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_controller_connection_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_CONTROLLER_CONNECTION_ITER((of_list_bsn_controller_connection_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_controller_connection_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_CONTROLLER_CONNECTION_ITER((of_list_bsn_controller_connection_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_debug_counter_desc_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_DEBUG_COUNTER_DESC_STATS_ENTRY_ITER((of_list_bsn_debug_counter_desc_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_debug_counter_desc_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_DEBUG_COUNTER_DESC_STATS_ENTRY_ITER((of_list_bsn_debug_counter_desc_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_debug_counter_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_DEBUG_COUNTER_STATS_ENTRY_ITER((of_list_bsn_debug_counter_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_debug_counter_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_DEBUG_COUNTER_STATS_ENTRY_ITER((of_list_bsn_debug_counter_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_flow_checksum_bucket_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_FLOW_CHECKSUM_BUCKET_STATS_ENTRY_ITER((of_list_bsn_flow_checksum_bucket_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_flow_checksum_bucket_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_FLOW_CHECKSUM_BUCKET_STATS_ENTRY_ITER((of_list_bsn_flow_checksum_bucket_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_generic_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENERIC_STATS_ENTRY_ITER((of_list_bsn_generic_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_generic_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENERIC_STATS_ENTRY_ITER((of_list_bsn_generic_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_gentable_bucket_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_BUCKET_STATS_ENTRY_ITER((of_list_bsn_gentable_bucket_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_gentable_bucket_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_BUCKET_STATS_ENTRY_ITER((of_list_bsn_gentable_bucket_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_gentable_desc_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_DESC_STATS_ENTRY_ITER((of_list_bsn_gentable_desc_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_gentable_desc_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_DESC_STATS_ENTRY_ITER((of_list_bsn_gentable_desc_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_gentable_entry_desc_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_ENTRY_DESC_STATS_ENTRY_ITER((of_list_bsn_gentable_entry_desc_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_gentable_entry_desc_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_ENTRY_DESC_STATS_ENTRY_ITER((of_list_bsn_gentable_entry_desc_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_gentable_entry_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_ENTRY_STATS_ENTRY_ITER((of_list_bsn_gentable_entry_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_gentable_entry_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_ENTRY_STATS_ENTRY_ITER((of_list_bsn_gentable_entry_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_gentable_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_STATS_ENTRY_ITER((of_list_bsn_gentable_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_gentable_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_GENTABLE_STATS_ENTRY_ITER((of_list_bsn_gentable_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_interface_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_INTERFACE_ITER((of_list_bsn_interface_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_interface_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_INTERFACE_ITER((of_list_bsn_interface_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_lacp_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_LACP_STATS_ENTRY_ITER((of_list_bsn_lacp_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_lacp_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_LACP_STATS_ENTRY_ITER((of_list_bsn_lacp_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_port_counter_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_PORT_COUNTER_STATS_ENTRY_ITER((of_list_bsn_port_counter_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_port_counter_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_PORT_COUNTER_STATS_ENTRY_ITER((of_list_bsn_port_counter_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_switch_pipeline_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_SWITCH_PIPELINE_STATS_ENTRY_ITER((of_list_bsn_switch_pipeline_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_switch_pipeline_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_SWITCH_PIPELINE_STATS_ENTRY_ITER((of_list_bsn_switch_pipeline_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_table_checksum_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_TABLE_CHECKSUM_STATS_ENTRY_ITER((of_list_bsn_table_checksum_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_table_checksum_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_TABLE_CHECKSUM_STATS_ENTRY_ITER((of_list_bsn_table_checksum_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_tlv_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_TLV_ITER((of_list_bsn_tlv_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_tlv_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_TLV_ITER((of_list_bsn_tlv_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_vlan_counter_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_VLAN_COUNTER_STATS_ENTRY_ITER((of_list_bsn_vlan_counter_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_vlan_counter_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_VLAN_COUNTER_STATS_ENTRY_ITER((of_list_bsn_vlan_counter_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bsn_vrf_counter_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_VRF_COUNTER_STATS_ENTRY_ITER((of_list_bsn_vrf_counter_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bsn_vrf_counter_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BSN_VRF_COUNTER_STATS_ENTRY_ITER((of_list_bsn_vrf_counter_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bucket_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BUCKET_ITER((of_list_bucket_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bucket_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BUCKET_ITER((of_list_bucket_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bucket_counter_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BUCKET_COUNTER_ITER((of_list_bucket_counter_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bucket_counter_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BUCKET_COUNTER_ITER((of_list_bucket_counter_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_bundle_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BUNDLE_PROP_ITER((of_list_bundle_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_bundle_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_BUNDLE_PROP_ITER((of_list_bundle_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_flow_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_FLOW_STATS_ENTRY_ITER((of_list_flow_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_flow_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_FLOW_STATS_ENTRY_ITER((of_list_flow_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_group_desc_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_GROUP_DESC_STATS_ENTRY_ITER((of_list_group_desc_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_group_desc_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_GROUP_DESC_STATS_ENTRY_ITER((of_list_group_desc_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_group_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_GROUP_STATS_ENTRY_ITER((of_list_group_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_group_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_GROUP_STATS_ENTRY_ITER((of_list_group_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_hello_elem_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_HELLO_ELEM_ITER((of_list_hello_elem_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_hello_elem_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_HELLO_ELEM_ITER((of_list_hello_elem_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_instruction_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_INSTRUCTION_ITER((of_list_instruction_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_instruction_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_INSTRUCTION_ITER((of_list_instruction_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_instruction_id_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_INSTRUCTION_ID_ITER((of_list_instruction_id_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_instruction_id_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_INSTRUCTION_ID_ITER((of_list_instruction_id_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_meter_band_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_METER_BAND_ITER((of_list_meter_band_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_meter_band_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_METER_BAND_ITER((of_list_meter_band_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_meter_band_stats_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_METER_BAND_STATS_ITER((of_list_meter_band_stats_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_meter_band_stats_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_METER_BAND_STATS_ITER((of_list_meter_band_stats_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_meter_stats_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_METER_STATS_ITER((of_list_meter_stats_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_meter_stats_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_METER_STATS_ITER((of_list_meter_stats_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_oxm_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_OXM_ITER((of_list_oxm_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_oxm_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_OXM_ITER((of_list_oxm_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_packet_queue_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PACKET_QUEUE_ITER((of_list_packet_queue_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_packet_queue_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PACKET_QUEUE_ITER((of_list_packet_queue_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_port_desc_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_DESC_ITER((of_list_port_desc_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_port_desc_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_DESC_ITER((of_list_port_desc_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_port_desc_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_DESC_PROP_ITER((of_list_port_desc_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_port_desc_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_DESC_PROP_ITER((of_list_port_desc_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_port_mod_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_MOD_PROP_ITER((of_list_port_mod_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_port_mod_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_MOD_PROP_ITER((of_list_port_mod_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_port_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_STATS_ENTRY_ITER((of_list_port_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_port_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_STATS_ENTRY_ITER((of_list_port_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_port_stats_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_STATS_PROP_ITER((of_list_port_stats_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_port_stats_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_PORT_STATS_PROP_ITER((of_list_port_stats_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_queue_desc_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_DESC_ITER((of_list_queue_desc_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_queue_desc_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_DESC_ITER((of_list_queue_desc_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_queue_desc_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_DESC_PROP_ITER((of_list_queue_desc_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_queue_desc_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_DESC_PROP_ITER((of_list_queue_desc_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_queue_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_PROP_ITER((of_list_queue_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_queue_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_PROP_ITER((of_list_queue_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_queue_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_STATS_ENTRY_ITER((of_list_queue_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_queue_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_STATS_ENTRY_ITER((of_list_queue_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_queue_stats_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_STATS_PROP_ITER((of_list_queue_stats_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_queue_stats_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_QUEUE_STATS_PROP_ITER((of_list_queue_stats_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_role_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_ROLE_PROP_ITER((of_list_role_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_role_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_ROLE_PROP_ITER((of_list_role_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_table_desc_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_DESC_ITER((of_list_table_desc_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_table_desc_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_DESC_ITER((of_list_table_desc_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_table_feature_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_FEATURE_PROP_ITER((of_list_table_feature_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_table_feature_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_FEATURE_PROP_ITER((of_list_table_feature_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_table_features_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_FEATURES_ITER((of_list_table_features_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_table_features_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_FEATURES_ITER((of_list_table_features_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_table_mod_prop_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_MOD_PROP_ITER((of_list_table_mod_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_table_mod_prop_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_MOD_PROP_ITER((of_list_table_mod_prop_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_table_stats_entry_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_STATS_ENTRY_ITER((of_list_table_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_table_stats_entry_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_TABLE_STATS_ENTRY_ITER((of_list_table_stats_entry_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_uint32_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_UINT32_ITER((of_list_uint32_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_uint32_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_UINT32_ITER((of_list_uint32_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_uint64_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_UINT64_ITER((of_list_uint64_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_uint64_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_UINT64_ITER((of_list_uint64_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
void of_list_uint8_get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_UINT8_ITER((of_list_uint8_t*)o, iter, rv){
		if (ct==field){
			l++;
			get_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}

void of_list_uint8_set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
	if ( l >= (int)f.size()) {
		return;
	}
	int field = f[l];
	of_object_t *iter = NULL;
	int rv;
	int ct = 1;
	OF_LIST_UINT8_ITER((of_list_uint8_t*)o, iter, rv){
		if (ct==field){
			l++;
			set_field(iter,val,f,l);
			break;
		}
		ct++;
	}
}
public:
void set_field(of_object_t* o, unsigned long int val, std::vector<int> f, int l){
switch(o->object_id){
case OF_AGGREGATE_STATS_REPLY:
	of_aggregate_stats_reply_set_field(o, val, f, l);
	break;
case OF_AGGREGATE_STATS_REQUEST:
	of_aggregate_stats_request_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_FAILED_ERROR_MSG:
	of_async_config_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_ASYNC_GET_REPLY:
	of_async_get_reply_set_field(o, val, f, l);
	break;
case OF_ASYNC_GET_REQUEST:
	of_async_get_request_set_field(o, val, f, l);
	break;
case OF_ASYNC_SET:
	of_async_set_set_field(o, val, f, l);
	break;
case OF_BAD_ACTION_ERROR_MSG:
	of_bad_action_error_msg_set_field(o, val, f, l);
	break;
case OF_BAD_INSTRUCTION_ERROR_MSG:
	of_bad_instruction_error_msg_set_field(o, val, f, l);
	break;
case OF_BAD_MATCH_ERROR_MSG:
	of_bad_match_error_msg_set_field(o, val, f, l);
	break;
case OF_BAD_PROPERTY_ERROR_MSG:
	of_bad_property_error_msg_set_field(o, val, f, l);
	break;
case OF_BAD_REQUEST_ERROR_MSG:
	of_bad_request_error_msg_set_field(o, val, f, l);
	break;
case OF_BARRIER_REPLY:
	of_barrier_reply_set_field(o, val, f, l);
	break;
case OF_BARRIER_REQUEST:
	of_barrier_request_set_field(o, val, f, l);
	break;
case OF_BSN_ARP_IDLE:
	of_bsn_arp_idle_set_field(o, val, f, l);
	break;
case OF_BSN_BW_CLEAR_DATA_REPLY:
	of_bsn_bw_clear_data_reply_set_field(o, val, f, l);
	break;
case OF_BSN_BW_CLEAR_DATA_REQUEST:
	of_bsn_bw_clear_data_request_set_field(o, val, f, l);
	break;
case OF_BSN_BW_ENABLE_GET_REPLY:
	of_bsn_bw_enable_get_reply_set_field(o, val, f, l);
	break;
case OF_BSN_BW_ENABLE_GET_REQUEST:
	of_bsn_bw_enable_get_request_set_field(o, val, f, l);
	break;
case OF_BSN_BW_ENABLE_SET_REPLY:
	of_bsn_bw_enable_set_reply_set_field(o, val, f, l);
	break;
case OF_BSN_BW_ENABLE_SET_REQUEST:
	of_bsn_bw_enable_set_request_set_field(o, val, f, l);
	break;
case OF_BSN_CONTROLLER_CONNECTIONS_REPLY:
	of_bsn_controller_connections_reply_set_field(o, val, f, l);
	break;
case OF_BSN_CONTROLLER_CONNECTIONS_REQUEST:
	of_bsn_controller_connections_request_set_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_DESC_STATS_REPLY:
	of_bsn_debug_counter_desc_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_DESC_STATS_REQUEST:
	of_bsn_debug_counter_desc_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_STATS_REPLY:
	of_bsn_debug_counter_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_STATS_REQUEST:
	of_bsn_debug_counter_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_FLOW_CHECKSUM_BUCKET_STATS_REPLY:
	of_bsn_flow_checksum_bucket_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_FLOW_CHECKSUM_BUCKET_STATS_REQUEST:
	of_bsn_flow_checksum_bucket_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE:
	of_bsn_flow_idle_set_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE_ENABLE_GET_REPLY:
	of_bsn_flow_idle_enable_get_reply_set_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE_ENABLE_GET_REQUEST:
	of_bsn_flow_idle_enable_get_request_set_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE_ENABLE_SET_REPLY:
	of_bsn_flow_idle_enable_set_reply_set_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE_ENABLE_SET_REQUEST:
	of_bsn_flow_idle_enable_set_request_set_field(o, val, f, l);
	break;
case OF_BSN_GENERIC_STATS_REPLY:
	of_bsn_generic_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GENERIC_STATS_REQUEST:
	of_bsn_generic_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_BUCKET_STATS_REPLY:
	of_bsn_gentable_bucket_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_BUCKET_STATS_REQUEST:
	of_bsn_gentable_bucket_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_CLEAR_REPLY:
	of_bsn_gentable_clear_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_CLEAR_REQUEST:
	of_bsn_gentable_clear_request_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_DESC_STATS_REPLY:
	of_bsn_gentable_desc_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_DESC_STATS_REQUEST:
	of_bsn_gentable_desc_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_ADD:
	of_bsn_gentable_entry_add_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_DELETE:
	of_bsn_gentable_entry_delete_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_DESC_STATS_REPLY:
	of_bsn_gentable_entry_desc_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_DESC_STATS_REQUEST:
	of_bsn_gentable_entry_desc_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_STATS_REPLY:
	of_bsn_gentable_entry_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_STATS_REQUEST:
	of_bsn_gentable_entry_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_SET_BUCKETS_SIZE:
	of_bsn_gentable_set_buckets_size_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_STATS_REPLY:
	of_bsn_gentable_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_STATS_REQUEST:
	of_bsn_gentable_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_GET_INTERFACES_REPLY:
	of_bsn_get_interfaces_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GET_INTERFACES_REQUEST:
	of_bsn_get_interfaces_request_set_field(o, val, f, l);
	break;
case OF_BSN_GET_IP_MASK_REPLY:
	of_bsn_get_ip_mask_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GET_IP_MASK_REQUEST:
	of_bsn_get_ip_mask_request_set_field(o, val, f, l);
	break;
case OF_BSN_GET_L2_TABLE_REPLY:
	of_bsn_get_l2_table_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GET_L2_TABLE_REQUEST:
	of_bsn_get_l2_table_request_set_field(o, val, f, l);
	break;
case OF_BSN_GET_MIRRORING_REPLY:
	of_bsn_get_mirroring_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GET_MIRRORING_REQUEST:
	of_bsn_get_mirroring_request_set_field(o, val, f, l);
	break;
case OF_BSN_GET_SWITCH_PIPELINE_REPLY:
	of_bsn_get_switch_pipeline_reply_set_field(o, val, f, l);
	break;
case OF_BSN_GET_SWITCH_PIPELINE_REQUEST:
	of_bsn_get_switch_pipeline_request_set_field(o, val, f, l);
	break;
case OF_BSN_HYBRID_GET_REPLY:
	of_bsn_hybrid_get_reply_set_field(o, val, f, l);
	break;
case OF_BSN_HYBRID_GET_REQUEST:
	of_bsn_hybrid_get_request_set_field(o, val, f, l);
	break;
case OF_BSN_IMAGE_DESC_STATS_REPLY:
	of_bsn_image_desc_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_IMAGE_DESC_STATS_REQUEST:
	of_bsn_image_desc_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_LACP_CONVERGENCE_NOTIF:
	of_bsn_lacp_convergence_notif_set_field(o, val, f, l);
	break;
case OF_BSN_LACP_STATS_REPLY:
	of_bsn_lacp_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_LACP_STATS_REQUEST:
	of_bsn_lacp_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_LOG:
	of_bsn_log_set_field(o, val, f, l);
	break;
case OF_BSN_LUA_COMMAND_REPLY:
	of_bsn_lua_command_reply_set_field(o, val, f, l);
	break;
case OF_BSN_LUA_COMMAND_REQUEST:
	of_bsn_lua_command_request_set_field(o, val, f, l);
	break;
case OF_BSN_LUA_NOTIFICATION:
	of_bsn_lua_notification_set_field(o, val, f, l);
	break;
case OF_BSN_LUA_UPLOAD:
	of_bsn_lua_upload_set_field(o, val, f, l);
	break;
case OF_BSN_PDU_RX_REPLY:
	of_bsn_pdu_rx_reply_set_field(o, val, f, l);
	break;
case OF_BSN_PDU_RX_REQUEST:
	of_bsn_pdu_rx_request_set_field(o, val, f, l);
	break;
case OF_BSN_PDU_RX_TIMEOUT:
	of_bsn_pdu_rx_timeout_set_field(o, val, f, l);
	break;
case OF_BSN_PDU_TX_REPLY:
	of_bsn_pdu_tx_reply_set_field(o, val, f, l);
	break;
case OF_BSN_PDU_TX_REQUEST:
	of_bsn_pdu_tx_request_set_field(o, val, f, l);
	break;
case OF_BSN_PORT_COUNTER_STATS_REPLY:
	of_bsn_port_counter_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_PORT_COUNTER_STATS_REQUEST:
	of_bsn_port_counter_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_ROLE_STATUS:
	of_bsn_role_status_set_field(o, val, f, l);
	break;
case OF_BSN_SET_AUX_CXNS_REPLY:
	of_bsn_set_aux_cxns_reply_set_field(o, val, f, l);
	break;
case OF_BSN_SET_AUX_CXNS_REQUEST:
	of_bsn_set_aux_cxns_request_set_field(o, val, f, l);
	break;
case OF_BSN_SET_IP_MASK:
	of_bsn_set_ip_mask_set_field(o, val, f, l);
	break;
case OF_BSN_SET_L2_TABLE_REPLY:
	of_bsn_set_l2_table_reply_set_field(o, val, f, l);
	break;
case OF_BSN_SET_L2_TABLE_REQUEST:
	of_bsn_set_l2_table_request_set_field(o, val, f, l);
	break;
case OF_BSN_SET_LACP_REPLY:
	of_bsn_set_lacp_reply_set_field(o, val, f, l);
	break;
case OF_BSN_SET_LACP_REQUEST:
	of_bsn_set_lacp_request_set_field(o, val, f, l);
	break;
case OF_BSN_SET_MIRRORING:
	of_bsn_set_mirroring_set_field(o, val, f, l);
	break;
case OF_BSN_SET_PKTIN_SUPPRESSION_REPLY:
	of_bsn_set_pktin_suppression_reply_set_field(o, val, f, l);
	break;
case OF_BSN_SET_PKTIN_SUPPRESSION_REQUEST:
	of_bsn_set_pktin_suppression_request_set_field(o, val, f, l);
	break;
case OF_BSN_SET_SWITCH_PIPELINE_REPLY:
	of_bsn_set_switch_pipeline_reply_set_field(o, val, f, l);
	break;
case OF_BSN_SET_SWITCH_PIPELINE_REQUEST:
	of_bsn_set_switch_pipeline_request_set_field(o, val, f, l);
	break;
case OF_BSN_SHELL_COMMAND:
	of_bsn_shell_command_set_field(o, val, f, l);
	break;
case OF_BSN_SHELL_OUTPUT:
	of_bsn_shell_output_set_field(o, val, f, l);
	break;
case OF_BSN_SHELL_STATUS:
	of_bsn_shell_status_set_field(o, val, f, l);
	break;
case OF_BSN_SWITCH_PIPELINE_STATS_REPLY:
	of_bsn_switch_pipeline_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_SWITCH_PIPELINE_STATS_REQUEST:
	of_bsn_switch_pipeline_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_TABLE_CHECKSUM_STATS_REPLY:
	of_bsn_table_checksum_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_TABLE_CHECKSUM_STATS_REQUEST:
	of_bsn_table_checksum_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_TABLE_SET_BUCKETS_SIZE:
	of_bsn_table_set_buckets_size_set_field(o, val, f, l);
	break;
case OF_BSN_TIME_REPLY:
	of_bsn_time_reply_set_field(o, val, f, l);
	break;
case OF_BSN_TIME_REQUEST:
	of_bsn_time_request_set_field(o, val, f, l);
	break;
case OF_BSN_VIRTUAL_PORT_CREATE_REPLY:
	of_bsn_virtual_port_create_reply_set_field(o, val, f, l);
	break;
case OF_BSN_VIRTUAL_PORT_CREATE_REQUEST:
	of_bsn_virtual_port_create_request_set_field(o, val, f, l);
	break;
case OF_BSN_VIRTUAL_PORT_REMOVE_REPLY:
	of_bsn_virtual_port_remove_reply_set_field(o, val, f, l);
	break;
case OF_BSN_VIRTUAL_PORT_REMOVE_REQUEST:
	of_bsn_virtual_port_remove_request_set_field(o, val, f, l);
	break;
case OF_BSN_VLAN_COUNTER_STATS_REPLY:
	of_bsn_vlan_counter_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_VLAN_COUNTER_STATS_REQUEST:
	of_bsn_vlan_counter_stats_request_set_field(o, val, f, l);
	break;
case OF_BSN_VRF_COUNTER_STATS_REPLY:
	of_bsn_vrf_counter_stats_reply_set_field(o, val, f, l);
	break;
case OF_BSN_VRF_COUNTER_STATS_REQUEST:
	of_bsn_vrf_counter_stats_request_set_field(o, val, f, l);
	break;
case OF_BUNDLE_ADD_MSG:
	of_bundle_add_msg_set_field(o, val, f, l);
	break;
case OF_BUNDLE_CTRL_MSG:
	of_bundle_ctrl_msg_set_field(o, val, f, l);
	break;
case OF_BUNDLE_FAILED_ERROR_MSG:
	of_bundle_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_DESC_STATS_REPLY:
	of_desc_stats_reply_set_field(o, val, f, l);
	break;
case OF_DESC_STATS_REQUEST:
	of_desc_stats_request_set_field(o, val, f, l);
	break;
case OF_ECHO_REPLY:
	of_echo_reply_set_field(o, val, f, l);
	break;
case OF_ECHO_REQUEST:
	of_echo_request_set_field(o, val, f, l);
	break;
case OF_EXPERIMENTER_ERROR_MSG:
	of_experimenter_error_msg_set_field(o, val, f, l);
	break;
case OF_FEATURES_REPLY:
	of_features_reply_set_field(o, val, f, l);
	break;
case OF_FEATURES_REQUEST:
	of_features_request_set_field(o, val, f, l);
	break;
case OF_FLOW_ADD:
	of_flow_add_set_field(o, val, f, l);
	break;
case OF_FLOW_DELETE:
	of_flow_delete_set_field(o, val, f, l);
	break;
case OF_FLOW_DELETE_STRICT:
	of_flow_delete_strict_set_field(o, val, f, l);
	break;
case OF_FLOW_MOD_FAILED_ERROR_MSG:
	of_flow_mod_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_FLOW_MODIFY:
	of_flow_modify_set_field(o, val, f, l);
	break;
case OF_FLOW_MODIFY_STRICT:
	of_flow_modify_strict_set_field(o, val, f, l);
	break;
case OF_FLOW_MONITOR_FAILED_ERROR_MSG:
	of_flow_monitor_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_FLOW_REMOVED:
	of_flow_removed_set_field(o, val, f, l);
	break;
case OF_FLOW_STATS_REPLY:
	of_flow_stats_reply_set_field(o, val, f, l);
	break;
case OF_FLOW_STATS_REQUEST:
	of_flow_stats_request_set_field(o, val, f, l);
	break;
case OF_GET_CONFIG_REPLY:
	of_get_config_reply_set_field(o, val, f, l);
	break;
case OF_GET_CONFIG_REQUEST:
	of_get_config_request_set_field(o, val, f, l);
	break;
case OF_GROUP_ADD:
	of_group_add_set_field(o, val, f, l);
	break;
case OF_GROUP_DELETE:
	of_group_delete_set_field(o, val, f, l);
	break;
case OF_GROUP_DESC_STATS_REPLY:
	of_group_desc_stats_reply_set_field(o, val, f, l);
	break;
case OF_GROUP_DESC_STATS_REQUEST:
	of_group_desc_stats_request_set_field(o, val, f, l);
	break;
case OF_GROUP_FEATURES_STATS_REPLY:
	of_group_features_stats_reply_set_field(o, val, f, l);
	break;
case OF_GROUP_FEATURES_STATS_REQUEST:
	of_group_features_stats_request_set_field(o, val, f, l);
	break;
case OF_GROUP_MOD_FAILED_ERROR_MSG:
	of_group_mod_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_GROUP_MODIFY:
	of_group_modify_set_field(o, val, f, l);
	break;
case OF_GROUP_STATS_REPLY:
	of_group_stats_reply_set_field(o, val, f, l);
	break;
case OF_GROUP_STATS_REQUEST:
	of_group_stats_request_set_field(o, val, f, l);
	break;
case OF_HELLO:
	of_hello_set_field(o, val, f, l);
	break;
case OF_HELLO_FAILED_ERROR_MSG:
	of_hello_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_METER_CONFIG_STATS_REPLY:
	of_meter_config_stats_reply_set_field(o, val, f, l);
	break;
case OF_METER_CONFIG_STATS_REQUEST:
	of_meter_config_stats_request_set_field(o, val, f, l);
	break;
case OF_METER_FEATURES_STATS_REPLY:
	of_meter_features_stats_reply_set_field(o, val, f, l);
	break;
case OF_METER_FEATURES_STATS_REQUEST:
	of_meter_features_stats_request_set_field(o, val, f, l);
	break;
case OF_METER_MOD:
	of_meter_mod_set_field(o, val, f, l);
	break;
case OF_METER_MOD_FAILED_ERROR_MSG:
	of_meter_mod_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_METER_STATS_REPLY:
	of_meter_stats_reply_set_field(o, val, f, l);
	break;
case OF_METER_STATS_REQUEST:
	of_meter_stats_request_set_field(o, val, f, l);
	break;
case OF_NICIRA_CONTROLLER_ROLE_REPLY:
	of_nicira_controller_role_reply_set_field(o, val, f, l);
	break;
case OF_NICIRA_CONTROLLER_ROLE_REQUEST:
	of_nicira_controller_role_request_set_field(o, val, f, l);
	break;
case OF_PACKET_IN:
	of_packet_in_set_field(o, val, f, l);
	break;
case OF_PACKET_OUT:
	of_packet_out_set_field(o, val, f, l);
	break;
case OF_PORT_DESC_STATS_REPLY:
	of_port_desc_stats_reply_set_field(o, val, f, l);
	break;
case OF_PORT_DESC_STATS_REQUEST:
	of_port_desc_stats_request_set_field(o, val, f, l);
	break;
case OF_PORT_MOD:
	of_port_mod_set_field(o, val, f, l);
	break;
case OF_PORT_MOD_FAILED_ERROR_MSG:
	of_port_mod_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_PORT_STATS_REPLY:
	of_port_stats_reply_set_field(o, val, f, l);
	break;
case OF_PORT_STATS_REQUEST:
	of_port_stats_request_set_field(o, val, f, l);
	break;
case OF_PORT_STATUS:
	of_port_status_set_field(o, val, f, l);
	break;
case OF_QUEUE_DESC_STATS_REPLY:
	of_queue_desc_stats_reply_set_field(o, val, f, l);
	break;
case OF_QUEUE_DESC_STATS_REQUEST:
	of_queue_desc_stats_request_set_field(o, val, f, l);
	break;
case OF_QUEUE_GET_CONFIG_REPLY:
	of_queue_get_config_reply_set_field(o, val, f, l);
	break;
case OF_QUEUE_GET_CONFIG_REQUEST:
	of_queue_get_config_request_set_field(o, val, f, l);
	break;
case OF_QUEUE_OP_FAILED_ERROR_MSG:
	of_queue_op_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_QUEUE_STATS_REPLY:
	of_queue_stats_reply_set_field(o, val, f, l);
	break;
case OF_QUEUE_STATS_REQUEST:
	of_queue_stats_request_set_field(o, val, f, l);
	break;
case OF_REQUESTFORWARD:
	of_requestforward_set_field(o, val, f, l);
	break;
case OF_ROLE_REPLY:
	of_role_reply_set_field(o, val, f, l);
	break;
case OF_ROLE_REQUEST:
	of_role_request_set_field(o, val, f, l);
	break;
case OF_ROLE_REQUEST_FAILED_ERROR_MSG:
	of_role_request_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_ROLE_STATUS:
	of_role_status_set_field(o, val, f, l);
	break;
case OF_SET_CONFIG:
	of_set_config_set_field(o, val, f, l);
	break;
case OF_SWITCH_CONFIG_FAILED_ERROR_MSG:
	of_switch_config_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_TABLE_DESC_STATS_REPLY:
	of_table_desc_stats_reply_set_field(o, val, f, l);
	break;
case OF_TABLE_DESC_STATS_REQUEST:
	of_table_desc_stats_request_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURES_FAILED_ERROR_MSG:
	of_table_features_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURES_STATS_REPLY:
	of_table_features_stats_reply_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURES_STATS_REQUEST:
	of_table_features_stats_request_set_field(o, val, f, l);
	break;
case OF_TABLE_MOD:
	of_table_mod_set_field(o, val, f, l);
	break;
case OF_TABLE_MOD_FAILED_ERROR_MSG:
	of_table_mod_failed_error_msg_set_field(o, val, f, l);
	break;
case OF_TABLE_STATS_REPLY:
	of_table_stats_reply_set_field(o, val, f, l);
	break;
case OF_TABLE_STATS_REQUEST:
	of_table_stats_request_set_field(o, val, f, l);
	break;
case OF_TABLE_STATUS:
	of_table_status_set_field(o, val, f, l);
	break;
case OF_ACTION_BSN_CHECKSUM:
	of_action_bsn_checksum_set_field(o, val, f, l);
	break;
case OF_ACTION_BSN_GENTABLE:
	of_action_bsn_gentable_set_field(o, val, f, l);
	break;
case OF_ACTION_BSN_MIRROR:
	of_action_bsn_mirror_set_field(o, val, f, l);
	break;
case OF_ACTION_BSN_SET_TUNNEL_DST:
	of_action_bsn_set_tunnel_dst_set_field(o, val, f, l);
	break;
case OF_ACTION_COPY_TTL_IN:
	of_action_copy_ttl_in_set_field(o, val, f, l);
	break;
case OF_ACTION_COPY_TTL_OUT:
	of_action_copy_ttl_out_set_field(o, val, f, l);
	break;
case OF_ACTION_DEC_MPLS_TTL:
	of_action_dec_mpls_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_DEC_NW_TTL:
	of_action_dec_nw_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_ENQUEUE:
	of_action_enqueue_set_field(o, val, f, l);
	break;
case OF_ACTION_GROUP:
	of_action_group_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_BSN_CHECKSUM:
	of_action_id_bsn_checksum_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_BSN_GENTABLE:
	of_action_id_bsn_gentable_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_BSN_MIRROR:
	of_action_id_bsn_mirror_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_BSN_SET_TUNNEL_DST:
	of_action_id_bsn_set_tunnel_dst_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_COPY_TTL_IN:
	of_action_id_copy_ttl_in_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_COPY_TTL_OUT:
	of_action_id_copy_ttl_out_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_DEC_MPLS_TTL:
	of_action_id_dec_mpls_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_DEC_NW_TTL:
	of_action_id_dec_nw_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_GROUP:
	of_action_id_group_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_NICIRA_DEC_TTL:
	of_action_id_nicira_dec_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_OUTPUT:
	of_action_id_output_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_POP_MPLS:
	of_action_id_pop_mpls_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_POP_PBB:
	of_action_id_pop_pbb_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_POP_VLAN:
	of_action_id_pop_vlan_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_PUSH_MPLS:
	of_action_id_push_mpls_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_PUSH_PBB:
	of_action_id_push_pbb_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_PUSH_VLAN:
	of_action_id_push_vlan_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_SET_FIELD:
	of_action_id_set_field_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_SET_MPLS_TTL:
	of_action_id_set_mpls_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_SET_NW_TTL:
	of_action_id_set_nw_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_ID_SET_QUEUE:
	of_action_id_set_queue_set_field(o, val, f, l);
	break;
case OF_ACTION_NICIRA_DEC_TTL:
	of_action_nicira_dec_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_OUTPUT:
	of_action_output_set_field(o, val, f, l);
	break;
case OF_ACTION_POP_MPLS:
	of_action_pop_mpls_set_field(o, val, f, l);
	break;
case OF_ACTION_POP_PBB:
	of_action_pop_pbb_set_field(o, val, f, l);
	break;
case OF_ACTION_POP_VLAN:
	of_action_pop_vlan_set_field(o, val, f, l);
	break;
case OF_ACTION_PUSH_MPLS:
	of_action_push_mpls_set_field(o, val, f, l);
	break;
case OF_ACTION_PUSH_PBB:
	of_action_push_pbb_set_field(o, val, f, l);
	break;
case OF_ACTION_PUSH_VLAN:
	of_action_push_vlan_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_DL_DST:
	of_action_set_dl_dst_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_DL_SRC:
	of_action_set_dl_src_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_FIELD:
	of_action_set_field_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_MPLS_LABEL:
	of_action_set_mpls_label_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_MPLS_TC:
	of_action_set_mpls_tc_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_MPLS_TTL:
	of_action_set_mpls_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_DST:
	of_action_set_nw_dst_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_ECN:
	of_action_set_nw_ecn_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_SRC:
	of_action_set_nw_src_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_TOS:
	of_action_set_nw_tos_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_TTL:
	of_action_set_nw_ttl_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_QUEUE:
	of_action_set_queue_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_TP_DST:
	of_action_set_tp_dst_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_TP_SRC:
	of_action_set_tp_src_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_VLAN_PCP:
	of_action_set_vlan_pcp_set_field(o, val, f, l);
	break;
case OF_ACTION_SET_VLAN_VID:
	of_action_set_vlan_vid_set_field(o, val, f, l);
	break;
case OF_ACTION_STRIP_VLAN:
	of_action_strip_vlan_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_EXPERIMENTER_MASTER:
	of_async_config_prop_experimenter_master_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_EXPERIMENTER_SLAVE:
	of_async_config_prop_experimenter_slave_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_FLOW_REMOVED_MASTER:
	of_async_config_prop_flow_removed_master_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_FLOW_REMOVED_SLAVE:
	of_async_config_prop_flow_removed_slave_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_PACKET_IN_MASTER:
	of_async_config_prop_packet_in_master_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_PACKET_IN_SLAVE:
	of_async_config_prop_packet_in_slave_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_PORT_STATUS_MASTER:
	of_async_config_prop_port_status_master_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_PORT_STATUS_SLAVE:
	of_async_config_prop_port_status_slave_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_REQUESTFORWARD_MASTER:
	of_async_config_prop_requestforward_master_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_REQUESTFORWARD_SLAVE:
	of_async_config_prop_requestforward_slave_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_ROLE_STATUS_MASTER:
	of_async_config_prop_role_status_master_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_ROLE_STATUS_SLAVE:
	of_async_config_prop_role_status_slave_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_TABLE_STATUS_MASTER:
	of_async_config_prop_table_status_master_set_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_TABLE_STATUS_SLAVE:
	of_async_config_prop_table_status_slave_set_field(o, val, f, l);
	break;
case OF_BSN_CONTROLLER_CONNECTION:
	of_bsn_controller_connection_set_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_DESC_STATS_ENTRY:
	of_bsn_debug_counter_desc_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_STATS_ENTRY:
	of_bsn_debug_counter_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_FLOW_CHECKSUM_BUCKET_STATS_ENTRY:
	of_bsn_flow_checksum_bucket_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_GENERIC_STATS_ENTRY:
	of_bsn_generic_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_BUCKET_STATS_ENTRY:
	of_bsn_gentable_bucket_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_DESC_STATS_ENTRY:
	of_bsn_gentable_desc_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_DESC_STATS_ENTRY:
	of_bsn_gentable_entry_desc_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_STATS_ENTRY:
	of_bsn_gentable_entry_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_STATS_ENTRY:
	of_bsn_gentable_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_INTERFACE:
	of_bsn_interface_set_field(o, val, f, l);
	break;
case OF_BSN_LACP_STATS_ENTRY:
	of_bsn_lacp_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_PORT_COUNTER_STATS_ENTRY:
	of_bsn_port_counter_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_SWITCH_PIPELINE_STATS_ENTRY:
	of_bsn_switch_pipeline_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_TABLE_CHECKSUM_STATS_ENTRY:
	of_bsn_table_checksum_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_KEY:
	of_bsn_tlv_actor_key_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_PORT_NUM:
	of_bsn_tlv_actor_port_num_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_PORT_PRIORITY:
	of_bsn_tlv_actor_port_priority_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_STATE:
	of_bsn_tlv_actor_state_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_SYSTEM_MAC:
	of_bsn_tlv_actor_system_mac_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_SYSTEM_PRIORITY:
	of_bsn_tlv_actor_system_priority_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_BROADCAST_QUERY_TIMEOUT:
	of_bsn_tlv_broadcast_query_timeout_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_BUCKET:
	of_bsn_tlv_bucket_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_CIRCUIT_ID:
	of_bsn_tlv_circuit_id_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_CONVERGENCE_STATUS:
	of_bsn_tlv_convergence_status_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_CRC_ENABLED:
	of_bsn_tlv_crc_enabled_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_DATA:
	of_bsn_tlv_data_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ETH_DST:
	of_bsn_tlv_eth_dst_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ETH_SRC:
	of_bsn_tlv_eth_src_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_GATEWAY_IP:
	of_bsn_tlv_external_gateway_ip_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_GATEWAY_MAC:
	of_bsn_tlv_external_gateway_mac_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_IP:
	of_bsn_tlv_external_ip_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_MAC:
	of_bsn_tlv_external_mac_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_NETMASK:
	of_bsn_tlv_external_netmask_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_HEADER_SIZE:
	of_bsn_tlv_header_size_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ICMP_CODE:
	of_bsn_tlv_icmp_code_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ICMP_ID:
	of_bsn_tlv_icmp_id_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_ICMP_TYPE:
	of_bsn_tlv_icmp_type_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_IDLE_NOTIFICATION:
	of_bsn_tlv_idle_notification_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_IDLE_TIME:
	of_bsn_tlv_idle_time_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_IDLE_TIMEOUT:
	of_bsn_tlv_idle_timeout_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_INTERNAL_GATEWAY_MAC:
	of_bsn_tlv_internal_gateway_mac_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_INTERNAL_MAC:
	of_bsn_tlv_internal_mac_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_INTERVAL:
	of_bsn_tlv_interval_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_IP_PROTO:
	of_bsn_tlv_ip_proto_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_IPV4:
	of_bsn_tlv_ipv4_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_IPV4_DST:
	of_bsn_tlv_ipv4_dst_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_IPV4_NETMASK:
	of_bsn_tlv_ipv4_netmask_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_IPV4_SRC:
	of_bsn_tlv_ipv4_src_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_MAC:
	of_bsn_tlv_mac_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_MAC_MASK:
	of_bsn_tlv_mac_mask_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_MISS_PACKETS:
	of_bsn_tlv_miss_packets_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_MPLS_CONTROL_WORD:
	of_bsn_tlv_mpls_control_word_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_MPLS_LABEL:
	of_bsn_tlv_mpls_label_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_MPLS_SEQUENCED:
	of_bsn_tlv_mpls_sequenced_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_NAME:
	of_bsn_tlv_name_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_KEY:
	of_bsn_tlv_partner_key_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_PORT_NUM:
	of_bsn_tlv_partner_port_num_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_PORT_PRIORITY:
	of_bsn_tlv_partner_port_priority_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_STATE:
	of_bsn_tlv_partner_state_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_SYSTEM_MAC:
	of_bsn_tlv_partner_system_mac_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_SYSTEM_PRIORITY:
	of_bsn_tlv_partner_system_priority_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_PORT:
	of_bsn_tlv_port_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_PRIORITY:
	of_bsn_tlv_priority_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_QUEUE_ID:
	of_bsn_tlv_queue_id_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_QUEUE_WEIGHT:
	of_bsn_tlv_queue_weight_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_REFERENCE:
	of_bsn_tlv_reference_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_REPLY_PACKETS:
	of_bsn_tlv_reply_packets_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_REQUEST_PACKETS:
	of_bsn_tlv_request_packets_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_RX_BYTES:
	of_bsn_tlv_rx_bytes_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_RX_PACKETS:
	of_bsn_tlv_rx_packets_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_SAMPLING_RATE:
	of_bsn_tlv_sampling_rate_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_SUB_AGENT_ID:
	of_bsn_tlv_sub_agent_id_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_TCP_DST:
	of_bsn_tlv_tcp_dst_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_TCP_SRC:
	of_bsn_tlv_tcp_src_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_TX_BYTES:
	of_bsn_tlv_tx_bytes_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_TX_PACKETS:
	of_bsn_tlv_tx_packets_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDF_ANCHOR:
	of_bsn_tlv_udf_anchor_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDF_ID:
	of_bsn_tlv_udf_id_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDF_LENGTH:
	of_bsn_tlv_udf_length_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDF_OFFSET:
	of_bsn_tlv_udf_offset_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDP_DST:
	of_bsn_tlv_udp_dst_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDP_SRC:
	of_bsn_tlv_udp_src_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_UNICAST_QUERY_TIMEOUT:
	of_bsn_tlv_unicast_query_timeout_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_VLAN_VID:
	of_bsn_tlv_vlan_vid_set_field(o, val, f, l);
	break;
case OF_BSN_TLV_VRF:
	of_bsn_tlv_vrf_set_field(o, val, f, l);
	break;
case OF_BSN_VLAN_COUNTER_STATS_ENTRY:
	of_bsn_vlan_counter_stats_entry_set_field(o, val, f, l);
	break;
case OF_BSN_VPORT_L2GRE:
	of_bsn_vport_l2gre_set_field(o, val, f, l);
	break;
case OF_BSN_VPORT_Q_IN_Q:
	of_bsn_vport_q_in_q_set_field(o, val, f, l);
	break;
case OF_BSN_VRF_COUNTER_STATS_ENTRY:
	of_bsn_vrf_counter_stats_entry_set_field(o, val, f, l);
	break;
case OF_BUCKET:
	of_bucket_set_field(o, val, f, l);
	break;
case OF_BUCKET_COUNTER:
	of_bucket_counter_set_field(o, val, f, l);
	break;
case OF_FLOW_STATS_ENTRY:
	of_flow_stats_entry_set_field(o, val, f, l);
	break;
case OF_GROUP_DESC_STATS_ENTRY:
	of_group_desc_stats_entry_set_field(o, val, f, l);
	break;
case OF_GROUP_STATS_ENTRY:
	of_group_stats_entry_set_field(o, val, f, l);
	break;
case OF_HELLO_ELEM_VERSIONBITMAP:
	of_hello_elem_versionbitmap_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_APPLY_ACTIONS:
	of_instruction_apply_actions_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_ARP_OFFLOAD:
	of_instruction_bsn_arp_offload_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_AUTO_NEGOTIATION:
	of_instruction_bsn_auto_negotiation_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DENY:
	of_instruction_bsn_deny_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DHCP_OFFLOAD:
	of_instruction_bsn_dhcp_offload_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DISABLE_SPLIT_HORIZON_CHECK:
	of_instruction_bsn_disable_split_horizon_check_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DISABLE_SRC_MAC_CHECK:
	of_instruction_bsn_disable_src_mac_check_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DISABLE_VLAN_COUNTERS:
	of_instruction_bsn_disable_vlan_counters_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_PACKET_OF_DEATH:
	of_instruction_bsn_packet_of_death_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_PERMIT:
	of_instruction_bsn_permit_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_PRIORITIZE_PDUS:
	of_instruction_bsn_prioritize_pdus_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_REQUIRE_VLAN_XLATE:
	of_instruction_bsn_require_vlan_xlate_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_SPAN_DESTINATION:
	of_instruction_bsn_span_destination_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_CLEAR_ACTIONS:
	of_instruction_clear_actions_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_GOTO_TABLE:
	of_instruction_goto_table_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_APPLY_ACTIONS:
	of_instruction_id_apply_actions_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_ARP_OFFLOAD:
	of_instruction_id_bsn_arp_offload_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_AUTO_NEGOTIATION:
	of_instruction_id_bsn_auto_negotiation_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DENY:
	of_instruction_id_bsn_deny_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DHCP_OFFLOAD:
	of_instruction_id_bsn_dhcp_offload_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DISABLE_SPLIT_HORIZON_CHECK:
	of_instruction_id_bsn_disable_split_horizon_check_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DISABLE_SRC_MAC_CHECK:
	of_instruction_id_bsn_disable_src_mac_check_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DISABLE_VLAN_COUNTERS:
	of_instruction_id_bsn_disable_vlan_counters_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_PACKET_OF_DEATH:
	of_instruction_id_bsn_packet_of_death_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_PERMIT:
	of_instruction_id_bsn_permit_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_PRIORITIZE_PDUS:
	of_instruction_id_bsn_prioritize_pdus_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_REQUIRE_VLAN_XLATE:
	of_instruction_id_bsn_require_vlan_xlate_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_SPAN_DESTINATION:
	of_instruction_id_bsn_span_destination_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_CLEAR_ACTIONS:
	of_instruction_id_clear_actions_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_GOTO_TABLE:
	of_instruction_id_goto_table_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_METER:
	of_instruction_id_meter_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_WRITE_ACTIONS:
	of_instruction_id_write_actions_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_WRITE_METADATA:
	of_instruction_id_write_metadata_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_METER:
	of_instruction_meter_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_WRITE_ACTIONS:
	of_instruction_write_actions_set_field(o, val, f, l);
	break;
case OF_INSTRUCTION_WRITE_METADATA:
	of_instruction_write_metadata_set_field(o, val, f, l);
	break;
case OF_MATCH_V1:
	of_match_v1_set_field(o, val, f, l);
	break;
case OF_MATCH_V2:
	of_match_v2_set_field(o, val, f, l);
	break;
case OF_MATCH_V3:
	of_match_v3_set_field(o, val, f, l);
	break;
case OF_METER_BAND_DROP:
	of_meter_band_drop_set_field(o, val, f, l);
	break;
case OF_METER_BAND_DSCP_REMARK:
	of_meter_band_dscp_remark_set_field(o, val, f, l);
	break;
case OF_METER_BAND_EXPERIMENTER:
	of_meter_band_experimenter_set_field(o, val, f, l);
	break;
case OF_METER_BAND_STATS:
	of_meter_band_stats_set_field(o, val, f, l);
	break;
case OF_METER_CONFIG:
	of_meter_config_set_field(o, val, f, l);
	break;
case OF_METER_FEATURES:
	of_meter_features_set_field(o, val, f, l);
	break;
case OF_METER_STATS:
	of_meter_stats_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_OP:
	of_oxm_arp_op_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_OP_MASKED:
	of_oxm_arp_op_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_SHA:
	of_oxm_arp_sha_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_SHA_MASKED:
	of_oxm_arp_sha_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_SPA:
	of_oxm_arp_spa_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_SPA_MASKED:
	of_oxm_arp_spa_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_THA:
	of_oxm_arp_tha_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_THA_MASKED:
	of_oxm_arp_tha_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_TPA:
	of_oxm_arp_tpa_set_field(o, val, f, l);
	break;
case OF_OXM_ARP_TPA_MASKED:
	of_oxm_arp_tpa_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_EGR_PORT_GROUP_ID:
	of_oxm_bsn_egr_port_group_id_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_EGR_PORT_GROUP_ID_MASKED:
	of_oxm_bsn_egr_port_group_id_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_GLOBAL_VRF_ALLOWED:
	of_oxm_bsn_global_vrf_allowed_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_GLOBAL_VRF_ALLOWED_MASKED:
	of_oxm_bsn_global_vrf_allowed_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_IN_PORTS_128:
	of_oxm_bsn_in_ports_128_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_IN_PORTS_128_MASKED:
	of_oxm_bsn_in_ports_128_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_IN_PORTS_512:
	of_oxm_bsn_in_ports_512_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_IN_PORTS_512_MASKED:
	of_oxm_bsn_in_ports_512_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_INGRESS_PORT_GROUP_ID:
	of_oxm_bsn_ingress_port_group_id_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_INGRESS_PORT_GROUP_ID_MASKED:
	of_oxm_bsn_ingress_port_group_id_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_L2_CACHE_HIT:
	of_oxm_bsn_l2_cache_hit_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_L2_CACHE_HIT_MASKED:
	of_oxm_bsn_l2_cache_hit_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_DST_CLASS_ID:
	of_oxm_bsn_l3_dst_class_id_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_DST_CLASS_ID_MASKED:
	of_oxm_bsn_l3_dst_class_id_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_INTERFACE_CLASS_ID:
	of_oxm_bsn_l3_interface_class_id_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_INTERFACE_CLASS_ID_MASKED:
	of_oxm_bsn_l3_interface_class_id_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_SRC_CLASS_ID:
	of_oxm_bsn_l3_src_class_id_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_SRC_CLASS_ID_MASKED:
	of_oxm_bsn_l3_src_class_id_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_LAG_ID:
	of_oxm_bsn_lag_id_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_LAG_ID_MASKED:
	of_oxm_bsn_lag_id_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_TCP_FLAGS:
	of_oxm_bsn_tcp_flags_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_TCP_FLAGS_MASKED:
	of_oxm_bsn_tcp_flags_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF0:
	of_oxm_bsn_udf0_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF0_MASKED:
	of_oxm_bsn_udf0_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF1:
	of_oxm_bsn_udf1_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF1_MASKED:
	of_oxm_bsn_udf1_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF2:
	of_oxm_bsn_udf2_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF2_MASKED:
	of_oxm_bsn_udf2_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF3:
	of_oxm_bsn_udf3_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF3_MASKED:
	of_oxm_bsn_udf3_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF4:
	of_oxm_bsn_udf4_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF4_MASKED:
	of_oxm_bsn_udf4_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF5:
	of_oxm_bsn_udf5_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF5_MASKED:
	of_oxm_bsn_udf5_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF6:
	of_oxm_bsn_udf6_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF6_MASKED:
	of_oxm_bsn_udf6_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF7:
	of_oxm_bsn_udf7_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF7_MASKED:
	of_oxm_bsn_udf7_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_VLAN_XLATE_PORT_GROUP_ID:
	of_oxm_bsn_vlan_xlate_port_group_id_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_VLAN_XLATE_PORT_GROUP_ID_MASKED:
	of_oxm_bsn_vlan_xlate_port_group_id_masked_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_VRF:
	of_oxm_bsn_vrf_set_field(o, val, f, l);
	break;
case OF_OXM_BSN_VRF_MASKED:
	of_oxm_bsn_vrf_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ETH_DST:
	of_oxm_eth_dst_set_field(o, val, f, l);
	break;
case OF_OXM_ETH_DST_MASKED:
	of_oxm_eth_dst_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ETH_SRC:
	of_oxm_eth_src_set_field(o, val, f, l);
	break;
case OF_OXM_ETH_SRC_MASKED:
	of_oxm_eth_src_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ETH_TYPE:
	of_oxm_eth_type_set_field(o, val, f, l);
	break;
case OF_OXM_ETH_TYPE_MASKED:
	of_oxm_eth_type_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ICMPV4_CODE:
	of_oxm_icmpv4_code_set_field(o, val, f, l);
	break;
case OF_OXM_ICMPV4_CODE_MASKED:
	of_oxm_icmpv4_code_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ICMPV4_TYPE:
	of_oxm_icmpv4_type_set_field(o, val, f, l);
	break;
case OF_OXM_ICMPV4_TYPE_MASKED:
	of_oxm_icmpv4_type_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ICMPV6_CODE:
	of_oxm_icmpv6_code_set_field(o, val, f, l);
	break;
case OF_OXM_ICMPV6_CODE_MASKED:
	of_oxm_icmpv6_code_masked_set_field(o, val, f, l);
	break;
case OF_OXM_ICMPV6_TYPE:
	of_oxm_icmpv6_type_set_field(o, val, f, l);
	break;
case OF_OXM_ICMPV6_TYPE_MASKED:
	of_oxm_icmpv6_type_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IN_PHY_PORT:
	of_oxm_in_phy_port_set_field(o, val, f, l);
	break;
case OF_OXM_IN_PHY_PORT_MASKED:
	of_oxm_in_phy_port_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IN_PORT:
	of_oxm_in_port_set_field(o, val, f, l);
	break;
case OF_OXM_IN_PORT_MASKED:
	of_oxm_in_port_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IP_DSCP:
	of_oxm_ip_dscp_set_field(o, val, f, l);
	break;
case OF_OXM_IP_DSCP_MASKED:
	of_oxm_ip_dscp_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IP_ECN:
	of_oxm_ip_ecn_set_field(o, val, f, l);
	break;
case OF_OXM_IP_ECN_MASKED:
	of_oxm_ip_ecn_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IP_PROTO:
	of_oxm_ip_proto_set_field(o, val, f, l);
	break;
case OF_OXM_IP_PROTO_MASKED:
	of_oxm_ip_proto_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IPV4_DST:
	of_oxm_ipv4_dst_set_field(o, val, f, l);
	break;
case OF_OXM_IPV4_DST_MASKED:
	of_oxm_ipv4_dst_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IPV4_SRC:
	of_oxm_ipv4_src_set_field(o, val, f, l);
	break;
case OF_OXM_IPV4_SRC_MASKED:
	of_oxm_ipv4_src_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_DST:
	of_oxm_ipv6_dst_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_DST_MASKED:
	of_oxm_ipv6_dst_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_EXTHDR:
	of_oxm_ipv6_exthdr_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_EXTHDR_MASKED:
	of_oxm_ipv6_exthdr_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_FLABEL:
	of_oxm_ipv6_flabel_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_FLABEL_MASKED:
	of_oxm_ipv6_flabel_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_SLL:
	of_oxm_ipv6_nd_sll_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_SLL_MASKED:
	of_oxm_ipv6_nd_sll_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_TARGET:
	of_oxm_ipv6_nd_target_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_TARGET_MASKED:
	of_oxm_ipv6_nd_target_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_TLL:
	of_oxm_ipv6_nd_tll_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_TLL_MASKED:
	of_oxm_ipv6_nd_tll_masked_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_SRC:
	of_oxm_ipv6_src_set_field(o, val, f, l);
	break;
case OF_OXM_IPV6_SRC_MASKED:
	of_oxm_ipv6_src_masked_set_field(o, val, f, l);
	break;
case OF_OXM_METADATA:
	of_oxm_metadata_set_field(o, val, f, l);
	break;
case OF_OXM_METADATA_MASKED:
	of_oxm_metadata_masked_set_field(o, val, f, l);
	break;
case OF_OXM_MPLS_BOS:
	of_oxm_mpls_bos_set_field(o, val, f, l);
	break;
case OF_OXM_MPLS_BOS_MASKED:
	of_oxm_mpls_bos_masked_set_field(o, val, f, l);
	break;
case OF_OXM_MPLS_LABEL:
	of_oxm_mpls_label_set_field(o, val, f, l);
	break;
case OF_OXM_MPLS_LABEL_MASKED:
	of_oxm_mpls_label_masked_set_field(o, val, f, l);
	break;
case OF_OXM_MPLS_TC:
	of_oxm_mpls_tc_set_field(o, val, f, l);
	break;
case OF_OXM_MPLS_TC_MASKED:
	of_oxm_mpls_tc_masked_set_field(o, val, f, l);
	break;
case OF_OXM_PBB_UCA:
	of_oxm_pbb_uca_set_field(o, val, f, l);
	break;
case OF_OXM_PBB_UCA_MASKED:
	of_oxm_pbb_uca_masked_set_field(o, val, f, l);
	break;
case OF_OXM_SCTP_DST:
	of_oxm_sctp_dst_set_field(o, val, f, l);
	break;
case OF_OXM_SCTP_DST_MASKED:
	of_oxm_sctp_dst_masked_set_field(o, val, f, l);
	break;
case OF_OXM_SCTP_SRC:
	of_oxm_sctp_src_set_field(o, val, f, l);
	break;
case OF_OXM_SCTP_SRC_MASKED:
	of_oxm_sctp_src_masked_set_field(o, val, f, l);
	break;
case OF_OXM_TCP_DST:
	of_oxm_tcp_dst_set_field(o, val, f, l);
	break;
case OF_OXM_TCP_DST_MASKED:
	of_oxm_tcp_dst_masked_set_field(o, val, f, l);
	break;
case OF_OXM_TCP_SRC:
	of_oxm_tcp_src_set_field(o, val, f, l);
	break;
case OF_OXM_TCP_SRC_MASKED:
	of_oxm_tcp_src_masked_set_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_ID:
	of_oxm_tunnel_id_set_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_ID_MASKED:
	of_oxm_tunnel_id_masked_set_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_IPV4_DST:
	of_oxm_tunnel_ipv4_dst_set_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_IPV4_DST_MASKED:
	of_oxm_tunnel_ipv4_dst_masked_set_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_IPV4_SRC:
	of_oxm_tunnel_ipv4_src_set_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_IPV4_SRC_MASKED:
	of_oxm_tunnel_ipv4_src_masked_set_field(o, val, f, l);
	break;
case OF_OXM_UDP_DST:
	of_oxm_udp_dst_set_field(o, val, f, l);
	break;
case OF_OXM_UDP_DST_MASKED:
	of_oxm_udp_dst_masked_set_field(o, val, f, l);
	break;
case OF_OXM_UDP_SRC:
	of_oxm_udp_src_set_field(o, val, f, l);
	break;
case OF_OXM_UDP_SRC_MASKED:
	of_oxm_udp_src_masked_set_field(o, val, f, l);
	break;
case OF_OXM_VLAN_PCP:
	of_oxm_vlan_pcp_set_field(o, val, f, l);
	break;
case OF_OXM_VLAN_PCP_MASKED:
	of_oxm_vlan_pcp_masked_set_field(o, val, f, l);
	break;
case OF_OXM_VLAN_VID:
	of_oxm_vlan_vid_set_field(o, val, f, l);
	break;
case OF_OXM_VLAN_VID_MASKED:
	of_oxm_vlan_vid_masked_set_field(o, val, f, l);
	break;
case OF_PACKET_QUEUE:
	of_packet_queue_set_field(o, val, f, l);
	break;
case OF_PORT_DESC:
	of_port_desc_set_field(o, val, f, l);
	break;
case OF_PORT_DESC_PROP_BSN_UPLINK:
	of_port_desc_prop_bsn_uplink_set_field(o, val, f, l);
	break;
case OF_PORT_DESC_PROP_ETHERNET:
	of_port_desc_prop_ethernet_set_field(o, val, f, l);
	break;
case OF_PORT_DESC_PROP_OPTICAL:
	of_port_desc_prop_optical_set_field(o, val, f, l);
	break;
case OF_PORT_MOD_PROP_ETHERNET:
	of_port_mod_prop_ethernet_set_field(o, val, f, l);
	break;
case OF_PORT_MOD_PROP_OPTICAL:
	of_port_mod_prop_optical_set_field(o, val, f, l);
	break;
case OF_PORT_STATS_ENTRY:
	of_port_stats_entry_set_field(o, val, f, l);
	break;
case OF_PORT_STATS_PROP_ETHERNET:
	of_port_stats_prop_ethernet_set_field(o, val, f, l);
	break;
case OF_PORT_STATS_PROP_OPTICAL:
	of_port_stats_prop_optical_set_field(o, val, f, l);
	break;
case OF_QUEUE_DESC:
	of_queue_desc_set_field(o, val, f, l);
	break;
case OF_QUEUE_DESC_PROP_MAX_RATE:
	of_queue_desc_prop_max_rate_set_field(o, val, f, l);
	break;
case OF_QUEUE_DESC_PROP_MIN_RATE:
	of_queue_desc_prop_min_rate_set_field(o, val, f, l);
	break;
case OF_QUEUE_PROP_MAX_RATE:
	of_queue_prop_max_rate_set_field(o, val, f, l);
	break;
case OF_QUEUE_PROP_MIN_RATE:
	of_queue_prop_min_rate_set_field(o, val, f, l);
	break;
case OF_QUEUE_STATS_ENTRY:
	of_queue_stats_entry_set_field(o, val, f, l);
	break;
case OF_TABLE_DESC:
	of_table_desc_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_APPLY_ACTIONS:
	of_table_feature_prop_apply_actions_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_APPLY_ACTIONS_MISS:
	of_table_feature_prop_apply_actions_miss_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_APPLY_SETFIELD:
	of_table_feature_prop_apply_setfield_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_APPLY_SETFIELD_MISS:
	of_table_feature_prop_apply_setfield_miss_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_INSTRUCTIONS:
	of_table_feature_prop_instructions_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_INSTRUCTIONS_MISS:
	of_table_feature_prop_instructions_miss_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_MATCH:
	of_table_feature_prop_match_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_NEXT_TABLES:
	of_table_feature_prop_next_tables_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_NEXT_TABLES_MISS:
	of_table_feature_prop_next_tables_miss_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_TABLE_SYNC_FROM:
	of_table_feature_prop_table_sync_from_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WILDCARDS:
	of_table_feature_prop_wildcards_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WRITE_ACTIONS:
	of_table_feature_prop_write_actions_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WRITE_ACTIONS_MISS:
	of_table_feature_prop_write_actions_miss_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WRITE_SETFIELD:
	of_table_feature_prop_write_setfield_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WRITE_SETFIELD_MISS:
	of_table_feature_prop_write_setfield_miss_set_field(o, val, f, l);
	break;
case OF_TABLE_FEATURES:
	of_table_features_set_field(o, val, f, l);
	break;
case OF_TABLE_MOD_PROP_EVICTION:
	of_table_mod_prop_eviction_set_field(o, val, f, l);
	break;
case OF_TABLE_MOD_PROP_VACANCY:
	of_table_mod_prop_vacancy_set_field(o, val, f, l);
	break;
case OF_TABLE_STATS_ENTRY:
	of_table_stats_entry_set_field(o, val, f, l);
	break;
case OF_UINT32:
	of_uint32_set_field(o, val, f, l);
	break;
case OF_UINT64:
	of_uint64_set_field(o, val, f, l);
	break;
case OF_UINT8:
	of_uint8_set_field(o, val, f, l);
	break;
case OF_LIST_ACTION:
	of_list_action_set_field(o, val, f, l);
	break;
case OF_LIST_ACTION_ID:
	of_list_action_id_set_field(o, val, f, l);
	break;
case OF_LIST_ASYNC_CONFIG_PROP:
	of_list_async_config_prop_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_CONTROLLER_CONNECTION:
	of_list_bsn_controller_connection_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_DEBUG_COUNTER_DESC_STATS_ENTRY:
	of_list_bsn_debug_counter_desc_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_DEBUG_COUNTER_STATS_ENTRY:
	of_list_bsn_debug_counter_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_FLOW_CHECKSUM_BUCKET_STATS_ENTRY:
	of_list_bsn_flow_checksum_bucket_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENERIC_STATS_ENTRY:
	of_list_bsn_generic_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_BUCKET_STATS_ENTRY:
	of_list_bsn_gentable_bucket_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_DESC_STATS_ENTRY:
	of_list_bsn_gentable_desc_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_ENTRY_DESC_STATS_ENTRY:
	of_list_bsn_gentable_entry_desc_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_ENTRY_STATS_ENTRY:
	of_list_bsn_gentable_entry_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_STATS_ENTRY:
	of_list_bsn_gentable_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_INTERFACE:
	of_list_bsn_interface_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_LACP_STATS_ENTRY:
	of_list_bsn_lacp_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_PORT_COUNTER_STATS_ENTRY:
	of_list_bsn_port_counter_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_SWITCH_PIPELINE_STATS_ENTRY:
	of_list_bsn_switch_pipeline_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_TABLE_CHECKSUM_STATS_ENTRY:
	of_list_bsn_table_checksum_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_TLV:
	of_list_bsn_tlv_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_VLAN_COUNTER_STATS_ENTRY:
	of_list_bsn_vlan_counter_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BSN_VRF_COUNTER_STATS_ENTRY:
	of_list_bsn_vrf_counter_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_BUCKET:
	of_list_bucket_set_field(o, val, f, l);
	break;
case OF_LIST_BUCKET_COUNTER:
	of_list_bucket_counter_set_field(o, val, f, l);
	break;
case OF_LIST_BUNDLE_PROP:
	of_list_bundle_prop_set_field(o, val, f, l);
	break;
case OF_LIST_FLOW_STATS_ENTRY:
	of_list_flow_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_GROUP_DESC_STATS_ENTRY:
	of_list_group_desc_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_GROUP_STATS_ENTRY:
	of_list_group_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_HELLO_ELEM:
	of_list_hello_elem_set_field(o, val, f, l);
	break;
case OF_LIST_INSTRUCTION:
	of_list_instruction_set_field(o, val, f, l);
	break;
case OF_LIST_INSTRUCTION_ID:
	of_list_instruction_id_set_field(o, val, f, l);
	break;
case OF_LIST_METER_BAND:
	of_list_meter_band_set_field(o, val, f, l);
	break;
case OF_LIST_METER_BAND_STATS:
	of_list_meter_band_stats_set_field(o, val, f, l);
	break;
case OF_LIST_METER_STATS:
	of_list_meter_stats_set_field(o, val, f, l);
	break;
case OF_LIST_OXM:
	of_list_oxm_set_field(o, val, f, l);
	break;
case OF_LIST_PACKET_QUEUE:
	of_list_packet_queue_set_field(o, val, f, l);
	break;
case OF_LIST_PORT_DESC:
	of_list_port_desc_set_field(o, val, f, l);
	break;
case OF_LIST_PORT_DESC_PROP:
	of_list_port_desc_prop_set_field(o, val, f, l);
	break;
case OF_LIST_PORT_MOD_PROP:
	of_list_port_mod_prop_set_field(o, val, f, l);
	break;
case OF_LIST_PORT_STATS_ENTRY:
	of_list_port_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_PORT_STATS_PROP:
	of_list_port_stats_prop_set_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_DESC:
	of_list_queue_desc_set_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_DESC_PROP:
	of_list_queue_desc_prop_set_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_PROP:
	of_list_queue_prop_set_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_STATS_ENTRY:
	of_list_queue_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_STATS_PROP:
	of_list_queue_stats_prop_set_field(o, val, f, l);
	break;
case OF_LIST_ROLE_PROP:
	of_list_role_prop_set_field(o, val, f, l);
	break;
case OF_LIST_TABLE_DESC:
	of_list_table_desc_set_field(o, val, f, l);
	break;
case OF_LIST_TABLE_FEATURE_PROP:
	of_list_table_feature_prop_set_field(o, val, f, l);
	break;
case OF_LIST_TABLE_FEATURES:
	of_list_table_features_set_field(o, val, f, l);
	break;
case OF_LIST_TABLE_MOD_PROP:
	of_list_table_mod_prop_set_field(o, val, f, l);
	break;
case OF_LIST_TABLE_STATS_ENTRY:
	of_list_table_stats_entry_set_field(o, val, f, l);
	break;
case OF_LIST_UINT32:
	of_list_uint32_set_field(o, val, f, l);
	break;
case OF_LIST_UINT64:
	of_list_uint64_set_field(o, val, f, l);
	break;
case OF_LIST_UINT8:
	of_list_uint8_set_field(o, val, f, l);
	break;
default:
	//nothing
	break;
}
}
void get_field(of_object_t* o, unsigned long int *val, std::vector<int> f, int l){
switch(o->object_id){
case OF_AGGREGATE_STATS_REPLY:
	of_aggregate_stats_reply_get_field(o, val, f, l);
	break;
case OF_AGGREGATE_STATS_REQUEST:
	of_aggregate_stats_request_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_FAILED_ERROR_MSG:
	of_async_config_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_ASYNC_GET_REPLY:
	of_async_get_reply_get_field(o, val, f, l);
	break;
case OF_ASYNC_GET_REQUEST:
	of_async_get_request_get_field(o, val, f, l);
	break;
case OF_ASYNC_SET:
	of_async_set_get_field(o, val, f, l);
	break;
case OF_BAD_ACTION_ERROR_MSG:
	of_bad_action_error_msg_get_field(o, val, f, l);
	break;
case OF_BAD_INSTRUCTION_ERROR_MSG:
	of_bad_instruction_error_msg_get_field(o, val, f, l);
	break;
case OF_BAD_MATCH_ERROR_MSG:
	of_bad_match_error_msg_get_field(o, val, f, l);
	break;
case OF_BAD_PROPERTY_ERROR_MSG:
	of_bad_property_error_msg_get_field(o, val, f, l);
	break;
case OF_BAD_REQUEST_ERROR_MSG:
	of_bad_request_error_msg_get_field(o, val, f, l);
	break;
case OF_BARRIER_REPLY:
	of_barrier_reply_get_field(o, val, f, l);
	break;
case OF_BARRIER_REQUEST:
	of_barrier_request_get_field(o, val, f, l);
	break;
case OF_BSN_ARP_IDLE:
	of_bsn_arp_idle_get_field(o, val, f, l);
	break;
case OF_BSN_BW_CLEAR_DATA_REPLY:
	of_bsn_bw_clear_data_reply_get_field(o, val, f, l);
	break;
case OF_BSN_BW_CLEAR_DATA_REQUEST:
	of_bsn_bw_clear_data_request_get_field(o, val, f, l);
	break;
case OF_BSN_BW_ENABLE_GET_REPLY:
	of_bsn_bw_enable_get_reply_get_field(o, val, f, l);
	break;
case OF_BSN_BW_ENABLE_GET_REQUEST:
	of_bsn_bw_enable_get_request_get_field(o, val, f, l);
	break;
case OF_BSN_BW_ENABLE_SET_REPLY:
	of_bsn_bw_enable_set_reply_get_field(o, val, f, l);
	break;
case OF_BSN_BW_ENABLE_SET_REQUEST:
	of_bsn_bw_enable_set_request_get_field(o, val, f, l);
	break;
case OF_BSN_CONTROLLER_CONNECTIONS_REPLY:
	of_bsn_controller_connections_reply_get_field(o, val, f, l);
	break;
case OF_BSN_CONTROLLER_CONNECTIONS_REQUEST:
	of_bsn_controller_connections_request_get_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_DESC_STATS_REPLY:
	of_bsn_debug_counter_desc_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_DESC_STATS_REQUEST:
	of_bsn_debug_counter_desc_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_STATS_REPLY:
	of_bsn_debug_counter_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_STATS_REQUEST:
	of_bsn_debug_counter_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_FLOW_CHECKSUM_BUCKET_STATS_REPLY:
	of_bsn_flow_checksum_bucket_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_FLOW_CHECKSUM_BUCKET_STATS_REQUEST:
	of_bsn_flow_checksum_bucket_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE:
	of_bsn_flow_idle_get_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE_ENABLE_GET_REPLY:
	of_bsn_flow_idle_enable_get_reply_get_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE_ENABLE_GET_REQUEST:
	of_bsn_flow_idle_enable_get_request_get_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE_ENABLE_SET_REPLY:
	of_bsn_flow_idle_enable_set_reply_get_field(o, val, f, l);
	break;
case OF_BSN_FLOW_IDLE_ENABLE_SET_REQUEST:
	of_bsn_flow_idle_enable_set_request_get_field(o, val, f, l);
	break;
case OF_BSN_GENERIC_STATS_REPLY:
	of_bsn_generic_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GENERIC_STATS_REQUEST:
	of_bsn_generic_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_BUCKET_STATS_REPLY:
	of_bsn_gentable_bucket_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_BUCKET_STATS_REQUEST:
	of_bsn_gentable_bucket_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_CLEAR_REPLY:
	of_bsn_gentable_clear_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_CLEAR_REQUEST:
	of_bsn_gentable_clear_request_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_DESC_STATS_REPLY:
	of_bsn_gentable_desc_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_DESC_STATS_REQUEST:
	of_bsn_gentable_desc_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_ADD:
	of_bsn_gentable_entry_add_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_DELETE:
	of_bsn_gentable_entry_delete_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_DESC_STATS_REPLY:
	of_bsn_gentable_entry_desc_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_DESC_STATS_REQUEST:
	of_bsn_gentable_entry_desc_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_STATS_REPLY:
	of_bsn_gentable_entry_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_STATS_REQUEST:
	of_bsn_gentable_entry_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_SET_BUCKETS_SIZE:
	of_bsn_gentable_set_buckets_size_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_STATS_REPLY:
	of_bsn_gentable_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_STATS_REQUEST:
	of_bsn_gentable_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_GET_INTERFACES_REPLY:
	of_bsn_get_interfaces_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GET_INTERFACES_REQUEST:
	of_bsn_get_interfaces_request_get_field(o, val, f, l);
	break;
case OF_BSN_GET_IP_MASK_REPLY:
	of_bsn_get_ip_mask_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GET_IP_MASK_REQUEST:
	of_bsn_get_ip_mask_request_get_field(o, val, f, l);
	break;
case OF_BSN_GET_L2_TABLE_REPLY:
	of_bsn_get_l2_table_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GET_L2_TABLE_REQUEST:
	of_bsn_get_l2_table_request_get_field(o, val, f, l);
	break;
case OF_BSN_GET_MIRRORING_REPLY:
	of_bsn_get_mirroring_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GET_MIRRORING_REQUEST:
	of_bsn_get_mirroring_request_get_field(o, val, f, l);
	break;
case OF_BSN_GET_SWITCH_PIPELINE_REPLY:
	of_bsn_get_switch_pipeline_reply_get_field(o, val, f, l);
	break;
case OF_BSN_GET_SWITCH_PIPELINE_REQUEST:
	of_bsn_get_switch_pipeline_request_get_field(o, val, f, l);
	break;
case OF_BSN_HYBRID_GET_REPLY:
	of_bsn_hybrid_get_reply_get_field(o, val, f, l);
	break;
case OF_BSN_HYBRID_GET_REQUEST:
	of_bsn_hybrid_get_request_get_field(o, val, f, l);
	break;
case OF_BSN_IMAGE_DESC_STATS_REPLY:
	of_bsn_image_desc_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_IMAGE_DESC_STATS_REQUEST:
	of_bsn_image_desc_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_LACP_CONVERGENCE_NOTIF:
	of_bsn_lacp_convergence_notif_get_field(o, val, f, l);
	break;
case OF_BSN_LACP_STATS_REPLY:
	of_bsn_lacp_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_LACP_STATS_REQUEST:
	of_bsn_lacp_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_LOG:
	of_bsn_log_get_field(o, val, f, l);
	break;
case OF_BSN_LUA_COMMAND_REPLY:
	of_bsn_lua_command_reply_get_field(o, val, f, l);
	break;
case OF_BSN_LUA_COMMAND_REQUEST:
	of_bsn_lua_command_request_get_field(o, val, f, l);
	break;
case OF_BSN_LUA_NOTIFICATION:
	of_bsn_lua_notification_get_field(o, val, f, l);
	break;
case OF_BSN_LUA_UPLOAD:
	of_bsn_lua_upload_get_field(o, val, f, l);
	break;
case OF_BSN_PDU_RX_REPLY:
	of_bsn_pdu_rx_reply_get_field(o, val, f, l);
	break;
case OF_BSN_PDU_RX_REQUEST:
	of_bsn_pdu_rx_request_get_field(o, val, f, l);
	break;
case OF_BSN_PDU_RX_TIMEOUT:
	of_bsn_pdu_rx_timeout_get_field(o, val, f, l);
	break;
case OF_BSN_PDU_TX_REPLY:
	of_bsn_pdu_tx_reply_get_field(o, val, f, l);
	break;
case OF_BSN_PDU_TX_REQUEST:
	of_bsn_pdu_tx_request_get_field(o, val, f, l);
	break;
case OF_BSN_PORT_COUNTER_STATS_REPLY:
	of_bsn_port_counter_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_PORT_COUNTER_STATS_REQUEST:
	of_bsn_port_counter_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_ROLE_STATUS:
	of_bsn_role_status_get_field(o, val, f, l);
	break;
case OF_BSN_SET_AUX_CXNS_REPLY:
	of_bsn_set_aux_cxns_reply_get_field(o, val, f, l);
	break;
case OF_BSN_SET_AUX_CXNS_REQUEST:
	of_bsn_set_aux_cxns_request_get_field(o, val, f, l);
	break;
case OF_BSN_SET_IP_MASK:
	of_bsn_set_ip_mask_get_field(o, val, f, l);
	break;
case OF_BSN_SET_L2_TABLE_REPLY:
	of_bsn_set_l2_table_reply_get_field(o, val, f, l);
	break;
case OF_BSN_SET_L2_TABLE_REQUEST:
	of_bsn_set_l2_table_request_get_field(o, val, f, l);
	break;
case OF_BSN_SET_LACP_REPLY:
	of_bsn_set_lacp_reply_get_field(o, val, f, l);
	break;
case OF_BSN_SET_LACP_REQUEST:
	of_bsn_set_lacp_request_get_field(o, val, f, l);
	break;
case OF_BSN_SET_MIRRORING:
	of_bsn_set_mirroring_get_field(o, val, f, l);
	break;
case OF_BSN_SET_PKTIN_SUPPRESSION_REPLY:
	of_bsn_set_pktin_suppression_reply_get_field(o, val, f, l);
	break;
case OF_BSN_SET_PKTIN_SUPPRESSION_REQUEST:
	of_bsn_set_pktin_suppression_request_get_field(o, val, f, l);
	break;
case OF_BSN_SET_SWITCH_PIPELINE_REPLY:
	of_bsn_set_switch_pipeline_reply_get_field(o, val, f, l);
	break;
case OF_BSN_SET_SWITCH_PIPELINE_REQUEST:
	of_bsn_set_switch_pipeline_request_get_field(o, val, f, l);
	break;
case OF_BSN_SHELL_COMMAND:
	of_bsn_shell_command_get_field(o, val, f, l);
	break;
case OF_BSN_SHELL_OUTPUT:
	of_bsn_shell_output_get_field(o, val, f, l);
	break;
case OF_BSN_SHELL_STATUS:
	of_bsn_shell_status_get_field(o, val, f, l);
	break;
case OF_BSN_SWITCH_PIPELINE_STATS_REPLY:
	of_bsn_switch_pipeline_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_SWITCH_PIPELINE_STATS_REQUEST:
	of_bsn_switch_pipeline_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_TABLE_CHECKSUM_STATS_REPLY:
	of_bsn_table_checksum_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_TABLE_CHECKSUM_STATS_REQUEST:
	of_bsn_table_checksum_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_TABLE_SET_BUCKETS_SIZE:
	of_bsn_table_set_buckets_size_get_field(o, val, f, l);
	break;
case OF_BSN_TIME_REPLY:
	of_bsn_time_reply_get_field(o, val, f, l);
	break;
case OF_BSN_TIME_REQUEST:
	of_bsn_time_request_get_field(o, val, f, l);
	break;
case OF_BSN_VIRTUAL_PORT_CREATE_REPLY:
	of_bsn_virtual_port_create_reply_get_field(o, val, f, l);
	break;
case OF_BSN_VIRTUAL_PORT_CREATE_REQUEST:
	of_bsn_virtual_port_create_request_get_field(o, val, f, l);
	break;
case OF_BSN_VIRTUAL_PORT_REMOVE_REPLY:
	of_bsn_virtual_port_remove_reply_get_field(o, val, f, l);
	break;
case OF_BSN_VIRTUAL_PORT_REMOVE_REQUEST:
	of_bsn_virtual_port_remove_request_get_field(o, val, f, l);
	break;
case OF_BSN_VLAN_COUNTER_STATS_REPLY:
	of_bsn_vlan_counter_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_VLAN_COUNTER_STATS_REQUEST:
	of_bsn_vlan_counter_stats_request_get_field(o, val, f, l);
	break;
case OF_BSN_VRF_COUNTER_STATS_REPLY:
	of_bsn_vrf_counter_stats_reply_get_field(o, val, f, l);
	break;
case OF_BSN_VRF_COUNTER_STATS_REQUEST:
	of_bsn_vrf_counter_stats_request_get_field(o, val, f, l);
	break;
case OF_BUNDLE_ADD_MSG:
	of_bundle_add_msg_get_field(o, val, f, l);
	break;
case OF_BUNDLE_CTRL_MSG:
	of_bundle_ctrl_msg_get_field(o, val, f, l);
	break;
case OF_BUNDLE_FAILED_ERROR_MSG:
	of_bundle_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_DESC_STATS_REPLY:
	of_desc_stats_reply_get_field(o, val, f, l);
	break;
case OF_DESC_STATS_REQUEST:
	of_desc_stats_request_get_field(o, val, f, l);
	break;
case OF_ECHO_REPLY:
	of_echo_reply_get_field(o, val, f, l);
	break;
case OF_ECHO_REQUEST:
	of_echo_request_get_field(o, val, f, l);
	break;
case OF_EXPERIMENTER_ERROR_MSG:
	of_experimenter_error_msg_get_field(o, val, f, l);
	break;
case OF_FEATURES_REPLY:
	of_features_reply_get_field(o, val, f, l);
	break;
case OF_FEATURES_REQUEST:
	of_features_request_get_field(o, val, f, l);
	break;
case OF_FLOW_ADD:
	of_flow_add_get_field(o, val, f, l);
	break;
case OF_FLOW_DELETE:
	of_flow_delete_get_field(o, val, f, l);
	break;
case OF_FLOW_DELETE_STRICT:
	of_flow_delete_strict_get_field(o, val, f, l);
	break;
case OF_FLOW_MOD_FAILED_ERROR_MSG:
	of_flow_mod_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_FLOW_MODIFY:
	of_flow_modify_get_field(o, val, f, l);
	break;
case OF_FLOW_MODIFY_STRICT:
	of_flow_modify_strict_get_field(o, val, f, l);
	break;
case OF_FLOW_MONITOR_FAILED_ERROR_MSG:
	of_flow_monitor_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_FLOW_REMOVED:
	of_flow_removed_get_field(o, val, f, l);
	break;
case OF_FLOW_STATS_REPLY:
	of_flow_stats_reply_get_field(o, val, f, l);
	break;
case OF_FLOW_STATS_REQUEST:
	of_flow_stats_request_get_field(o, val, f, l);
	break;
case OF_GET_CONFIG_REPLY:
	of_get_config_reply_get_field(o, val, f, l);
	break;
case OF_GET_CONFIG_REQUEST:
	of_get_config_request_get_field(o, val, f, l);
	break;
case OF_GROUP_ADD:
	of_group_add_get_field(o, val, f, l);
	break;
case OF_GROUP_DELETE:
	of_group_delete_get_field(o, val, f, l);
	break;
case OF_GROUP_DESC_STATS_REPLY:
	of_group_desc_stats_reply_get_field(o, val, f, l);
	break;
case OF_GROUP_DESC_STATS_REQUEST:
	of_group_desc_stats_request_get_field(o, val, f, l);
	break;
case OF_GROUP_FEATURES_STATS_REPLY:
	of_group_features_stats_reply_get_field(o, val, f, l);
	break;
case OF_GROUP_FEATURES_STATS_REQUEST:
	of_group_features_stats_request_get_field(o, val, f, l);
	break;
case OF_GROUP_MOD_FAILED_ERROR_MSG:
	of_group_mod_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_GROUP_MODIFY:
	of_group_modify_get_field(o, val, f, l);
	break;
case OF_GROUP_STATS_REPLY:
	of_group_stats_reply_get_field(o, val, f, l);
	break;
case OF_GROUP_STATS_REQUEST:
	of_group_stats_request_get_field(o, val, f, l);
	break;
case OF_HELLO:
	of_hello_get_field(o, val, f, l);
	break;
case OF_HELLO_FAILED_ERROR_MSG:
	of_hello_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_METER_CONFIG_STATS_REPLY:
	of_meter_config_stats_reply_get_field(o, val, f, l);
	break;
case OF_METER_CONFIG_STATS_REQUEST:
	of_meter_config_stats_request_get_field(o, val, f, l);
	break;
case OF_METER_FEATURES_STATS_REPLY:
	of_meter_features_stats_reply_get_field(o, val, f, l);
	break;
case OF_METER_FEATURES_STATS_REQUEST:
	of_meter_features_stats_request_get_field(o, val, f, l);
	break;
case OF_METER_MOD:
	of_meter_mod_get_field(o, val, f, l);
	break;
case OF_METER_MOD_FAILED_ERROR_MSG:
	of_meter_mod_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_METER_STATS_REPLY:
	of_meter_stats_reply_get_field(o, val, f, l);
	break;
case OF_METER_STATS_REQUEST:
	of_meter_stats_request_get_field(o, val, f, l);
	break;
case OF_NICIRA_CONTROLLER_ROLE_REPLY:
	of_nicira_controller_role_reply_get_field(o, val, f, l);
	break;
case OF_NICIRA_CONTROLLER_ROLE_REQUEST:
	of_nicira_controller_role_request_get_field(o, val, f, l);
	break;
case OF_PACKET_IN:
	of_packet_in_get_field(o, val, f, l);
	break;
case OF_PACKET_OUT:
	of_packet_out_get_field(o, val, f, l);
	break;
case OF_PORT_DESC_STATS_REPLY:
	of_port_desc_stats_reply_get_field(o, val, f, l);
	break;
case OF_PORT_DESC_STATS_REQUEST:
	of_port_desc_stats_request_get_field(o, val, f, l);
	break;
case OF_PORT_MOD:
	of_port_mod_get_field(o, val, f, l);
	break;
case OF_PORT_MOD_FAILED_ERROR_MSG:
	of_port_mod_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_PORT_STATS_REPLY:
	of_port_stats_reply_get_field(o, val, f, l);
	break;
case OF_PORT_STATS_REQUEST:
	of_port_stats_request_get_field(o, val, f, l);
	break;
case OF_PORT_STATUS:
	of_port_status_get_field(o, val, f, l);
	break;
case OF_QUEUE_DESC_STATS_REPLY:
	of_queue_desc_stats_reply_get_field(o, val, f, l);
	break;
case OF_QUEUE_DESC_STATS_REQUEST:
	of_queue_desc_stats_request_get_field(o, val, f, l);
	break;
case OF_QUEUE_GET_CONFIG_REPLY:
	of_queue_get_config_reply_get_field(o, val, f, l);
	break;
case OF_QUEUE_GET_CONFIG_REQUEST:
	of_queue_get_config_request_get_field(o, val, f, l);
	break;
case OF_QUEUE_OP_FAILED_ERROR_MSG:
	of_queue_op_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_QUEUE_STATS_REPLY:
	of_queue_stats_reply_get_field(o, val, f, l);
	break;
case OF_QUEUE_STATS_REQUEST:
	of_queue_stats_request_get_field(o, val, f, l);
	break;
case OF_REQUESTFORWARD:
	of_requestforward_get_field(o, val, f, l);
	break;
case OF_ROLE_REPLY:
	of_role_reply_get_field(o, val, f, l);
	break;
case OF_ROLE_REQUEST:
	of_role_request_get_field(o, val, f, l);
	break;
case OF_ROLE_REQUEST_FAILED_ERROR_MSG:
	of_role_request_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_ROLE_STATUS:
	of_role_status_get_field(o, val, f, l);
	break;
case OF_SET_CONFIG:
	of_set_config_get_field(o, val, f, l);
	break;
case OF_SWITCH_CONFIG_FAILED_ERROR_MSG:
	of_switch_config_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_TABLE_DESC_STATS_REPLY:
	of_table_desc_stats_reply_get_field(o, val, f, l);
	break;
case OF_TABLE_DESC_STATS_REQUEST:
	of_table_desc_stats_request_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURES_FAILED_ERROR_MSG:
	of_table_features_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURES_STATS_REPLY:
	of_table_features_stats_reply_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURES_STATS_REQUEST:
	of_table_features_stats_request_get_field(o, val, f, l);
	break;
case OF_TABLE_MOD:
	of_table_mod_get_field(o, val, f, l);
	break;
case OF_TABLE_MOD_FAILED_ERROR_MSG:
	of_table_mod_failed_error_msg_get_field(o, val, f, l);
	break;
case OF_TABLE_STATS_REPLY:
	of_table_stats_reply_get_field(o, val, f, l);
	break;
case OF_TABLE_STATS_REQUEST:
	of_table_stats_request_get_field(o, val, f, l);
	break;
case OF_TABLE_STATUS:
	of_table_status_get_field(o, val, f, l);
	break;
case OF_ACTION_BSN_CHECKSUM:
	of_action_bsn_checksum_get_field(o, val, f, l);
	break;
case OF_ACTION_BSN_GENTABLE:
	of_action_bsn_gentable_get_field(o, val, f, l);
	break;
case OF_ACTION_BSN_MIRROR:
	of_action_bsn_mirror_get_field(o, val, f, l);
	break;
case OF_ACTION_BSN_SET_TUNNEL_DST:
	of_action_bsn_set_tunnel_dst_get_field(o, val, f, l);
	break;
case OF_ACTION_COPY_TTL_IN:
	of_action_copy_ttl_in_get_field(o, val, f, l);
	break;
case OF_ACTION_COPY_TTL_OUT:
	of_action_copy_ttl_out_get_field(o, val, f, l);
	break;
case OF_ACTION_DEC_MPLS_TTL:
	of_action_dec_mpls_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_DEC_NW_TTL:
	of_action_dec_nw_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_ENQUEUE:
	of_action_enqueue_get_field(o, val, f, l);
	break;
case OF_ACTION_GROUP:
	of_action_group_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_BSN_CHECKSUM:
	of_action_id_bsn_checksum_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_BSN_GENTABLE:
	of_action_id_bsn_gentable_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_BSN_MIRROR:
	of_action_id_bsn_mirror_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_BSN_SET_TUNNEL_DST:
	of_action_id_bsn_set_tunnel_dst_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_COPY_TTL_IN:
	of_action_id_copy_ttl_in_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_COPY_TTL_OUT:
	of_action_id_copy_ttl_out_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_DEC_MPLS_TTL:
	of_action_id_dec_mpls_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_DEC_NW_TTL:
	of_action_id_dec_nw_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_GROUP:
	of_action_id_group_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_NICIRA_DEC_TTL:
	of_action_id_nicira_dec_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_OUTPUT:
	of_action_id_output_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_POP_MPLS:
	of_action_id_pop_mpls_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_POP_PBB:
	of_action_id_pop_pbb_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_POP_VLAN:
	of_action_id_pop_vlan_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_PUSH_MPLS:
	of_action_id_push_mpls_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_PUSH_PBB:
	of_action_id_push_pbb_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_PUSH_VLAN:
	of_action_id_push_vlan_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_SET_FIELD:
	of_action_id_set_field_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_SET_MPLS_TTL:
	of_action_id_set_mpls_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_SET_NW_TTL:
	of_action_id_set_nw_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_ID_SET_QUEUE:
	of_action_id_set_queue_get_field(o, val, f, l);
	break;
case OF_ACTION_NICIRA_DEC_TTL:
	of_action_nicira_dec_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_OUTPUT:
	of_action_output_get_field(o, val, f, l);
	break;
case OF_ACTION_POP_MPLS:
	of_action_pop_mpls_get_field(o, val, f, l);
	break;
case OF_ACTION_POP_PBB:
	of_action_pop_pbb_get_field(o, val, f, l);
	break;
case OF_ACTION_POP_VLAN:
	of_action_pop_vlan_get_field(o, val, f, l);
	break;
case OF_ACTION_PUSH_MPLS:
	of_action_push_mpls_get_field(o, val, f, l);
	break;
case OF_ACTION_PUSH_PBB:
	of_action_push_pbb_get_field(o, val, f, l);
	break;
case OF_ACTION_PUSH_VLAN:
	of_action_push_vlan_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_DL_DST:
	of_action_set_dl_dst_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_DL_SRC:
	of_action_set_dl_src_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_FIELD:
	of_action_set_field_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_MPLS_LABEL:
	of_action_set_mpls_label_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_MPLS_TC:
	of_action_set_mpls_tc_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_MPLS_TTL:
	of_action_set_mpls_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_DST:
	of_action_set_nw_dst_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_ECN:
	of_action_set_nw_ecn_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_SRC:
	of_action_set_nw_src_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_TOS:
	of_action_set_nw_tos_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_NW_TTL:
	of_action_set_nw_ttl_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_QUEUE:
	of_action_set_queue_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_TP_DST:
	of_action_set_tp_dst_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_TP_SRC:
	of_action_set_tp_src_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_VLAN_PCP:
	of_action_set_vlan_pcp_get_field(o, val, f, l);
	break;
case OF_ACTION_SET_VLAN_VID:
	of_action_set_vlan_vid_get_field(o, val, f, l);
	break;
case OF_ACTION_STRIP_VLAN:
	of_action_strip_vlan_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_EXPERIMENTER_MASTER:
	of_async_config_prop_experimenter_master_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_EXPERIMENTER_SLAVE:
	of_async_config_prop_experimenter_slave_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_FLOW_REMOVED_MASTER:
	of_async_config_prop_flow_removed_master_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_FLOW_REMOVED_SLAVE:
	of_async_config_prop_flow_removed_slave_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_PACKET_IN_MASTER:
	of_async_config_prop_packet_in_master_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_PACKET_IN_SLAVE:
	of_async_config_prop_packet_in_slave_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_PORT_STATUS_MASTER:
	of_async_config_prop_port_status_master_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_PORT_STATUS_SLAVE:
	of_async_config_prop_port_status_slave_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_REQUESTFORWARD_MASTER:
	of_async_config_prop_requestforward_master_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_REQUESTFORWARD_SLAVE:
	of_async_config_prop_requestforward_slave_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_ROLE_STATUS_MASTER:
	of_async_config_prop_role_status_master_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_ROLE_STATUS_SLAVE:
	of_async_config_prop_role_status_slave_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_TABLE_STATUS_MASTER:
	of_async_config_prop_table_status_master_get_field(o, val, f, l);
	break;
case OF_ASYNC_CONFIG_PROP_TABLE_STATUS_SLAVE:
	of_async_config_prop_table_status_slave_get_field(o, val, f, l);
	break;
case OF_BSN_CONTROLLER_CONNECTION:
	of_bsn_controller_connection_get_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_DESC_STATS_ENTRY:
	of_bsn_debug_counter_desc_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_DEBUG_COUNTER_STATS_ENTRY:
	of_bsn_debug_counter_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_FLOW_CHECKSUM_BUCKET_STATS_ENTRY:
	of_bsn_flow_checksum_bucket_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_GENERIC_STATS_ENTRY:
	of_bsn_generic_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_BUCKET_STATS_ENTRY:
	of_bsn_gentable_bucket_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_DESC_STATS_ENTRY:
	of_bsn_gentable_desc_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_DESC_STATS_ENTRY:
	of_bsn_gentable_entry_desc_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_ENTRY_STATS_ENTRY:
	of_bsn_gentable_entry_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_GENTABLE_STATS_ENTRY:
	of_bsn_gentable_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_INTERFACE:
	of_bsn_interface_get_field(o, val, f, l);
	break;
case OF_BSN_LACP_STATS_ENTRY:
	of_bsn_lacp_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_PORT_COUNTER_STATS_ENTRY:
	of_bsn_port_counter_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_SWITCH_PIPELINE_STATS_ENTRY:
	of_bsn_switch_pipeline_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_TABLE_CHECKSUM_STATS_ENTRY:
	of_bsn_table_checksum_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_KEY:
	of_bsn_tlv_actor_key_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_PORT_NUM:
	of_bsn_tlv_actor_port_num_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_PORT_PRIORITY:
	of_bsn_tlv_actor_port_priority_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_STATE:
	of_bsn_tlv_actor_state_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_SYSTEM_MAC:
	of_bsn_tlv_actor_system_mac_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ACTOR_SYSTEM_PRIORITY:
	of_bsn_tlv_actor_system_priority_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_BROADCAST_QUERY_TIMEOUT:
	of_bsn_tlv_broadcast_query_timeout_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_BUCKET:
	of_bsn_tlv_bucket_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_CIRCUIT_ID:
	of_bsn_tlv_circuit_id_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_CONVERGENCE_STATUS:
	of_bsn_tlv_convergence_status_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_CRC_ENABLED:
	of_bsn_tlv_crc_enabled_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_DATA:
	of_bsn_tlv_data_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ETH_DST:
	of_bsn_tlv_eth_dst_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ETH_SRC:
	of_bsn_tlv_eth_src_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_GATEWAY_IP:
	of_bsn_tlv_external_gateway_ip_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_GATEWAY_MAC:
	of_bsn_tlv_external_gateway_mac_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_IP:
	of_bsn_tlv_external_ip_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_MAC:
	of_bsn_tlv_external_mac_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_EXTERNAL_NETMASK:
	of_bsn_tlv_external_netmask_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_HEADER_SIZE:
	of_bsn_tlv_header_size_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ICMP_CODE:
	of_bsn_tlv_icmp_code_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ICMP_ID:
	of_bsn_tlv_icmp_id_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_ICMP_TYPE:
	of_bsn_tlv_icmp_type_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_IDLE_NOTIFICATION:
	of_bsn_tlv_idle_notification_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_IDLE_TIME:
	of_bsn_tlv_idle_time_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_IDLE_TIMEOUT:
	of_bsn_tlv_idle_timeout_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_INTERNAL_GATEWAY_MAC:
	of_bsn_tlv_internal_gateway_mac_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_INTERNAL_MAC:
	of_bsn_tlv_internal_mac_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_INTERVAL:
	of_bsn_tlv_interval_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_IP_PROTO:
	of_bsn_tlv_ip_proto_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_IPV4:
	of_bsn_tlv_ipv4_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_IPV4_DST:
	of_bsn_tlv_ipv4_dst_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_IPV4_NETMASK:
	of_bsn_tlv_ipv4_netmask_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_IPV4_SRC:
	of_bsn_tlv_ipv4_src_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_MAC:
	of_bsn_tlv_mac_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_MAC_MASK:
	of_bsn_tlv_mac_mask_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_MISS_PACKETS:
	of_bsn_tlv_miss_packets_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_MPLS_CONTROL_WORD:
	of_bsn_tlv_mpls_control_word_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_MPLS_LABEL:
	of_bsn_tlv_mpls_label_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_MPLS_SEQUENCED:
	of_bsn_tlv_mpls_sequenced_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_NAME:
	of_bsn_tlv_name_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_KEY:
	of_bsn_tlv_partner_key_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_PORT_NUM:
	of_bsn_tlv_partner_port_num_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_PORT_PRIORITY:
	of_bsn_tlv_partner_port_priority_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_STATE:
	of_bsn_tlv_partner_state_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_SYSTEM_MAC:
	of_bsn_tlv_partner_system_mac_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_PARTNER_SYSTEM_PRIORITY:
	of_bsn_tlv_partner_system_priority_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_PORT:
	of_bsn_tlv_port_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_PRIORITY:
	of_bsn_tlv_priority_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_QUEUE_ID:
	of_bsn_tlv_queue_id_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_QUEUE_WEIGHT:
	of_bsn_tlv_queue_weight_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_REFERENCE:
	of_bsn_tlv_reference_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_REPLY_PACKETS:
	of_bsn_tlv_reply_packets_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_REQUEST_PACKETS:
	of_bsn_tlv_request_packets_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_RX_BYTES:
	of_bsn_tlv_rx_bytes_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_RX_PACKETS:
	of_bsn_tlv_rx_packets_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_SAMPLING_RATE:
	of_bsn_tlv_sampling_rate_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_SUB_AGENT_ID:
	of_bsn_tlv_sub_agent_id_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_TCP_DST:
	of_bsn_tlv_tcp_dst_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_TCP_SRC:
	of_bsn_tlv_tcp_src_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_TX_BYTES:
	of_bsn_tlv_tx_bytes_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_TX_PACKETS:
	of_bsn_tlv_tx_packets_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDF_ANCHOR:
	of_bsn_tlv_udf_anchor_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDF_ID:
	of_bsn_tlv_udf_id_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDF_LENGTH:
	of_bsn_tlv_udf_length_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDF_OFFSET:
	of_bsn_tlv_udf_offset_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDP_DST:
	of_bsn_tlv_udp_dst_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_UDP_SRC:
	of_bsn_tlv_udp_src_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_UNICAST_QUERY_TIMEOUT:
	of_bsn_tlv_unicast_query_timeout_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_VLAN_VID:
	of_bsn_tlv_vlan_vid_get_field(o, val, f, l);
	break;
case OF_BSN_TLV_VRF:
	of_bsn_tlv_vrf_get_field(o, val, f, l);
	break;
case OF_BSN_VLAN_COUNTER_STATS_ENTRY:
	of_bsn_vlan_counter_stats_entry_get_field(o, val, f, l);
	break;
case OF_BSN_VPORT_L2GRE:
	of_bsn_vport_l2gre_get_field(o, val, f, l);
	break;
case OF_BSN_VPORT_Q_IN_Q:
	of_bsn_vport_q_in_q_get_field(o, val, f, l);
	break;
case OF_BSN_VRF_COUNTER_STATS_ENTRY:
	of_bsn_vrf_counter_stats_entry_get_field(o, val, f, l);
	break;
case OF_BUCKET:
	of_bucket_get_field(o, val, f, l);
	break;
case OF_BUCKET_COUNTER:
	of_bucket_counter_get_field(o, val, f, l);
	break;
case OF_FLOW_STATS_ENTRY:
	of_flow_stats_entry_get_field(o, val, f, l);
	break;
case OF_GROUP_DESC_STATS_ENTRY:
	of_group_desc_stats_entry_get_field(o, val, f, l);
	break;
case OF_GROUP_STATS_ENTRY:
	of_group_stats_entry_get_field(o, val, f, l);
	break;
case OF_HELLO_ELEM_VERSIONBITMAP:
	of_hello_elem_versionbitmap_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_APPLY_ACTIONS:
	of_instruction_apply_actions_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_ARP_OFFLOAD:
	of_instruction_bsn_arp_offload_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_AUTO_NEGOTIATION:
	of_instruction_bsn_auto_negotiation_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DENY:
	of_instruction_bsn_deny_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DHCP_OFFLOAD:
	of_instruction_bsn_dhcp_offload_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DISABLE_SPLIT_HORIZON_CHECK:
	of_instruction_bsn_disable_split_horizon_check_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DISABLE_SRC_MAC_CHECK:
	of_instruction_bsn_disable_src_mac_check_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_DISABLE_VLAN_COUNTERS:
	of_instruction_bsn_disable_vlan_counters_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_PACKET_OF_DEATH:
	of_instruction_bsn_packet_of_death_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_PERMIT:
	of_instruction_bsn_permit_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_PRIORITIZE_PDUS:
	of_instruction_bsn_prioritize_pdus_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_REQUIRE_VLAN_XLATE:
	of_instruction_bsn_require_vlan_xlate_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_BSN_SPAN_DESTINATION:
	of_instruction_bsn_span_destination_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_CLEAR_ACTIONS:
	of_instruction_clear_actions_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_GOTO_TABLE:
	of_instruction_goto_table_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_APPLY_ACTIONS:
	of_instruction_id_apply_actions_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_ARP_OFFLOAD:
	of_instruction_id_bsn_arp_offload_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_AUTO_NEGOTIATION:
	of_instruction_id_bsn_auto_negotiation_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DENY:
	of_instruction_id_bsn_deny_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DHCP_OFFLOAD:
	of_instruction_id_bsn_dhcp_offload_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DISABLE_SPLIT_HORIZON_CHECK:
	of_instruction_id_bsn_disable_split_horizon_check_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DISABLE_SRC_MAC_CHECK:
	of_instruction_id_bsn_disable_src_mac_check_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_DISABLE_VLAN_COUNTERS:
	of_instruction_id_bsn_disable_vlan_counters_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_PACKET_OF_DEATH:
	of_instruction_id_bsn_packet_of_death_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_PERMIT:
	of_instruction_id_bsn_permit_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_PRIORITIZE_PDUS:
	of_instruction_id_bsn_prioritize_pdus_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_REQUIRE_VLAN_XLATE:
	of_instruction_id_bsn_require_vlan_xlate_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_BSN_SPAN_DESTINATION:
	of_instruction_id_bsn_span_destination_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_CLEAR_ACTIONS:
	of_instruction_id_clear_actions_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_GOTO_TABLE:
	of_instruction_id_goto_table_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_METER:
	of_instruction_id_meter_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_WRITE_ACTIONS:
	of_instruction_id_write_actions_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_ID_WRITE_METADATA:
	of_instruction_id_write_metadata_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_METER:
	of_instruction_meter_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_WRITE_ACTIONS:
	of_instruction_write_actions_get_field(o, val, f, l);
	break;
case OF_INSTRUCTION_WRITE_METADATA:
	of_instruction_write_metadata_get_field(o, val, f, l);
	break;
case OF_MATCH_V1:
	of_match_v1_get_field(o, val, f, l);
	break;
case OF_MATCH_V2:
	of_match_v2_get_field(o, val, f, l);
	break;
case OF_MATCH_V3:
	of_match_v3_get_field(o, val, f, l);
	break;
case OF_METER_BAND_DROP:
	of_meter_band_drop_get_field(o, val, f, l);
	break;
case OF_METER_BAND_DSCP_REMARK:
	of_meter_band_dscp_remark_get_field(o, val, f, l);
	break;
case OF_METER_BAND_EXPERIMENTER:
	of_meter_band_experimenter_get_field(o, val, f, l);
	break;
case OF_METER_BAND_STATS:
	of_meter_band_stats_get_field(o, val, f, l);
	break;
case OF_METER_CONFIG:
	of_meter_config_get_field(o, val, f, l);
	break;
case OF_METER_FEATURES:
	of_meter_features_get_field(o, val, f, l);
	break;
case OF_METER_STATS:
	of_meter_stats_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_OP:
	of_oxm_arp_op_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_OP_MASKED:
	of_oxm_arp_op_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_SHA:
	of_oxm_arp_sha_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_SHA_MASKED:
	of_oxm_arp_sha_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_SPA:
	of_oxm_arp_spa_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_SPA_MASKED:
	of_oxm_arp_spa_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_THA:
	of_oxm_arp_tha_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_THA_MASKED:
	of_oxm_arp_tha_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_TPA:
	of_oxm_arp_tpa_get_field(o, val, f, l);
	break;
case OF_OXM_ARP_TPA_MASKED:
	of_oxm_arp_tpa_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_EGR_PORT_GROUP_ID:
	of_oxm_bsn_egr_port_group_id_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_EGR_PORT_GROUP_ID_MASKED:
	of_oxm_bsn_egr_port_group_id_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_GLOBAL_VRF_ALLOWED:
	of_oxm_bsn_global_vrf_allowed_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_GLOBAL_VRF_ALLOWED_MASKED:
	of_oxm_bsn_global_vrf_allowed_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_IN_PORTS_128:
	of_oxm_bsn_in_ports_128_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_IN_PORTS_128_MASKED:
	of_oxm_bsn_in_ports_128_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_IN_PORTS_512:
	of_oxm_bsn_in_ports_512_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_IN_PORTS_512_MASKED:
	of_oxm_bsn_in_ports_512_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_INGRESS_PORT_GROUP_ID:
	of_oxm_bsn_ingress_port_group_id_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_INGRESS_PORT_GROUP_ID_MASKED:
	of_oxm_bsn_ingress_port_group_id_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_L2_CACHE_HIT:
	of_oxm_bsn_l2_cache_hit_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_L2_CACHE_HIT_MASKED:
	of_oxm_bsn_l2_cache_hit_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_DST_CLASS_ID:
	of_oxm_bsn_l3_dst_class_id_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_DST_CLASS_ID_MASKED:
	of_oxm_bsn_l3_dst_class_id_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_INTERFACE_CLASS_ID:
	of_oxm_bsn_l3_interface_class_id_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_INTERFACE_CLASS_ID_MASKED:
	of_oxm_bsn_l3_interface_class_id_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_SRC_CLASS_ID:
	of_oxm_bsn_l3_src_class_id_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_L3_SRC_CLASS_ID_MASKED:
	of_oxm_bsn_l3_src_class_id_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_LAG_ID:
	of_oxm_bsn_lag_id_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_LAG_ID_MASKED:
	of_oxm_bsn_lag_id_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_TCP_FLAGS:
	of_oxm_bsn_tcp_flags_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_TCP_FLAGS_MASKED:
	of_oxm_bsn_tcp_flags_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF0:
	of_oxm_bsn_udf0_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF0_MASKED:
	of_oxm_bsn_udf0_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF1:
	of_oxm_bsn_udf1_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF1_MASKED:
	of_oxm_bsn_udf1_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF2:
	of_oxm_bsn_udf2_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF2_MASKED:
	of_oxm_bsn_udf2_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF3:
	of_oxm_bsn_udf3_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF3_MASKED:
	of_oxm_bsn_udf3_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF4:
	of_oxm_bsn_udf4_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF4_MASKED:
	of_oxm_bsn_udf4_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF5:
	of_oxm_bsn_udf5_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF5_MASKED:
	of_oxm_bsn_udf5_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF6:
	of_oxm_bsn_udf6_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF6_MASKED:
	of_oxm_bsn_udf6_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF7:
	of_oxm_bsn_udf7_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_UDF7_MASKED:
	of_oxm_bsn_udf7_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_VLAN_XLATE_PORT_GROUP_ID:
	of_oxm_bsn_vlan_xlate_port_group_id_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_VLAN_XLATE_PORT_GROUP_ID_MASKED:
	of_oxm_bsn_vlan_xlate_port_group_id_masked_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_VRF:
	of_oxm_bsn_vrf_get_field(o, val, f, l);
	break;
case OF_OXM_BSN_VRF_MASKED:
	of_oxm_bsn_vrf_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ETH_DST:
	of_oxm_eth_dst_get_field(o, val, f, l);
	break;
case OF_OXM_ETH_DST_MASKED:
	of_oxm_eth_dst_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ETH_SRC:
	of_oxm_eth_src_get_field(o, val, f, l);
	break;
case OF_OXM_ETH_SRC_MASKED:
	of_oxm_eth_src_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ETH_TYPE:
	of_oxm_eth_type_get_field(o, val, f, l);
	break;
case OF_OXM_ETH_TYPE_MASKED:
	of_oxm_eth_type_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ICMPV4_CODE:
	of_oxm_icmpv4_code_get_field(o, val, f, l);
	break;
case OF_OXM_ICMPV4_CODE_MASKED:
	of_oxm_icmpv4_code_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ICMPV4_TYPE:
	of_oxm_icmpv4_type_get_field(o, val, f, l);
	break;
case OF_OXM_ICMPV4_TYPE_MASKED:
	of_oxm_icmpv4_type_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ICMPV6_CODE:
	of_oxm_icmpv6_code_get_field(o, val, f, l);
	break;
case OF_OXM_ICMPV6_CODE_MASKED:
	of_oxm_icmpv6_code_masked_get_field(o, val, f, l);
	break;
case OF_OXM_ICMPV6_TYPE:
	of_oxm_icmpv6_type_get_field(o, val, f, l);
	break;
case OF_OXM_ICMPV6_TYPE_MASKED:
	of_oxm_icmpv6_type_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IN_PHY_PORT:
	of_oxm_in_phy_port_get_field(o, val, f, l);
	break;
case OF_OXM_IN_PHY_PORT_MASKED:
	of_oxm_in_phy_port_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IN_PORT:
	of_oxm_in_port_get_field(o, val, f, l);
	break;
case OF_OXM_IN_PORT_MASKED:
	of_oxm_in_port_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IP_DSCP:
	of_oxm_ip_dscp_get_field(o, val, f, l);
	break;
case OF_OXM_IP_DSCP_MASKED:
	of_oxm_ip_dscp_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IP_ECN:
	of_oxm_ip_ecn_get_field(o, val, f, l);
	break;
case OF_OXM_IP_ECN_MASKED:
	of_oxm_ip_ecn_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IP_PROTO:
	of_oxm_ip_proto_get_field(o, val, f, l);
	break;
case OF_OXM_IP_PROTO_MASKED:
	of_oxm_ip_proto_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IPV4_DST:
	of_oxm_ipv4_dst_get_field(o, val, f, l);
	break;
case OF_OXM_IPV4_DST_MASKED:
	of_oxm_ipv4_dst_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IPV4_SRC:
	of_oxm_ipv4_src_get_field(o, val, f, l);
	break;
case OF_OXM_IPV4_SRC_MASKED:
	of_oxm_ipv4_src_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_DST:
	of_oxm_ipv6_dst_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_DST_MASKED:
	of_oxm_ipv6_dst_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_EXTHDR:
	of_oxm_ipv6_exthdr_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_EXTHDR_MASKED:
	of_oxm_ipv6_exthdr_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_FLABEL:
	of_oxm_ipv6_flabel_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_FLABEL_MASKED:
	of_oxm_ipv6_flabel_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_SLL:
	of_oxm_ipv6_nd_sll_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_SLL_MASKED:
	of_oxm_ipv6_nd_sll_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_TARGET:
	of_oxm_ipv6_nd_target_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_TARGET_MASKED:
	of_oxm_ipv6_nd_target_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_TLL:
	of_oxm_ipv6_nd_tll_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_ND_TLL_MASKED:
	of_oxm_ipv6_nd_tll_masked_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_SRC:
	of_oxm_ipv6_src_get_field(o, val, f, l);
	break;
case OF_OXM_IPV6_SRC_MASKED:
	of_oxm_ipv6_src_masked_get_field(o, val, f, l);
	break;
case OF_OXM_METADATA:
	of_oxm_metadata_get_field(o, val, f, l);
	break;
case OF_OXM_METADATA_MASKED:
	of_oxm_metadata_masked_get_field(o, val, f, l);
	break;
case OF_OXM_MPLS_BOS:
	of_oxm_mpls_bos_get_field(o, val, f, l);
	break;
case OF_OXM_MPLS_BOS_MASKED:
	of_oxm_mpls_bos_masked_get_field(o, val, f, l);
	break;
case OF_OXM_MPLS_LABEL:
	of_oxm_mpls_label_get_field(o, val, f, l);
	break;
case OF_OXM_MPLS_LABEL_MASKED:
	of_oxm_mpls_label_masked_get_field(o, val, f, l);
	break;
case OF_OXM_MPLS_TC:
	of_oxm_mpls_tc_get_field(o, val, f, l);
	break;
case OF_OXM_MPLS_TC_MASKED:
	of_oxm_mpls_tc_masked_get_field(o, val, f, l);
	break;
case OF_OXM_PBB_UCA:
	of_oxm_pbb_uca_get_field(o, val, f, l);
	break;
case OF_OXM_PBB_UCA_MASKED:
	of_oxm_pbb_uca_masked_get_field(o, val, f, l);
	break;
case OF_OXM_SCTP_DST:
	of_oxm_sctp_dst_get_field(o, val, f, l);
	break;
case OF_OXM_SCTP_DST_MASKED:
	of_oxm_sctp_dst_masked_get_field(o, val, f, l);
	break;
case OF_OXM_SCTP_SRC:
	of_oxm_sctp_src_get_field(o, val, f, l);
	break;
case OF_OXM_SCTP_SRC_MASKED:
	of_oxm_sctp_src_masked_get_field(o, val, f, l);
	break;
case OF_OXM_TCP_DST:
	of_oxm_tcp_dst_get_field(o, val, f, l);
	break;
case OF_OXM_TCP_DST_MASKED:
	of_oxm_tcp_dst_masked_get_field(o, val, f, l);
	break;
case OF_OXM_TCP_SRC:
	of_oxm_tcp_src_get_field(o, val, f, l);
	break;
case OF_OXM_TCP_SRC_MASKED:
	of_oxm_tcp_src_masked_get_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_ID:
	of_oxm_tunnel_id_get_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_ID_MASKED:
	of_oxm_tunnel_id_masked_get_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_IPV4_DST:
	of_oxm_tunnel_ipv4_dst_get_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_IPV4_DST_MASKED:
	of_oxm_tunnel_ipv4_dst_masked_get_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_IPV4_SRC:
	of_oxm_tunnel_ipv4_src_get_field(o, val, f, l);
	break;
case OF_OXM_TUNNEL_IPV4_SRC_MASKED:
	of_oxm_tunnel_ipv4_src_masked_get_field(o, val, f, l);
	break;
case OF_OXM_UDP_DST:
	of_oxm_udp_dst_get_field(o, val, f, l);
	break;
case OF_OXM_UDP_DST_MASKED:
	of_oxm_udp_dst_masked_get_field(o, val, f, l);
	break;
case OF_OXM_UDP_SRC:
	of_oxm_udp_src_get_field(o, val, f, l);
	break;
case OF_OXM_UDP_SRC_MASKED:
	of_oxm_udp_src_masked_get_field(o, val, f, l);
	break;
case OF_OXM_VLAN_PCP:
	of_oxm_vlan_pcp_get_field(o, val, f, l);
	break;
case OF_OXM_VLAN_PCP_MASKED:
	of_oxm_vlan_pcp_masked_get_field(o, val, f, l);
	break;
case OF_OXM_VLAN_VID:
	of_oxm_vlan_vid_get_field(o, val, f, l);
	break;
case OF_OXM_VLAN_VID_MASKED:
	of_oxm_vlan_vid_masked_get_field(o, val, f, l);
	break;
case OF_PACKET_QUEUE:
	of_packet_queue_get_field(o, val, f, l);
	break;
case OF_PORT_DESC:
	of_port_desc_get_field(o, val, f, l);
	break;
case OF_PORT_DESC_PROP_BSN_UPLINK:
	of_port_desc_prop_bsn_uplink_get_field(o, val, f, l);
	break;
case OF_PORT_DESC_PROP_ETHERNET:
	of_port_desc_prop_ethernet_get_field(o, val, f, l);
	break;
case OF_PORT_DESC_PROP_OPTICAL:
	of_port_desc_prop_optical_get_field(o, val, f, l);
	break;
case OF_PORT_MOD_PROP_ETHERNET:
	of_port_mod_prop_ethernet_get_field(o, val, f, l);
	break;
case OF_PORT_MOD_PROP_OPTICAL:
	of_port_mod_prop_optical_get_field(o, val, f, l);
	break;
case OF_PORT_STATS_ENTRY:
	of_port_stats_entry_get_field(o, val, f, l);
	break;
case OF_PORT_STATS_PROP_ETHERNET:
	of_port_stats_prop_ethernet_get_field(o, val, f, l);
	break;
case OF_PORT_STATS_PROP_OPTICAL:
	of_port_stats_prop_optical_get_field(o, val, f, l);
	break;
case OF_QUEUE_DESC:
	of_queue_desc_get_field(o, val, f, l);
	break;
case OF_QUEUE_DESC_PROP_MAX_RATE:
	of_queue_desc_prop_max_rate_get_field(o, val, f, l);
	break;
case OF_QUEUE_DESC_PROP_MIN_RATE:
	of_queue_desc_prop_min_rate_get_field(o, val, f, l);
	break;
case OF_QUEUE_PROP_MAX_RATE:
	of_queue_prop_max_rate_get_field(o, val, f, l);
	break;
case OF_QUEUE_PROP_MIN_RATE:
	of_queue_prop_min_rate_get_field(o, val, f, l);
	break;
case OF_QUEUE_STATS_ENTRY:
	of_queue_stats_entry_get_field(o, val, f, l);
	break;
case OF_TABLE_DESC:
	of_table_desc_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_APPLY_ACTIONS:
	of_table_feature_prop_apply_actions_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_APPLY_ACTIONS_MISS:
	of_table_feature_prop_apply_actions_miss_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_APPLY_SETFIELD:
	of_table_feature_prop_apply_setfield_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_APPLY_SETFIELD_MISS:
	of_table_feature_prop_apply_setfield_miss_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_INSTRUCTIONS:
	of_table_feature_prop_instructions_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_INSTRUCTIONS_MISS:
	of_table_feature_prop_instructions_miss_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_MATCH:
	of_table_feature_prop_match_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_NEXT_TABLES:
	of_table_feature_prop_next_tables_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_NEXT_TABLES_MISS:
	of_table_feature_prop_next_tables_miss_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_TABLE_SYNC_FROM:
	of_table_feature_prop_table_sync_from_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WILDCARDS:
	of_table_feature_prop_wildcards_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WRITE_ACTIONS:
	of_table_feature_prop_write_actions_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WRITE_ACTIONS_MISS:
	of_table_feature_prop_write_actions_miss_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WRITE_SETFIELD:
	of_table_feature_prop_write_setfield_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURE_PROP_WRITE_SETFIELD_MISS:
	of_table_feature_prop_write_setfield_miss_get_field(o, val, f, l);
	break;
case OF_TABLE_FEATURES:
	of_table_features_get_field(o, val, f, l);
	break;
case OF_TABLE_MOD_PROP_EVICTION:
	of_table_mod_prop_eviction_get_field(o, val, f, l);
	break;
case OF_TABLE_MOD_PROP_VACANCY:
	of_table_mod_prop_vacancy_get_field(o, val, f, l);
	break;
case OF_TABLE_STATS_ENTRY:
	of_table_stats_entry_get_field(o, val, f, l);
	break;
case OF_UINT32:
	of_uint32_get_field(o, val, f, l);
	break;
case OF_UINT64:
	of_uint64_get_field(o, val, f, l);
	break;
case OF_UINT8:
	of_uint8_get_field(o, val, f, l);
	break;
case OF_LIST_ACTION:
	of_list_action_get_field(o, val, f, l);
	break;
case OF_LIST_ACTION_ID:
	of_list_action_id_get_field(o, val, f, l);
	break;
case OF_LIST_ASYNC_CONFIG_PROP:
	of_list_async_config_prop_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_CONTROLLER_CONNECTION:
	of_list_bsn_controller_connection_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_DEBUG_COUNTER_DESC_STATS_ENTRY:
	of_list_bsn_debug_counter_desc_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_DEBUG_COUNTER_STATS_ENTRY:
	of_list_bsn_debug_counter_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_FLOW_CHECKSUM_BUCKET_STATS_ENTRY:
	of_list_bsn_flow_checksum_bucket_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENERIC_STATS_ENTRY:
	of_list_bsn_generic_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_BUCKET_STATS_ENTRY:
	of_list_bsn_gentable_bucket_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_DESC_STATS_ENTRY:
	of_list_bsn_gentable_desc_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_ENTRY_DESC_STATS_ENTRY:
	of_list_bsn_gentable_entry_desc_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_ENTRY_STATS_ENTRY:
	of_list_bsn_gentable_entry_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_GENTABLE_STATS_ENTRY:
	of_list_bsn_gentable_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_INTERFACE:
	of_list_bsn_interface_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_LACP_STATS_ENTRY:
	of_list_bsn_lacp_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_PORT_COUNTER_STATS_ENTRY:
	of_list_bsn_port_counter_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_SWITCH_PIPELINE_STATS_ENTRY:
	of_list_bsn_switch_pipeline_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_TABLE_CHECKSUM_STATS_ENTRY:
	of_list_bsn_table_checksum_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_TLV:
	of_list_bsn_tlv_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_VLAN_COUNTER_STATS_ENTRY:
	of_list_bsn_vlan_counter_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BSN_VRF_COUNTER_STATS_ENTRY:
	of_list_bsn_vrf_counter_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_BUCKET:
	of_list_bucket_get_field(o, val, f, l);
	break;
case OF_LIST_BUCKET_COUNTER:
	of_list_bucket_counter_get_field(o, val, f, l);
	break;
case OF_LIST_BUNDLE_PROP:
	of_list_bundle_prop_get_field(o, val, f, l);
	break;
case OF_LIST_FLOW_STATS_ENTRY:
	of_list_flow_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_GROUP_DESC_STATS_ENTRY:
	of_list_group_desc_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_GROUP_STATS_ENTRY:
	of_list_group_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_HELLO_ELEM:
	of_list_hello_elem_get_field(o, val, f, l);
	break;
case OF_LIST_INSTRUCTION:
	of_list_instruction_get_field(o, val, f, l);
	break;
case OF_LIST_INSTRUCTION_ID:
	of_list_instruction_id_get_field(o, val, f, l);
	break;
case OF_LIST_METER_BAND:
	of_list_meter_band_get_field(o, val, f, l);
	break;
case OF_LIST_METER_BAND_STATS:
	of_list_meter_band_stats_get_field(o, val, f, l);
	break;
case OF_LIST_METER_STATS:
	of_list_meter_stats_get_field(o, val, f, l);
	break;
case OF_LIST_OXM:
	of_list_oxm_get_field(o, val, f, l);
	break;
case OF_LIST_PACKET_QUEUE:
	of_list_packet_queue_get_field(o, val, f, l);
	break;
case OF_LIST_PORT_DESC:
	of_list_port_desc_get_field(o, val, f, l);
	break;
case OF_LIST_PORT_DESC_PROP:
	of_list_port_desc_prop_get_field(o, val, f, l);
	break;
case OF_LIST_PORT_MOD_PROP:
	of_list_port_mod_prop_get_field(o, val, f, l);
	break;
case OF_LIST_PORT_STATS_ENTRY:
	of_list_port_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_PORT_STATS_PROP:
	of_list_port_stats_prop_get_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_DESC:
	of_list_queue_desc_get_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_DESC_PROP:
	of_list_queue_desc_prop_get_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_PROP:
	of_list_queue_prop_get_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_STATS_ENTRY:
	of_list_queue_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_QUEUE_STATS_PROP:
	of_list_queue_stats_prop_get_field(o, val, f, l);
	break;
case OF_LIST_ROLE_PROP:
	of_list_role_prop_get_field(o, val, f, l);
	break;
case OF_LIST_TABLE_DESC:
	of_list_table_desc_get_field(o, val, f, l);
	break;
case OF_LIST_TABLE_FEATURE_PROP:
	of_list_table_feature_prop_get_field(o, val, f, l);
	break;
case OF_LIST_TABLE_FEATURES:
	of_list_table_features_get_field(o, val, f, l);
	break;
case OF_LIST_TABLE_MOD_PROP:
	of_list_table_mod_prop_get_field(o, val, f, l);
	break;
case OF_LIST_TABLE_STATS_ENTRY:
	of_list_table_stats_entry_get_field(o, val, f, l);
	break;
case OF_LIST_UINT32:
	of_list_uint32_get_field(o, val, f, l);
	break;
case OF_LIST_UINT64:
	of_list_uint64_get_field(o, val, f, l);
	break;
case OF_LIST_UINT8:
	of_list_uint8_get_field(o, val, f, l);
	break;
default:
	//nothing
	break;
}
}
};


